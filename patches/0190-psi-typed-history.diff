--- git.temp.orig/options/default.xml
+++ git.temp/options/default.xml
@@ -425,6 +425,10 @@
 				</send>
 				<clear type="QKeySequence" comment="Clear the text"/>
 				<quick-command type="QKeySequence" comment="Change to quick command mode">Ctrl+7</quick-command>
+				<show-messageLast type="QKeySequence" comment="Show last message" >Alt+Home</show-messageLast>
+				<show-messageFirst type="QKeySequence" comment="Show first message" >Alt+End</show-messageFirst>
+				<show-messageNext type="QKeySequence" comment="Show next message" >Ctrl+Down</show-messageNext>
+				<show-messagePrev type="QKeySequence" comment="Show prev message" >Ctrl+Up</show-messagePrev>
 			</chat>
 			<contactlist comment="Shortcuts in the contactlist">
 				<assign-custom-avatar type="QKeySequence" comment="Assign a custom avatar to the selected contact"/>
--- git.temp.orig/src/chatdlg.cpp
+++ git.temp/src/chatdlg.cpp
@@ -678,6 +678,7 @@ void ChatDlg::doSend()
 	}
 
 	m_ = m;
+	emit chatEdit()->appendMessageHistory(m.body());
 
 	// Request events
 	if (PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool()) {
--- git.temp.orig/src/groupchatdlg.cpp
+++ git.temp/src/groupchatdlg.cpp
@@ -936,6 +936,7 @@ void GCMainDlg::mle_returnPressed()
 	m.setType("groupchat");
 	m.setBody(str);
 	m.setTimeStamp(QDateTime::currentDateTime());
+	emit d->mle()->appendMessageHistory(m.body());
 
 	aSend(m);
 
--- git.temp.orig/src/msgmle.cpp
+++ git.temp/src/msgmle.cpp
@@ -58,13 +58,45 @@ ChatEdit::ChatEdit(QWidget *parent)
 	previous_position_ = 0;
 	setCheckSpelling(checkSpellingGloballyEnabled());
 	connect(PsiOptions::instance(),SIGNAL(optionChanged(const QString&)),SLOT(optionsChanged()));
+	typedMsgsIndex = 0;
+
+	initActions();
+	setShortcuts();
 }
 
 ChatEdit::~ChatEdit()
 {
+	clearMessageHistory();
 	delete spellhighlighter_;
 }
 
+void ChatEdit::initActions()
+{
+	act_showMessagePrev = new QAction(this);
+	addAction(act_showMessagePrev);
+	connect(act_showMessagePrev, SIGNAL(triggered()), SLOT(showHistoryMessagePrev()));
+
+	act_showMessageNext= new QAction(this);
+	addAction(act_showMessageNext);
+	connect(act_showMessageNext, SIGNAL(triggered()), SLOT(showHistoryMessageNext()));
+
+	act_showMessageFirst = new QAction(this);
+	addAction(act_showMessageFirst);
+	connect(act_showMessageFirst, SIGNAL(triggered()), SLOT(showHistoryMessageFirst()));
+
+	act_showMessageLast= new QAction(this);
+	addAction(act_showMessageLast);
+	connect(act_showMessageLast, SIGNAL(triggered()), SLOT(showHistoryMessageLast()));
+}
+
+void ChatEdit::setShortcuts()
+{
+	act_showMessagePrev->setShortcuts(ShortcutManager::instance()->shortcuts("chat.show-messagePrev"));
+	act_showMessageNext->setShortcuts(ShortcutManager::instance()->shortcuts("chat.show-messageNext"));
+	act_showMessageFirst->setShortcuts(ShortcutManager::instance()->shortcuts("chat.show-messageFirst"));
+	act_showMessageLast->setShortcuts(ShortcutManager::instance()->shortcuts("chat.show-messageLast"));
+}
+
 void ChatEdit::setDialog(QWidget* dialog)
 {
 	dialog_ = dialog;
@@ -239,6 +271,90 @@ void ChatEdit::optionsChanged()
 	setCheckSpelling(checkSpellingGloballyEnabled());
 }
 
+void ChatEdit::showHistoryMessageNext()
+{
+	if (!typedMsgsHistory.isEmpty()) {
+		if (typedMsgsIndex + 1 < typedMsgsHistory.size()) {
+			++typedMsgsIndex;
+			showMessageHistory();
+		} else {
+			if(typedMsgsIndex != typedMsgsHistory.size()) {
+				typedMsgsIndex = typedMsgsHistory.size();
+				// Restore last typed text
+				setEditText(currentText);
+			}
+		}
+	}
+}
+
+void ChatEdit::showHistoryMessagePrev()
+{
+	if (!typedMsgsHistory.isEmpty() && typedMsgsIndex > 0) {
+		// Save current typed text
+		if (typedMsgsIndex == typedMsgsHistory.size())
+			currentText = toPlainText();
+		--typedMsgsIndex;
+		showMessageHistory();
+	}
+}
+
+void ChatEdit::showHistoryMessageFirst()
+{
+	if (!typedMsgsHistory.isEmpty()) {
+		if (currentText.isEmpty()) {
+			typedMsgsIndex = typedMsgsHistory.size() - 1;
+			showMessageHistory();
+		} else {
+			typedMsgsIndex = typedMsgsHistory.size();
+			// Restore last typed text
+			setEditText(currentText);
+		}
+	}
+}
+
+void ChatEdit::showHistoryMessageLast()
+{
+	if (!typedMsgsHistory.isEmpty()) {
+		typedMsgsIndex = 0;
+		showMessageHistory();
+	}
+}
+
+void ChatEdit::setEditText(const QString& text)
+{
+	setPlainText(text);
+	moveCursor(QTextCursor::End);
+}
+
+void ChatEdit::showMessageHistory()
+{
+	setEditText(typedMsgsHistory.at(typedMsgsIndex));
+}
+
+void ChatEdit::appendMessageHistory(const QString& text)
+{
+	if (!text.simplified().isEmpty()) {
+		if (currentText == text)
+			// Remove current typed text only if we want to add it to history
+			currentText.clear();
+		long index = typedMsgsHistory.indexOf(text);
+		if (index >=0) {
+			typedMsgsHistory.removeAt(index);
+		}
+		if (typedMsgsHistory.size() >= MAX_MESSAGE_HISTORY) {
+			typedMsgsHistory.removeAt(0);
+		}
+		typedMsgsHistory += text;
+		typedMsgsIndex = typedMsgsHistory.size();
+	}
+}
+
+void ChatEdit::clearMessageHistory()
+{
+	typedMsgsHistory.clear();
+	typedMsgsIndex = 0;
+}
+
 //----------------------------------------------------------------------------
 // LineEdit
 //----------------------------------------------------------------------------
--- git.temp.orig/src/msgmle.h
+++ git.temp/src/msgmle.h
@@ -23,6 +23,8 @@
 
 #include <QTextEdit>
 
+#define MAX_MESSAGE_HISTORY 50
+
 class ChatEdit;
 class QEvent;
 class QKeyEvent;
@@ -47,10 +49,18 @@ public:
 	static bool checkSpellingGloballyEnabled();
 	void setCheckSpelling(bool);
 
+public slots:
+	void appendMessageHistory(const QString& text);
+	void clearMessageHistory();
+
 protected slots:
  	void applySuggestion();
  	void addToDictionary();
 	void optionsChanged();
+	void showHistoryMessageNext();
+	void showHistoryMessagePrev();
+	void showHistoryMessageFirst();
+	void showHistoryMessageLast();
 
 protected:
 	// override the tab/esc behavior
@@ -58,6 +68,10 @@ protected:
 	void keyPressEvent(QKeyEvent *);
 	bool event(QEvent * event);
 	void contextMenuEvent(QContextMenuEvent *e);
+	void showMessageHistory();
+	void initActions();
+	void setShortcuts();
+	void setEditText(const QString& text);
 
 private:
 	QWidget	*dialog_;
@@ -65,6 +79,13 @@ private:
 	SpellHighlighter* spellhighlighter_;
 	QPoint last_click_;
 	int previous_position_;
+	QStringList typedMsgsHistory;
+	long typedMsgsIndex;
+	QAction* act_showMessagePrev;
+	QAction* act_showMessageNext;
+	QAction* act_showMessageFirst;
+	QAction* act_showMessageLast;
+	QString currentText;
 };
 
 
