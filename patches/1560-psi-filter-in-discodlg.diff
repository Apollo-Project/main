Index: psi/src/discodlg.cpp
===================================================================
--- psi.orig/src/discodlg.cpp	2013-01-15 14:04:31.108827227 +0400
+++ psi/src/discodlg.cpp	2013-01-15 14:04:31.104827227 +0400
@@ -707,6 +707,9 @@
 public:
 	DiscoListView(QWidget *parent);

+public slots:
+	void updateItemsVisibility(const QString& filter);
+
 protected:
 	bool maybeTip(const QPoint &);

@@ -837,6 +840,37 @@
 	return QTreeWidget::eventFilter(o, e);
 }

+// returns false if parent item should not be hidden (it has visible children)
+static bool updateItemsRecursively(QTreeWidgetItem* parent, const QString& filter)
+{
+	bool hidden = true;
+	for(int j = 0; j < parent->childCount(); j++) {
+		QTreeWidgetItem *i = parent->child(j);
+		if(filter.isEmpty()) {
+			i->setHidden(false);
+			updateItemsRecursively(i, filter);
+		}
+		else {
+			bool v = true;
+			if(i->isExpanded()) {
+				v = updateItemsRecursively(i, filter);
+			}
+			v &= !(i->text(0).contains(filter, Qt::CaseInsensitive) || i->text(1).contains(filter, Qt::CaseInsensitive));
+			i->setHidden(v);
+			hidden &= v;
+		}
+	}
+	return hidden;
+}
+
+void DiscoListView::updateItemsVisibility(const QString& filter)
+{
+	for(int n = 0; n < topLevelItemCount(); n++) {
+		QTreeWidgetItem *it = topLevelItem(n);
+		updateItemsRecursively(it, filter);
+	}
+}
+
 //----------------------------------------------------------------------------
 // DiscoDlg::Private
 //----------------------------------------------------------------------------
@@ -951,9 +985,11 @@
 	replaceWidget(lv_discoOld, dlg->lv_disco);

 	dlg->lv_disco->installEventFilter (this);
-	connect(dlg->lv_disco, SIGNAL(currentItemChanged (QTreeWidgetItem *, QTreeWidgetItem *)), SLOT(itemSelected (QTreeWidgetItem *)));;
+	dlg->le_filter->installEventFilter(this);
+	connect(dlg->lv_disco, SIGNAL(currentItemChanged (QTreeWidgetItem *, QTreeWidgetItem *)), SLOT(itemSelected (QTreeWidgetItem *)));
 	connect(dlg->lv_disco, SIGNAL(itemExpanded (QTreeWidgetItem *)), SLOT(itemExpanded (QTreeWidgetItem *)));
-	connect(dlg->lv_disco, SIGNAL(itemDoubleClicked (QTreeWidgetItem *, int)), SLOT(itemDoubleclicked (QTreeWidgetItem *)));;
+	connect(dlg->lv_disco, SIGNAL(itemDoubleClicked (QTreeWidgetItem *, int)), SLOT(itemDoubleclicked (QTreeWidgetItem *)));
+	connect(dlg->le_filter, SIGNAL(textChanged(QString)), dlg->lv_disco, SLOT(updateItemsVisibility(QString)));

 	// protocol actions
 	QSignalMapper *pm = new QSignalMapper(this);
@@ -1360,6 +1396,13 @@
 			return true;
 		}
 	}
+	else if(object == dlg->le_filter && event->type() == QEvent::KeyPress) {
+		QKeyEvent *ke = static_cast<QKeyEvent*>(event);
+		if(ke->key() == Qt::Key_Escape) {
+			dlg->le_filter->clear();
+			return true;
+		}
+	}

 	return false;
 }
Index: psi/src/disco.ui
===================================================================
--- psi.orig/src/disco.ui	2013-01-15 14:04:31.108827227 +0400
+++ psi/src/disco.ui	2013-01-15 14:04:31.104827227 +0400
@@ -120,6 +120,20 @@
       <widget class="QTreeWidget" name="lv_disco" />
      </item>
      <item>
+    <layout class="QHBoxLayout" name="horizontalLayout">
+     <item>
+      <widget class="QLabel" name="label">
+       <property name="text">
+        <string>Filter by JID:</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="le_filter"/>
+     </item>
+    </layout>
+   </item>
+     <item>
       <widget class="QCheckBox" name="ck_autoItems" >
        <property name="text" >
         <string>Auto-browse into objects</string>
