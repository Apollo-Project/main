--- git.temp.orig/src/discodlg.cpp
+++ git.temp/src/discodlg.cpp
@@ -919,7 +919,7 @@ public: // data
 	IconAction *actBrowse, *actBack, *actForward, *actRefresh, *actStop;
 
 	// custom actions, that will be added to toolbar and context menu
-	IconAction *actRegister, *actSearch, *actJoin, *actAHCommand, *actVCard, *actAdd, *actQueryVersion;
+	IconAction *actRegister, *actUnregister, *actSearch, *actJoin, *actAHCommand, *actVCard, *actAdd, *actQueryVersion;
 
 	typedef QList<History*> HistoryList;
 	HistoryList backHistory, forwardHistory;
@@ -1024,6 +1024,9 @@ DiscoDlg::Private::Private(DiscoDlg *par
 	actRegister = new IconAction (tr("Register"), "psi/register", tr("&Register"), 0, dlg);
 	connect (actRegister, SIGNAL(triggered()), sm, SLOT(map()));
 	sm->setMapping(actRegister, Features::FID_Register);
+	actUnregister = new IconAction (tr("Unregister"), "psi/cancel", tr("&Unregister"), 0, dlg);
+	connect (actUnregister, SIGNAL(triggered()), sm, SLOT(map()));
+	sm->setMapping(actUnregister, Features::FID_Gateway);
 	actSearch = new IconAction (tr("Search"), "psi/search", tr("&Search"), 0, dlg);
 	connect (actSearch, SIGNAL(triggered()), sm, SLOT(map()));
 	sm->setMapping(actSearch, Features::FID_Search);
@@ -1061,6 +1064,7 @@ DiscoDlg::Private::Private(DiscoDlg *par
 	// custom actions
 	toolBar->addSeparator();
 	toolBar->addAction(actRegister);
+	toolBar->addAction(actUnregister);
 	toolBar->addAction(actSearch);
 	toolBar->addAction(actJoin);
 
@@ -1237,6 +1241,7 @@ void DiscoDlg::Private::enableButtons(co
 	// custom actions
 	Features f = it.features();
 	actRegister->setEnabled( f.canRegister() );
+	actUnregister->setEnabled( f.canRegister() );
 	actSearch->setEnabled( f.canSearch() );
 	actJoin->setEnabled( f.canGroupchat() );
 	actAdd->setEnabled( itemSelected );
@@ -1364,6 +1369,7 @@ bool DiscoDlg::Private::eventFilter (QOb
 			// custom actions
 			p.addSeparator();
 			actRegister->addTo(&p);
+			actUnregister->addTo(&p);
 			actSearch->addTo(&p);
 			actJoin->addTo(&p);
 
--- git.temp.orig/src/psiaccount.cpp
+++ git.temp/src/psiaccount.cpp
@@ -3394,8 +3394,12 @@ void PsiAccount::featureActivated(QStrin
 		actionExecuteCommand(jid, node);
 	else if ( f.canDisco() )
 		actionDisco(jid, node);
-	else if ( f.isGateway() )
-		; // TODO
+	else if ( f.isGateway() ) {
+		if(QMessageBox::question(0, tr("Unregister from %1").arg(jid.bare()),
+					 tr("Are you sure?"),
+					 QMessageBox::Yes | QMessageBox::No) == QMessageBox::Yes)
+			actionUnregister(jid);
+	}
 	else if ( f.haveVCard() )
 		actionInfo(jid);
 	else if ( f.id() == Features::FID_Add ) {
@@ -4429,6 +4433,13 @@ void PsiAccount::actionRegister(const Ji
 	}
 }
 
+void PsiAccount::actionUnregister(const Jid &j)
+{
+	JT_UnRegister *ju = new JT_UnRegister(d->client->rootTask());
+	ju->unreg(j);
+	ju->go(true);
+}
+
 void PsiAccount::actionSearch(const Jid &j)
 {
 	if(!checkConnected())
@@ -4798,9 +4809,7 @@ void PsiAccount::dj_remove(const Jid &j)
 
 		// if it looks like a transport, unregister (but not if it is the server!!)
 		if(u->isTransport() && !Jid(d->client->host()).compare(u->jid())) {
-			JT_UnRegister *ju = new JT_UnRegister(d->client->rootTask());
-			ju->unreg(j);
-			ju->go(true);
+			actionUnregister(j);
 		}
 	}
 }
--- git.temp.orig/src/psiaccount.h
+++ git.temp/src/psiaccount.h
@@ -363,6 +363,7 @@ public slots:
 	void actionGroupsSet(const Jid &, const QStringList &);
 	void actionHistoryBox(PsiEvent *);
 	void actionRegister(const Jid &);
+	void actionUnregister(const Jid &);
 	void actionSearch(const Jid &);
 	void actionManageBookmarks();
 	void actionJoin(const Jid& mucJid, const QString& password = QString());
