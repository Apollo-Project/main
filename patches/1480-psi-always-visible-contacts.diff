Index: psi/src/contactlistgroup.cpp
===================================================================
--- psi.orig/src/contactlistgroup.cpp	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/contactlistgroup.cpp	2013-01-15 14:04:29.128827147 +0400
@@ -334,6 +334,11 @@
 	return haveOnlineContacts_;
 }
 
+bool ContactListGroup::haveAlwaysVisibleContacts() const
+{
+	return haveAlwaysVisibleContacts_;
+}
+
 int ContactListGroup::onlineContactsCount() const
 {
 	return onlineContactsCount_;
@@ -356,6 +361,7 @@
 		return;
 
 	bool haveOnlineContacts = false;
+	bool haveAlwaysVisibleContacts = false;
 	int onlineContactsCount = 0;
 	int totalContactsCount = 0;
 	foreach(ContactListItemProxy* item, items_) {
@@ -368,6 +374,9 @@
 				++onlineContactsCount;
 				// break;
 			}
+			if (contact->isAlwaysVisible()) {
+				haveAlwaysVisibleContacts = true;
+			}
 		}
 		else if ((group = dynamic_cast<ContactListGroup*>(item->item()))) {
 			totalContactsCount += group->totalContactsCount();
@@ -387,6 +396,11 @@
 		}
 	}
 
+	if (haveAlwaysVisibleContacts != haveAlwaysVisibleContacts_) {
+		haveAlwaysVisibleContacts_ = haveAlwaysVisibleContacts;
+		model_->updatedGroupVisibility(this);
+	}
+
 	if (onlineContactsCount != onlineContactsCount_ ||
 	    totalContactsCount != totalContactsCount_)
 	{
Index: psi/src/contactlistgroup.h
===================================================================
--- psi.orig/src/contactlistgroup.h	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/contactlistgroup.h	2013-01-15 14:04:29.132827147 +0400
@@ -52,6 +52,7 @@
 
 	bool isFake() const;
 	bool haveOnlineContacts() const;
+	bool haveAlwaysVisibleContacts() const;
 	virtual int onlineContactsCount() const;
 	virtual int totalContactsCount() const;
 	int contactsCount() const;
@@ -122,6 +123,7 @@
 	QVector<PsiContact*> contacts_;
 	QVector<ContactListItemProxy*> items_;
 	bool haveOnlineContacts_;
+	bool haveAlwaysVisibleContacts_;
 	int onlineContactsCount_;
 	int totalContactsCount_;
 
Index: psi/src/contactlistproxymodel.cpp
===================================================================
--- psi.orig/src/contactlistproxymodel.cpp	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/contactlistproxymodel.cpp	2013-01-15 14:04:29.132827147 +0400
@@ -92,6 +92,9 @@
 		else if (psiContact->isAgent()) {
 			return showTransports();
 		}
+		else if (psiContact->isAlwaysVisible()) {
+			return true;
+		}
 
 		bool show = true;
 		if (psiContact->isHidden()) {
@@ -112,6 +115,10 @@
 				if (specialGroupType == ContactListGroup::SpecialType_Transports)
 					return showTransports();
 			}
+			ContactListGroup* group = static_cast<ContactListGroup*>(item);
+			if (group->haveAlwaysVisibleContacts()) {
+				return true;
+			}
 
 			bool show = true;
 			if (index.data(Qt::DisplayRole) == PsiContact::hiddenGroupName()) {
@@ -119,7 +126,6 @@
 			}
 
 			if (!showOffline()) {
-				ContactListGroup* group = static_cast<ContactListGroup*>(item);
 				return show && group->haveOnlineContacts();
 			}
 			else {
Index: psi/src/profiles.h
===================================================================
--- psi.orig/src/profiles.h	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/profiles.h	2013-01-15 14:04:29.132827147 +0400
@@ -85,6 +85,8 @@
 	XMPP::Jid dtProxy;
 	bool ibbOnly;
 
+	QStringList alwaysVisibleContacts;
+
 	QString optionsBase;
 
 	QString stunHost;
Index: psi/src/psiaccount.cpp
===================================================================
--- psi.orig/src/psiaccount.cpp	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/psiaccount.cpp	2013-01-15 14:04:29.132827147 +0400
@@ -894,6 +894,37 @@
 		avCallManager->setStunRelayTcpService(acc.stunHost, acc.stunPort, convert_proxy(acc, jid), acc.stunUser, acc.stunPass);
 	}
 
+	bool isAlwaysVisibleContact(const Jid& jid) const
+	{
+		return acc.alwaysVisibleContacts.contains(jid.bare());
+	}
+
+	void setAlwaysVisibleContact(const Jid& jid, bool visible)
+	{
+		if(!visible) {
+			acc.alwaysVisibleContacts.removeAll(jid.bare());
+		}
+		else if(!acc.alwaysVisibleContacts.contains(jid.bare())) {
+			acc.alwaysVisibleContacts.append(jid.bare());
+		}
+	}
+
+	void updateContacts()
+	{
+		QStringList jids;
+		foreach(PsiContact *pc, contacts) {
+			const Jid jid = pc->jid();
+			jids.append(jid.bare());
+			bool vis = isAlwaysVisibleContact(jid);
+			if(vis != pc->isAlwaysVisible())
+				pc->setAlwaysVisible(vis);
+		}
+		foreach(const QString& j,  acc.alwaysVisibleContacts) {
+			if(!jids.contains(j))
+				acc.alwaysVisibleContacts.removeAll(j);
+		}
+	}
+
 private:
 	Status lastManualStatus_;
 
@@ -1271,6 +1302,8 @@
 	QTimer::singleShot(0, d, SLOT(loadQueue()));
 
 	d->contactList->link(this);
+
+	d->updateContacts(); //update always visible contacts state
 }
 
 PsiAccount::~PsiAccount()
@@ -1336,6 +1369,11 @@
 	d->localAddress = QHostAddress();
 }
 
+void PsiAccount::updateAlwaysVisibleContact(PsiContact *pc)
+{
+	d->setAlwaysVisibleContact(pc->jid(), pc->isAlwaysVisible());
+}
+
 bool PsiAccount::enabled() const
 {
 	return d->acc.opt_enabled;
Index: psi/src/psiaccount.h
===================================================================
--- psi.orig/src/psiaccount.h	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/psiaccount.h	2013-01-15 14:04:29.132827147 +0400
@@ -191,6 +191,8 @@
 
 	bool notifyOnline() const;
 
+	void updateAlwaysVisibleContact(PsiContact* pc);
+
 	void modify();
 	void reconfigureFTManager();
 	void changeVCard();
Index: psi/src/psicontact.cpp
===================================================================
--- psi.orig/src/psicontact.cpp	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/psicontact.cpp	2013-01-15 14:04:29.132827147 +0400
@@ -67,6 +67,7 @@
 		, statusTimer_(0)
 		, isValid_(true)
 		, isAnimated_(false)
+		, isAlwaysVisible_(false)
 		, contact_(contact)
 #ifdef YAPSI
 		, gender_(XMPP::VCard::UnknownGender)
@@ -108,6 +109,7 @@
 	Status oldStatus_;
 	bool isValid_;
 	bool isAnimated_;
+	bool isAlwaysVisible_;
 #ifdef YAPSI
 	bool showOnlineTemporarily_;
 	bool reconnecting_;
@@ -550,6 +552,18 @@
 	// return ContactListItem::shouldBeVisible();
 }
 
+bool PsiContact::isAlwaysVisible() const
+{
+	return d->isAlwaysVisible_;
+}
+
+void PsiContact::setAlwaysVisible(bool visible)
+{
+	d->isAlwaysVisible_ = visible;
+	account()->updateAlwaysVisibleContact(this);
+	emit updated();
+}
+
 /**
  * Standard desired parent.
  */
Index: psi/src/psicontact.h
===================================================================
--- psi.orig/src/psicontact.h	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/psicontact.h	2013-01-15 14:04:29.132827147 +0400
@@ -70,6 +70,9 @@
 
 	virtual void setEditing(bool editing);
 
+	bool isAlwaysVisible() const;
+	void setAlwaysVisible(bool visible);
+
 	bool addAvailable() const;
 	bool removeAvailable() const;
 	bool authAvailable() const;
Index: psi/src/psicontactmenu.cpp
===================================================================
--- psi.orig/src/psicontactmenu.cpp	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/psicontactmenu.cpp	2013-01-15 14:04:29.136827147 +0400
@@ -257,6 +257,7 @@
 	QAction* mucShowAction_;
 	QAction* mucLeaveAction_;
 	QAction* blockAction_;
+	QAction* visibleAction_;
 
 #endif
 
@@ -427,6 +428,9 @@
 		blockAction_ = new IconAction(tr("Block"), "psi/stop", tr("Block"), 0, this, 0, true);
 		connect(blockAction_, SIGNAL(triggered(bool)), SLOT(block(bool)));
 
+		visibleAction_ = new IconAction(tr("Always Visible"), "psi/eye", tr("Always Visible"), 0, this, 0, true);
+		connect(visibleAction_, SIGNAL(triggered(bool)), SLOT(setAlwaysVisible(bool)));
+
 		if (!contact_->isConference()) {
 			menu_->addAction(addAuthAction_);
 			menu_->addSeparator();
@@ -452,6 +456,7 @@
 			menu_->addAction(transportLogonAction_);
 			menu_->addAction(transportLogoffAction_);
 			menu_->addAction(blockAction_);
+			menu_->addAction(visibleAction_);
 			authMenu_ = menu_->addMenu(tr("Authorization"));
 			authMenu_->addAction(authResendAction_);
 			authMenu_->addAction(authRerequestAction_);
@@ -564,6 +569,7 @@
 		}
 		authMenu_->setEnabled(contact_->account()->isAvailable());
 		updateBlockActionState();
+		visibleAction_->setChecked(contact_->isAlwaysVisible());
 		removeAction_->setVisible(!PsiOptions::instance()->getOption("options.ui.contactlist.lockdown-roster").toBool()  && !contact_->isSelf());
 		removeAction_->setEnabled(contact_->removeAvailable());
 		if (!PsiOptions::instance()->getOption("options.ui.menu.contact.custom-picture").toBool()) {
@@ -652,6 +658,14 @@
 		contact_->toggleBlockedStateConfirmation();
 	}
 
+	void setAlwaysVisible(bool visible)
+	{
+		if (!contact_)
+			return;
+
+		contact_->setAlwaysVisible(visible);
+	}
+
 	void addAuth()
 	{
 		if (!contact_)
Index: psi/src/psi_profiles.cpp
===================================================================
--- psi.orig/src/psi_profiles.cpp	2013-01-15 14:04:29.140827147 +0400
+++ psi/src/psi_profiles.cpp	2013-01-15 14:04:29.136827147 +0400
@@ -326,6 +326,8 @@
 		tlsOverrideCert = o->getOption(base + ".tls.override-certificate").toByteArray();
 		tlsOverrideDomain = o->getOption(base + ".tls.override-domain").toString();
 	}
+
+	alwaysVisibleContacts = o->getOption(base + ".always-visible-contacts").toStringList();
 }
 
 void UserAccount::toOptions(OptionsTree *o, QString base)
@@ -463,6 +465,8 @@
 	o->setOption(base + ".tls.override-certificate", tlsOverrideCert);
 	o->setOption(base + ".tls.override-domain", tlsOverrideDomain);
 	saveLastStatus(o, base);
+
+	o->setOption(base + ".always-visible-contacts", alwaysVisibleContacts);
 }
 
 void UserAccount::fromXml(const QDomElement &a)
