--- git.orig/src/tools/tunecontroller/plugins/winamp/winampcontroller.cpp
+++ git/src/tools/tunecontroller/plugins/winamp/winampcontroller.cpp
@@ -19,7 +19,6 @@
  */
 
 #include <windows.h>
-#include <QTimer>
 
 #ifdef Q_CC_MSVC
 #pragma warning(push)
@@ -45,13 +44,14 @@
 /**
  * \brief Constructs the controller.
  */
-WinAmpController::WinAmpController() : TuneController()
+WinAmpController::WinAmpController()
+: PollingTuneController(),
+  norminterval_(3000),
+  antiscrollinterval_(100),
+  antiscrollcounter_(0)
 {
-	connect(&timer_, SIGNAL(timeout()), SLOT(check()));
-	norminterval_ = 3000;
-	antiscrollinterval_ = 100;
-	antiscrollcounter_ = 0;
-	timer_.start(norminterval_);
+	startPoll();
+	setInterval(norminterval_);
 }
 
 template <typename char_type> const size_t length (const char_type * begin)
@@ -62,7 +62,7 @@ template <typename char_type> const size
 }
 
 // Returns a title of a track currently being played by WinAmp with given HWND (passed in waWnd)
-QPair<bool, QString> WinAmpController::getTrackTitle(HWND waWnd)
+QPair<bool, QString> WinAmpController::getTrackTitle(const HWND &waWnd) const
 {
 	TCHAR waTitle[2048];
 	QString title;
@@ -156,39 +156,42 @@ void WinAmpController::check()
 #else
 	HWND h = FindWindow("Winamp v1.x", NULL);
 #endif
-
-	if (h && SendMessage(h,WM_WA_IPC,0,IPC_ISPLAYING) == 1) {
-		QPair<bool, QString> trackpair(getTrackTitle(h));
-		if (!trackpair.first) {
-			// getTrackTitle wants us to retry in a few ms...
-			int interval = antiscrollinterval_;
-			if (++antiscrollcounter_ > 10) {
-				antiscrollcounter_ = 0;
-				interval = norminterval_;
-			}
-			timer_.start(interval);
-			return;
-		}
-		antiscrollcounter_ = 0;
-		tune.setName(trackpair.second);
-		tune.setURL(trackpair.second);
-		tune.setTime(SendMessage(h,WM_WA_IPC,1,IPC_GETOUTPUTTIME));
+	if (h && SendMessage(h, WM_WA_IPC, 0, IPC_ISPLAYING) == 1) {
+		tune = getTune(h);
 	}
-
-
-
 	if (prev_tune_ != tune) {
 		prev_tune_ = tune;
-		if (tune.isNull()) {
-			emit stopped();
-		}
-		else {
-			emit playing(tune);
-		}
 	}
-	timer_.start(norminterval_);
+	setInterval(norminterval_);
+	PollingTuneController::check();
 }
 
+Tune WinAmpController::getTune(const HWND &hWnd)
+{
+	Tune tune = Tune();
+	int position = (int)SendMessage(hWnd, WM_WA_IPC, 0, IPC_GETLISTPOS);
+	if (position != -1) {
+		if (hWnd && SendMessage(hWnd,WM_WA_IPC,0,IPC_ISPLAYING) == 1) {
+			QPair<bool, QString> trackpair(getTrackTitle(hWnd));
+			if (!trackpair.first) {
+				// getTrackTitle wants us to retry in a few ms...
+				int interval = antiscrollinterval_;
+				if (++antiscrollcounter_ > 10) {
+					antiscrollcounter_ = 0;
+					interval = norminterval_;
+				}
+				setInterval(interval);
+				return Tune();
+			}
+			antiscrollcounter_ = 0;
+			tune.setName(trackpair.second);
+			tune.setURL(trackpair.second);
+			tune.setTrack(QString::number(position + 1));
+			tune.setTime(SendMessage(hWnd, WM_WA_IPC, 1, IPC_GETOUTPUTTIME));
+		}
+	}
+	return tune;
+}
 
 Tune WinAmpController::currentTune() const
 {
--- git.orig/src/tools/tunecontroller/plugins/winamp/winampcontroller.h
+++ git/src/tools/tunecontroller/plugins/winamp/winampcontroller.h
@@ -21,27 +21,27 @@
 #ifndef WINAMPCONTROLLER_H
 #define WINAMPCONTROLLER_H
 
-#include "tunecontrollerinterface.h"
 #include "pollingtunecontroller.h"
 
 #include <windows.h>
 #include <QPair>
 
-class WinAmpController : public TuneController
+class WinAmpController : public PollingTuneController
 {
 	Q_OBJECT
 public:
 	WinAmpController();
 	virtual Tune currentTune() const;
 
-protected:
-	QPair<bool, QString> getTrackTitle(HWND waWnd);
+private:
+	Tune getTune(const HWND &hWnd);
+	QPair<bool, QString> getTrackTitle(const HWND &waWnd) const;
+
 protected slots:
 	void check();
 
 private:
 	Tune prev_tune_;
-	QTimer timer_;
 	int norminterval_, antiscrollinterval_;
 	int antiscrollcounter_;
 };
--- git.orig/src/tools/tunecontroller/pollingtunecontroller.h
+++ git/src/tools/tunecontroller/pollingtunecontroller.h
@@ -38,6 +38,7 @@ public:
 	inline bool isPolling() const { return _timer.isActive(); }
 	inline void startPoll() { _timer.start(DefaultInterval); }
 	inline void stopPoll() { _timer.stop(); }
+	inline void setInterval(const int &interval) { _timer.setInterval(interval); }
 
 protected slots:
 	virtual void check();
