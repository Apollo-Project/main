--- git.temp.orig/options/default.xml
+++ git.temp/options/default.xml
@@ -151,6 +151,7 @@
 				<group-sort-style type="QString">alpha</group-sort-style>
 				<lockdown-roster type="bool">false</lockdown-roster>
 				<raise-on-new-event type="bool">false</raise-on-new-event>
+				<quit-on-close type="bool">false</quit-on-close>
 				<show>
 					<agent-contacts type="bool">true</agent-contacts>
 					<away-contacts type="bool">true</away-contacts>
--- git.temp.orig/src/mainwin.cpp
+++ git.temp/src/mainwin.cpp
@@ -1161,7 +1161,7 @@ void MainWin::closeEvent(QCloseEvent* e)
 	trayHide();
 	e->accept();
 #else
-	if(d->tray) {
+	if(d->tray && !PsiOptions::instance()->getOption("options.ui.contactlist.quit-on-close").toBool()) {
 		trayHide();
 		e->accept();
 		return;
--- git.temp.orig/src/options/opt_application.cpp
+++ git.temp/src/options/opt_application.cpp
@@ -67,6 +67,7 @@ QWidget *OptionsTabApplication::widget()
 
 
 	connect(d->le_dtPort, SIGNAL(textChanged(QString)), this, SLOT(updatePortLabel()));
+	connect(d->ck_docklet, SIGNAL(stateChanged(int)), this, SLOT(doEnableQuitOnClose(int)));
 
 	return w;
 }
@@ -83,6 +84,8 @@ void OptionsTabApplication::applyOptions
 
 	OptApplicationUI *d = (OptApplicationUI *)w;
 
+	PsiOptions::instance()->setOption("options.ui.contactlist.quit-on-close", d->ck_quitOnClose->isChecked());
+
 	// Auto-update
 	PsiOptions::instance()->setOption("options.auto-update.check-on-startup", d->ck_autoUpdate->isChecked());
 
@@ -108,18 +111,26 @@ void OptionsTabApplication::restoreOptio
 	OptApplicationUI *d = (OptApplicationUI *)w;
 
 	d->ck_autoUpdate->setChecked(PsiOptions::instance()->getOption("options.auto-update.check-on-startup").toBool());
+	d->ck_quitOnClose->setChecked(PsiOptions::instance()->getOption("options.ui.contactlist.quit-on-close").toBool());
 
 	// docklet
 	d->ck_docklet->setChecked( PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() );
 	d->ck_dockDCstyle->setChecked( PsiOptions::instance()->getOption("options.ui.systemtray.use-double-click").toBool() );
 	d->ck_dockHideMW->setChecked( PsiOptions::instance()->getOption("options.contactlist.hide-on-start").toBool() );
 	d->ck_dockToolMW->setChecked( PsiOptions::instance()->getOption("options.contactlist.use-toolwindow").toBool() );
+	doEnableQuitOnClose(d->ck_docklet->isChecked()?1:0);
 
 	// data transfer
 	d->le_dtPort->setText( QString::number(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt()) );
 	d->le_dtExternal->setText( PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString() );
 }
 
+void OptionsTabApplication::doEnableQuitOnClose(int state)
+{
+	OptApplicationUI *d = (OptApplicationUI *)w;
+	d->ck_quitOnClose->setEnabled(state>0);
+}
+
 void OptionsTabApplication::updatePortLabel()
 {
 	if ( !w )
--- git.temp.orig/src/options/opt_application.h
+++ git.temp/src/options/opt_application.h
@@ -25,6 +25,9 @@ private slots:
 private:
 	QWidget *w;
 	bool haveAutoUpdater_;
+
+private slots:
+	void doEnableQuitOnClose(int);
 };
 
 #endif
--- git.temp.orig/src/options/opt_application.ui
+++ git.temp/src/options/opt_application.ui
@@ -79,6 +79,13 @@
     </widget>
    </item>
    <item>
+    <widget class="QCheckBox" name="ck_quitOnClose" >
+     <property name="text" >
+      <string>Quit when closing the roster window</string>
+     </property>
+    </widget>
+   </item>
+   <item>
     <layout class="QHBoxLayout" >
      <item>
       <widget class="QLabel" name="textLabel1" >
