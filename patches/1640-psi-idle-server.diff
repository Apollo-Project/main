--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -679,6 +679,7 @@ QLineEdit#le_status_text {
 		</p2p>
 		<service-discovery>
 			<enable-entity-capabilities type="bool">true</enable-entity-capabilities>
+			<last-activity type="bool">true</last-activity>
 		</service-discovery>
 		<status>
 			<ask-for-message-on-offline type="bool">false</ask-for-message-on-offline>
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -320,6 +320,48 @@ bool BlockTransportPopupList::find(const
 	return false;
 }
 
+
+//----------------------------------------------------------------------------
+// IdleServer
+//----------------------------------------------------------------------------
+class IdleServer : public XMPP::Task
+{
+	Q_OBJECT
+public:
+	IdleServer(PsiAccount *pa, Task *parent)
+		: Task(parent)
+		, pa_(pa)
+	{
+	}
+
+	~IdleServer()
+	{
+	}
+
+	bool take(const QDomElement &e)
+	{
+		if (e.tagName() != "iq" || e.attribute("type") != "get")
+			return false;
+
+		const QString ns = queryNS(e);
+		if (ns == "jabber:iq:last") {
+			QDomElement iq = createIQ(doc(), "result", e.attribute("from"), e.attribute("id"));
+			QDomElement query = doc()->createElement("query");
+			query.setAttribute("xmlns", ns);
+			iq.appendChild(query);
+			query.setAttribute("seconds", pa_->psi()->idle());
+
+			send(iq);
+			return true;
+		}
+		return false;
+	}
+
+private:
+	PsiAccount *pa_;
+};
+
+
 //----------------------------------------------------------------------------
 // PsiAccount
 //----------------------------------------------------------------------------
@@ -1201,6 +1243,12 @@ PsiAccount::PsiAccount(const UserAccount
 	PluginManager::instance()->addAccount(this, d->client);
 #endif
 
+	//Idle server
+	if(PsiOptions::instance()->getOption("options.service-discovery.last-activity").toBool()) {
+		new IdleServer(this, d->client->rootTask());
+		d->client->addExtension("last-act", QStringList("jabber:iq:last"));
+	}
+
 	// HTML
 	if(PsiOptions::instance()->getOption("options.html.chat.render").toBool())
 		d->client->addExtension("html",Features("http://jabber.org/protocol/xhtml-im"));
--- git.orig/src/psicon.cpp
+++ git/src/psicon.cpp
@@ -309,7 +309,7 @@ public:
 
 	struct IdleSettings
 	{
-		IdleSettings()
+		IdleSettings() : secondsIdle(0)
 		{}
 
 		void update()
@@ -322,10 +322,13 @@ public:
 			notAvailableAfter = o->getOption("options.status.auto-away.not-availible-after").toInt();
 			awayAfter = o->getOption("options.status.auto-away.away-after").toInt();
 			menuXA = o->getOption("options.ui.menu.status.xa").toBool();
+			useIdleServer = o->getOption("options.service-discovery.last-activity").toBool();
 		}
 
 		bool useOffline, useNotAvailable, useAway, menuXA;
 		int offlineAfter, notAvailableAfter, awayAfter;
+		int secondsIdle;
+		bool useIdleServer;
 	};
 
 	IdleSettings idleSettings_;
@@ -1406,10 +1409,12 @@ void PsiCon::optionChanged(const QString
 
 	//Idle server
 	d->idleSettings_.update();
-	if(d->idleSettings_.useAway || d->idleSettings_.useNotAvailable || d->idleSettings_.useOffline)
+	if(d->idleSettings_.useAway || d->idleSettings_.useNotAvailable || d->idleSettings_.useOffline || d->idleSettings_.useIdleServer)
 		d->idle.start();
-	else
+	else {
 		d->idle.stop();
+		d->idleSettings_.secondsIdle = 0;
+	}
 
 	if (option == "options.ui.notifications.alert-style") {
 		alertIconUpdateAlertStyle();
@@ -1911,6 +1916,7 @@ void PsiCon::aboutToQuit()
 
 void PsiCon::secondsIdle(int sec)
 {
+	d->idleSettings_.secondsIdle = sec;
 	int minutes = sec / 60;
 	PsiAccount::AutoAway aa;
 
@@ -1928,6 +1934,11 @@ void PsiCon::secondsIdle(int sec)
 	}
 }
 
+int PsiCon::idle() const
+{
+	return d->idleSettings_.secondsIdle;
+}
+
 ContactUpdatesManager* PsiCon::contactUpdatesManager() const
 {
 	return contactUpdatesManager_;
--- git.orig/src/psicon.h
+++ git/src/psicon.h
@@ -89,6 +89,7 @@ public:
 	QWidget *dialogFind(const char *className);
 	void dialogRegister(QWidget *w);
 	void dialogUnregister(QWidget *w);
+	int idle() const;
 
 	QMenuBar* defaultMenuBar() const;
 
