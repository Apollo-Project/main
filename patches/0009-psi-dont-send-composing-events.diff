Index: psi/options/default.xml
===================================================================
--- psi.orig/options/default.xml	2013-01-15 14:03:57.336825854 +0400
+++ psi/options/default.xml	2013-01-15 14:03:57.332825854 +0400
@@ -440,6 +440,7 @@
 			<ignore-non-roster-contacts type="bool">false</ignore-non-roster-contacts>
 			<send-composing-events type="bool">true</send-composing-events>
 			<send-inactivity-events type="bool">false</send-inactivity-events>
+			<dont-send-composing-events type="bool">false</dont-send-composing-events>
 		</messages>
 		<p2p>
 			<bytestreams>
Index: psi/src/chatdlg.cpp
===================================================================
--- psi.orig/src/chatdlg.cpp	2013-01-15 14:03:57.336825854 +0400
+++ psi/src/chatdlg.cpp	2013-01-15 14:03:57.332825854 +0400
@@ -906,36 +906,38 @@
 		}

 		// Build event message
-		Message m(jid());
-		if (sendComposingEvents_) {
-			m.setEventId(eventId_);
-			if (state == XMPP::StateComposing) {
-				m.addEvent(ComposingEvent);
-			}
-			else if (lastChatState_ == XMPP::StateComposing) {
-				m.addEvent(CancelEvent);
+		if( !PsiOptions::instance()->getOption("options.messages.dont-send-composing-events").toBool() ) {
+			Message m(jid());
+			if (sendComposingEvents_) {
+				m.setEventId(eventId_);
+				if (state == XMPP::StateComposing) {
+					m.addEvent(ComposingEvent);
+				}
+				else if (lastChatState_ == XMPP::StateComposing) {
+					m.addEvent(CancelEvent);
+				}
 			}
-		}
-		if (contactChatState_ != XMPP::StateNone) {
-			if (lastChatState_ != XMPP::StateGone) {
-				if ((state == XMPP::StateInactive && lastChatState_ == XMPP::StateComposing) || (state == XMPP::StateComposing && lastChatState_ == XMPP::StateInactive)) {
-					// First go to the paused state
-					Message tm(jid());
-					m.setType("chat");
-					m.setChatState(XMPP::StatePaused);
-					if (account()->isAvailable()) {
-						account()->dj_sendMessage(m, false);
+			if (contactChatState_ != XMPP::StateNone) {
+				if (lastChatState_ != XMPP::StateGone) {
+					if ((state == XMPP::StateInactive && lastChatState_ == XMPP::StateComposing) || (state == XMPP::StateComposing && lastChatState_ == XMPP::StateInactive)) {
+						// First go to the paused state
+						Message tm(jid());
+						m.setType("chat");
+						m.setChatState(XMPP::StatePaused);
+						if (account()->isAvailable()) {
+							account()->dj_sendMessage(m, false);
+						}
 					}
+					m.setChatState(state);
 				}
-				m.setChatState(state);
 			}
-		}

-		// Send event message
-		if (m.containsEvents() || m.chatState() != XMPP::StateNone) {
-			m.setType("chat");
-			if (account()->isAvailable()) {
-				account()->dj_sendMessage(m, false);
+			// Send event message
+			if (m.containsEvents() || m.chatState() != XMPP::StateNone) {
+				m.setType("chat");
+				if (account()->isAvailable()) {
+					account()->dj_sendMessage(m, false);
+				}
 			}
 		}

Index: psi/src/options/opt_advanced.cpp
===================================================================
--- psi.orig/src/options/opt_advanced.cpp	2013-01-15 14:03:57.336825854 +0400
+++ psi/src/options/opt_advanced.cpp	2013-01-15 14:03:57.332825854 +0400
@@ -92,7 +92,9 @@
 		" like system-wide news on MSN, announcements, etc."));

 	connect(d->ck_messageevents,SIGNAL(toggled(bool)),d->ck_inactiveevents,SLOT(setEnabled(bool)));
+	connect(d->ck_messageevents,SIGNAL(toggled(bool)),d->ck_sendComposingEvents,SLOT(setEnabled(bool)));
 	d->ck_inactiveevents->setEnabled(d->ck_messageevents->isChecked());
+	d->ck_sendComposingEvents->setEnabled(d->ck_messageevents->isChecked());

 	return w;
 }
@@ -106,6 +108,7 @@
 	PsiOptions::instance()->setOption("options.messages.send-inactivity-events", d->ck_inactiveevents->isChecked());
 	PsiOptions::instance()->setOption("options.ui.notifications.request-receipts", d->ck_requestReceipts->isChecked());
 	PsiOptions::instance()->setOption("options.ui.notifications.send-receipts", d->ck_sendReceipts->isChecked());
+	PsiOptions::instance()->setOption("options.messages.dont-send-composing-events", d->ck_sendComposingEvents->isChecked());
 	PsiOptions::instance()->setOption("options.external-control.adhoc-remote-control.enable", d->ck_rc->isChecked());
 	if ( SpellChecker::instance()->available() )
 		PsiOptions::instance()->setOption("options.ui.spell-check.enabled",d->ck_spell->isChecked());
@@ -132,6 +135,7 @@
 	d->ck_inactiveevents->setChecked( PsiOptions::instance()->getOption("options.messages.send-inactivity-events").toBool() );
 	d->ck_requestReceipts->setChecked( PsiOptions::instance()->getOption("options.ui.notifications.request-receipts").toBool() );
 	d->ck_sendReceipts->setChecked( PsiOptions::instance()->getOption("options.ui.notifications.send-receipts").toBool() );
+	d->ck_sendComposingEvents->setChecked( PsiOptions::instance()->getOption("options.messages.dont-send-composing-events").toBool() );
 	d->ck_rc->setChecked( PsiOptions::instance()->getOption("options.external-control.adhoc-remote-control.enable").toBool() );
 	if ( !SpellChecker::instance()->available() )
 		d->ck_spell->setChecked(false);
Index: psi/src/options/opt_advanced.ui
===================================================================
--- psi.orig/src/options/opt_advanced.ui	2013-01-15 14:03:57.336825854 +0400
+++ psi/src/options/opt_advanced.ui	2013-01-15 14:03:57.332825854 +0400
@@ -34,6 +34,16 @@
     </widget>
    </item>
    <item>
+    <widget class="QCheckBox" name="ck_sendComposingEvents">
+     <property name="whatsThis">
+      <string>Disables the sending of message events such as &quot;Contact is Typing...&quot;</string>
+     </property>
+     <property name="text">
+      <string>Do not send composing events</string>
+     </property>
+    </widget>
+   </item>
+   <item>
     <widget class="QCheckBox" name="ck_rc" >
      <property name="text" >
       <string>Enable remote controlling from other locations</string>
