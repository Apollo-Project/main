Entering 'iris'
Entering 'src/libpsi'
--- a/src/activity.cpp
+++ b/src/activity.cpp
@@ -84,8 +84,8 @@
 
 QDomElement Activity::toXml(QDomDocument& doc)
 {
-	QDomElement activity = doc.createElement("activity");
-	activity.setAttribute("xmlns", "http://jabber.org/protocol/activity");
+	QDomElement activity = doc.createElement(PEP_ACTIVITY_TN);
+	activity.setAttribute("xmlns", PEP_ACTIVITY_NS);
 
 	if (!type() == Unknown) {
 		ActivityCatalog* ac = ActivityCatalog::instance();
@@ -98,9 +98,6 @@
 
 		activity.appendChild(el);
 	}
-	else {
-		qWarning("activity.cpp: ERROR: Converting unknown activity");
-	}
 
 	if (!text().isEmpty()) {
 		QDomElement el = doc.createElement("text");
@@ -114,14 +111,17 @@
 
 void Activity::fromXml(const QDomElement& element)
 {
-	if (element.tagName() != "activity")
-		return;
-
 	type_ = Activity::Unknown;
 	specificType_ = Activity::UnknownSpecific;
 
+	if (element.tagName() != PEP_ACTIVITY_TN)
+		return;
+
 	for (QDomNode node = element.firstChild(); !node.isNull(); node = node.nextSibling()) {
 		QDomElement child = node.toElement();
+		if(child.isNull()) {
+			continue;
+		}
 		if (child.tagName() == "text") {
 			text_ = child.text();
 		}
--- a/src/activity.h
+++ b/src/activity.h
@@ -23,6 +23,9 @@
 
 #include <QString>
 
+#define PEP_ACTIVITY_TN "activity"
+#define PEP_ACTIVITY_NS "http://jabber.org/protocol/activity"
+
 class QDomElement;
 class QDomDocument;
 
--- a/src/activitycatalog.cpp
+++ b/src/activitycatalog.cpp
@@ -27,6 +27,8 @@
 
 ActivityCatalog::Entry::Entry()
 {
+	type_ = Activity::Unknown;
+	specificType_ = Activity::UnknownSpecific;
 }
 
 ActivityCatalog::Entry::Entry(Activity::Type type, const QString& value, const QString& text)
--- a/src/activitydlg.cpp
+++ b/src/activitydlg.cpp
@@ -94,7 +94,7 @@
 
 	foreach(PsiAccount *pa, pa_) {
 		if (generalActivityStr == tr("<unset>")) {
-			pa->pepManager()->retract("http://jabber.org/protocol/activity", "current");
+			pa->pepManager()->disable(PEP_ACTIVITY_TN, PEP_ACTIVITY_NS, "current");
 		}
 		else {
 			ActivityCatalog* ac = ActivityCatalog::instance();
@@ -104,7 +104,7 @@
 			if (specificActivityStr != tr("<unset>")) {
 				specificType = ac->findEntryByText(specificActivityStr).specificType();
 			}
-			pa->pepManager()->publish("http://jabber.org/protocol/activity", PubSubItem("current",Activity(generalType,specificType,ui_.le_description->text()).toXml(*pa->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+			pa->pepManager()->publish(PEP_ACTIVITY_NS, PubSubItem("current",Activity(generalType,specificType,ui_.le_description->text()).toXml(*pa->client()->rootTask()->doc())));
 		}
 	}
 	close();
--- a/src/avatars.cpp
+++ b/src/avatars.cpp
@@ -241,7 +241,7 @@
 
 protected:
 	void requestAvatar() {
-		factory()->account()->pepManager()->get(jid_,"urn:xmpp:avatar:data",hash());
+		factory()->account()->pepManager()->get(jid_,PEP_AVATAR_DATA_NS,hash());
 	}
 
 	void avatarUpdated()
@@ -557,20 +557,16 @@
 			// Publish data
 			QDomDocument* doc = account()->client()->doc();
 			QString hash = Hash("sha1").hashToString(avatar_data);
-			QDomElement el = doc->createElement("data");
-			el.setAttribute("xmlns","urn:xmpp:avatar:data");
+			QDomElement el = doc->createElement(PEP_AVATAR_DATA_TN);
+			el.setAttribute("xmlns",PEP_AVATAR_DATA_NS);
 			el.appendChild(doc->createTextNode(Base64().arrayToString(avatar_data)));
 			selfAvatarData_ = avatar_data;
 			selfAvatarHash_ = hash;
-			account()->pepManager()->publish("urn:xmpp:avatar:data",PubSubItem(hash,el));
+			account()->pepManager()->publish(PEP_AVATAR_DATA_NS,PubSubItem(hash,el));
 		}
 	}
 	else {
-		QDomDocument* doc = account()->client()->doc();
-		QDomElement meta_el =  doc->createElement("metadata");
-		meta_el.setAttribute("xmlns","urn:xmpp:avatar:metadata");
-		meta_el.appendChild(doc->createElement("stop"));
-		account()->pepManager()->publish("urn:xmpp:avatar:metadata",PubSubItem("current",meta_el));
+		account()->pepManager()->disable(PEP_AVATAR_METADATA_TN, PEP_AVATAR_METADATA_NS, "current");
 	}
 }
 
@@ -640,8 +636,8 @@
 
 void AvatarFactory::itemPublished(const Jid& jid, const QString& n, const PubSubItem& item)
 {
-	if (n == "urn:xmpp:avatar:data") {
-		if (item.payload().tagName() == "data") {
+	if (n == PEP_AVATAR_DATA_NS) {
+		if (item.payload().tagName() == PEP_AVATAR_DATA_TN) {
 			if (pep_avatars_.contains(jid.bare())) {
 				pep_avatars_[jid.bare()]->setData(item.id(),item.payload().text());
 			}
@@ -650,12 +646,14 @@
 			qWarning("avatars.cpp: Unexpected item payload");
 		}
 	}
-	else if (n == "urn:xmpp:avatar:metadata") {
+	else if (n == PEP_AVATAR_METADATA_NS) {
 		if (!pep_avatars_.contains(jid.bare())) {
 			pep_avatars_[jid.bare()] = new PEPAvatar(this, jid.bare());
 			connect(pep_avatars_[jid.bare()],SIGNAL(avatarChanged(const Jid&)),this, SLOT(updateAvatar(const Jid&)));
 		}
+		// check for the deprecated <stop/> child element
 		QDomElement e = item.payload().firstChildElement("stop");
+		// if there's a <stop/> element or the <metadata/> element is empty, remove user's avatar
 		if (!e.isNull()) {
 			pep_avatars_[jid.bare()]->updateHash("");
 		}
@@ -667,12 +665,12 @@
 
 void AvatarFactory::publish_success(const QString& n, const PubSubItem& item)
 {
-	if (n == "urn:xmpp:avatar:data" && item.id() == selfAvatarHash_) {
+	if (n == PEP_AVATAR_DATA_NS && item.id() == selfAvatarHash_) {
 		// Publish metadata
 		QDomDocument* doc = account()->client()->doc();
 		QImage avatar_image = QImage::fromData(selfAvatarData_);
-		QDomElement meta_el = doc->createElement("metadata");
-		meta_el.setAttribute("xmlns","urn:xmpp:avatar:metadata");
+		QDomElement meta_el = doc->createElement(PEP_AVATAR_METADATA_TN);
+		meta_el.setAttribute("xmlns",PEP_AVATAR_METADATA_NS);
 		QDomElement info_el = doc->createElement("info");
 		info_el.setAttribute("id",selfAvatarHash_);
 		info_el.setAttribute("bytes",avatar_image.byteCount());
@@ -680,7 +678,7 @@
 		info_el.setAttribute("width",avatar_image.width());
 		info_el.setAttribute("type",image2type(selfAvatarData_));
 		meta_el.appendChild(info_el);
-		account()->pepManager()->publish("urn:xmpp:avatar:metadata",PubSubItem(selfAvatarHash_,meta_el));
+		account()->pepManager()->publish(PEP_AVATAR_METADATA_NS,PubSubItem(selfAvatarHash_,meta_el));
 	}
 }
 
--- a/src/avatars.h
+++ b/src/avatars.h
@@ -28,6 +28,12 @@
 
 #include "iconset.h"
 
+#define PEP_AVATAR_DATA_TN     "data"
+#define PEP_AVATAR_DATA_NS     "urn:xmpp:avatar:data"
+
+#define PEP_AVATAR_METADATA_TN "metadata"
+#define PEP_AVATAR_METADATA_NS "urn:xmpp:avatar:metadata"
+
 class PsiAccount;
 class Avatar;
 class VCardAvatar;
--- a/src/geolocation.cpp
+++ b/src/geolocation.cpp
@@ -35,8 +35,8 @@
 
 QDomElement GeoLocation::toXml(QDomDocument& doc)
 {
-	QDomElement geoloc = doc.createElement("geoloc");
-	geoloc.setAttribute("xmlns", "http://jabber.org/protocol/geoloc");
+	QDomElement geoloc = doc.createElement(PEP_GEOLOC_TN);
+	geoloc.setAttribute("xmlns", PEP_GEOLOC_NS);
 
 	if (alt_.hasValue()) {
 		QDomElement e = doc.createElement("alt");
@@ -129,11 +129,14 @@
 
 void GeoLocation::fromXml(const QDomElement& e)
 {
-	if (e.tagName() != "geoloc")
+	if (e.tagName() != PEP_GEOLOC_TN)
 		return;
 
 	for(QDomNode n = e.firstChild(); !n.isNull(); n = n.nextSibling()) {
 		QDomElement m = n.toElement();
+		if (m.isNull()) {
+			continue;
+		}
 		if (m.tagName() == "alt")
 			alt_ = Maybe<float>(m.text().toFloat());
 		else if (m.tagName() == "bearing")
--- a/src/geolocation.h
+++ b/src/geolocation.h
@@ -25,6 +25,9 @@
 
 #include "maybe.h"
 
+#define PEP_GEOLOC_TN "geoloc"
+#define PEP_GEOLOC_NS "http://jabber.org/protocol/geoloc"
+
 class QDomElement;
 class QDomDocument;
 
--- a/src/geolocationdlg.cpp
+++ b/src/geolocationdlg.cpp
@@ -160,10 +160,10 @@
 
 	foreach(PsiAccount *pa, pa_) {
 		if (geoloc.isNull()) {
-			pa->pepManager()->retract("http://jabber.org/protocol/geoloc", "current");
+			pa->pepManager()->disable(PEP_GEOLOC_TN, PEP_GEOLOC_NS, "current");
 		}
 		else {
-			pa->pepManager()->publish("http://jabber.org/protocol/geoloc", PubSubItem("current",geoloc.toXml(*pa->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+			pa->pepManager()->publish(PEP_GEOLOC_NS, PubSubItem("current",geoloc.toXml(*pa->client()->rootTask()->doc())));
 		}
 	}
 	close();
--- a/src/mood.cpp
+++ b/src/mood.cpp
@@ -65,16 +65,13 @@
 
 QDomElement Mood::toXml(QDomDocument& doc)
 {
-	QDomElement mood = doc.createElement("mood");
-	mood.setAttribute("xmlns", "http://jabber.org/protocol/mood");
+	QDomElement mood = doc.createElement(PEP_MOOD_TN);
+	mood.setAttribute("xmlns", PEP_MOOD_NS);
 
 	if (!type() == Unknown) {
 		QDomElement el = doc.createElement(MoodCatalog::instance()->findEntryByType(type()).value());
 		mood.appendChild(el);
 	}
-	else {
-		qWarning("mood.cpp: ERROR: Converting unknown mood");
-	}
 
 	if (!text().isEmpty()) {
 		QDomElement el = doc.createElement("text");
@@ -88,11 +85,16 @@
 
 void Mood::fromXml(const QDomElement& e)
 {
-	if (e.tagName() != "mood")
+	type_ = Mood::Unknown;
+
+	if (e.tagName() != PEP_MOOD_TN)
 		return;
 
 	for(QDomNode n = e.firstChild(); !n.isNull(); n = n.nextSibling()) {
 		QDomElement m = n.toElement();
+		if(m.isNull()) {
+			continue;
+		}
 		if (m.tagName() == "text") {
 			text_ = m.text();
 		}
--- a/src/mood.h
+++ b/src/mood.h
@@ -23,6 +23,9 @@
 
 #include <QString>
 
+#define PEP_MOOD_TN "mood"
+#define PEP_MOOD_NS "http://jabber.org/protocol/mood"
+
 class QDomElement;
 class QDomDocument;
 
--- a/src/moodcatalog.cpp
+++ b/src/moodcatalog.cpp
@@ -27,6 +27,7 @@
 
 MoodCatalog::Entry::Entry()
 {
+	type_ = Mood::Unknown;
 }
 
 MoodCatalog::Entry::Entry(Mood::Type type, const QString& value, const QString& text) : type_(type), value_(value), text_(text)
--- a/src/mooddlg.cpp
+++ b/src/mooddlg.cpp
@@ -58,11 +58,11 @@
 	QString moodstr = ui_.cb_type->currentText();
 	foreach(PsiAccount *pa, pa_) {
 		if (moodstr == tr("<unset>")) {
-			pa->pepManager()->retract("http://jabber.org/protocol/mood", "current");
+			pa->pepManager()->disable(PEP_MOOD_TN, PEP_MOOD_NS, "current");
 		}
 		else {
 			Mood::Type type = MoodCatalog::instance()->findEntryByText(moodstr).type();
-			pa->pepManager()->publish("http://jabber.org/protocol/mood", PubSubItem("current",Mood(type,ui_.le_text->text()).toXml(*pa->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+			pa->pepManager()->publish(PEP_MOOD_NS, PubSubItem("current",Mood(type,ui_.le_text->text()).toXml(*pa->client()->rootTask()->doc())));
 		}
 	}
 	close();
--- a/src/pepmanager.cpp
+++ b/src/pepmanager.cpp
@@ -570,6 +570,16 @@
 }
 
 
+void PEPManager::disable(const QString& tagName, const QString& node, const QString& id)
+{
+	// disable by publishing an empty element
+	QDomElement element = client_->rootTask()->doc()->createElement(tagName);
+	element.setAttribute("xmlns", node);
+
+	publish(node, PubSubItem(id,element));
+}
+
+
 void PEPManager::publishFinished()
 {
 	PEPPublishTask* task = (PEPPublishTask*) sender();
--- a/src/pepmanager.h
+++ b/src/pepmanager.h
@@ -59,6 +59,7 @@
 
 	void publish(const QString& node, const PubSubItem&, Access = DefaultAccess);
 	void retract(const QString& node, const QString& id);
+	void disable(const QString& tagName, const QString& node, const QString& id);
 	void get(const Jid& jid, const QString& node, const QString& id);
 
 	//void getSubscriptions(const Jid& jid);
--- a/src/privacy/psiprivacymanager.cpp
+++ b/src/privacy/psiprivacymanager.cpp
@@ -65,7 +65,7 @@
 
 		QString ns = queryNS(e);
 		if (ns == PRIVACY_NS) {
-			QDomElement listTag = findSubTag(queryTag(e), "list", 0);
+			QDomElement listTag = queryTag(e).firstChildElement("list");
 			if (!listTag.isNull()) {
 				emit privacyListChanged(listTag.attribute("name"));
 			}
