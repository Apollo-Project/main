--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -830,13 +830,6 @@ public slots:
 	}
 
 public:
-	enum AutoAway {
-		AutoAway_None = 0,
-		AutoAway_Away,
-		AutoAway_XA,
-		AutoAway_Offline
-	};
-
 	void setAutoAway(AutoAway autoAway)
 	{
 		if (!account->isAvailable())
@@ -2934,18 +2927,9 @@ void PsiAccount::publishTune(const Tune&
 	d->pepManager->publish("http://jabber.org/protocol/tune",PubSubItem("current",t));
 }
 
-void PsiAccount::secondsIdle(int seconds)
+void PsiAccount::setAutoAwayStatus(AutoAway status)
 {
-	int minutes = seconds / 60;
-
-	if(PsiOptions::instance()->getOption("options.status.auto-away.use-offline").toBool() && PsiOptions::instance()->getOption("options.status.auto-away.offline-after").toInt() > 0 && minutes >= PsiOptions::instance()->getOption("options.status.auto-away.offline-after").toInt())
-		d->setAutoAway(Private::AutoAway_Offline);
-	else if(PsiOptions::instance()->getOption("options.status.auto-away.use-not-availible").toBool() && PsiOptions::instance()->getOption("options.ui.menu.status.xa").toBool() && PsiOptions::instance()->getOption("options.status.auto-away.not-availible-after").toInt() > 0 && minutes >= PsiOptions::instance()->getOption("options.status.auto-away.not-availible-after").toInt())
-		d->setAutoAway(Private::AutoAway_XA);
-	else if(PsiOptions::instance()->getOption("options.status.auto-away.use-away").toBool() && PsiOptions::instance()->getOption("options.status.auto-away.away-after").toInt() > 0 && minutes >= PsiOptions::instance()->getOption("options.status.auto-away.away-after").toInt())
-		d->setAutoAway(Private::AutoAway_Away);
-	else
-		d->setAutoAway(Private::AutoAway_None);
+	d->setAutoAway(status);
 }
 
 void PsiAccount::playSound(PsiAccount::SoundType _onevent)
--- psi.orig/src/psiaccount.h
+++ psi/src/psiaccount.h
@@ -135,6 +135,16 @@ public:
 	static Status loggedOutStatus();
 	void setStatusDirect(const XMPP::Status &, bool withPriority = false);
 	void setStatusActual(const XMPP::Status &);
+
+	enum AutoAway {
+		AutoAway_None = 0,
+		AutoAway_Away,
+		AutoAway_XA,
+		AutoAway_Offline
+	};
+
+	void setAutoAwayStatus(AutoAway status);
+
 	bool loggedIn() const;
 	void setNick(const QString &);
 	QString nick() const;
@@ -279,7 +289,6 @@ public slots:
 
 	void incomingVoiceCall(const Jid&);
 	
-	void secondsIdle(int);
 	void openNextEvent(ActivationType activationType);
 	int forwardPendingEvents(const Jid &jid);
 	void autoLogin();
--- psi.orig/src/psicon.cpp
+++ psi/src/psicon.cpp
@@ -290,6 +290,29 @@ public:
 	AutoUpdater *autoUpdater;
 	AlertManager alertManager;
 	BossKey *bossKey;
+
+	struct IdleSettings
+	{
+		IdleSettings()
+		{}
+
+		void update()
+		{
+			PsiOptions *o = PsiOptions::instance();
+			useOffline = o->getOption("options.status.auto-away.use-offline").toBool();
+			useNotAvailable = o->getOption("options.status.auto-away.use-not-availible").toBool();
+			useAway = o->getOption("options.status.auto-away.use-away").toBool();
+			offlineAfter = o->getOption("options.status.auto-away.offline-after").toInt();
+			notAvailableAfter = o->getOption("options.status.auto-away.not-availible-after").toInt();
+			awayAfter = o->getOption("options.status.auto-away.away-after").toInt();
+			menuXA = o->getOption("options.ui.menu.status.xa").toBool();
+		}
+
+		bool useOffline, useNotAvailable, useAway, menuXA;
+		int offlineAfter, notAvailableAfter, awayAfter;
+	};
+
+	IdleSettings idleSettings_;
 };
 
 //----------------------------------------------------------------------------
@@ -517,7 +540,7 @@ bool PsiCon::init()
 	d->ftwin = new FileTransDlg(this);
 #endif
 
-	d->idle.start();
+	connect(&d->idle, SIGNAL(secondsIdle(int)), SLOT(secondsIdle(int)));
 
 	// S5B
 	d->s5bServer = new S5BServer;
@@ -924,7 +947,7 @@ PsiAccount *PsiCon::createAccount(const 
 {
 	UserAccount acc = _acc;
 	PsiAccount *pa = new PsiAccount(acc, d->contactList, d->capsRegistry, d->tabManager);
-	connect(&d->idle, SIGNAL(secondsIdle(int)), pa, SLOT(secondsIdle(int)));
+//	connect(&d->idle, SIGNAL(secondsIdle(int)), pa, SLOT(secondsIdle(int)));
 	connect(pa, SIGNAL(updatedActivity()), SLOT(pa_updatedActivity()));
 	connect(pa, SIGNAL(updatedAccount()), SLOT(pa_updatedAccount()));
 	connect(pa, SIGNAL(queueChanged()), SLOT(queueChanged()));
@@ -1237,6 +1260,13 @@ void PsiCon::optionChanged(const QString
 	// Global shortcuts
 	setShortcuts();
 
+	//Idle server
+	d->idleSettings_.update();
+	if(d->idleSettings_.useAway || d->idleSettings_.useNotAvailable || d->idleSettings_.useOffline)
+		d->idle.start();
+	else
+		d->idle.stop();
+
 	if (option == "options.ui.notifications.alert-style") {
 		alertIconUpdateAlertStyle();
 	}
@@ -1718,6 +1748,25 @@ void PsiCon::aboutToQuit()
 	doQuit(QuitProgram);
 }
 
+void PsiCon::secondsIdle(int sec)
+{
+	int minutes = sec / 60;
+	PsiAccount::AutoAway aa;
+
+	if(d->idleSettings_.useOffline && d->idleSettings_.offlineAfter > 0 && minutes >= d->idleSettings_.offlineAfter)
+		aa = PsiAccount::AutoAway_Offline;
+	else if(d->idleSettings_.useNotAvailable && d->idleSettings_.menuXA && d->idleSettings_.notAvailableAfter > 0 && minutes >= d->idleSettings_.notAvailableAfter)
+		aa = PsiAccount::AutoAway_XA;
+	else if(d->idleSettings_.useAway && d->idleSettings_.awayAfter > 0 && minutes >= d->idleSettings_.awayAfter)
+		aa = PsiAccount::AutoAway_Away;
+	else
+		aa = PsiAccount::AutoAway_None;
+
+	foreach(PsiAccount* pa, d->contactList->enabledAccounts()) {
+		pa->setAutoAwayStatus(aa);
+	}
+}
+
 ContactUpdatesManager* PsiCon::contactUpdatesManager() const
 {
 	return contactUpdatesManager_;
--- psi.orig/src/psicon.h
+++ psi/src/psicon.h
@@ -172,6 +172,7 @@ private slots:
 	void forceSavePreferences();
 	void startBounce();
 	void aboutToQuit();
+	void secondsIdle(int);
 
 private:
 	class Private;
