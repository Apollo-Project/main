--- psi.orig/options/default.xml
+++ psi/options/default.xml
@@ -84,6 +84,7 @@
 				<enabled comment="Enable message (i.e. non-chat) functionality" type="bool">true</enabled>
 				<auto-grab-urls-from-clipboard type="bool">false</auto-grab-urls-from-clipboard>
 				<auto-popup type="bool">false</auto-popup>
+				<maximized type="bool">false</maximized>
 				<auto-popup-headlines type="bool">false</auto-popup-headlines>
 				<show-character-count type="bool">true</show-character-count>
 				<show-subjects type="bool">true</show-subjects>
@@ -103,6 +104,9 @@
 				</avatars>
 				<alert-for-already-open-chats type="bool">true</alert-for-already-open-chats>
 				<auto-popup type="bool">false</auto-popup>
+				<maximized type="bool">false</maximized>
+				<x type="int">10</x>
+				<y type="int">10</y>
 				<delete-contents-after type="QString">never</delete-contents-after>
 				<raise-chat-windows-on-new-messages type="bool">false</raise-chat-windows-on-new-messages>
 				<use-chat-says-style type="bool">false</use-chat-says-style>
@@ -285,6 +289,9 @@ QLineEdit#le_status_text {
 				</view>
 			</menu>
 			<muc comment="Multi-User Chat options">
+				<maximized type="bool">false</maximized>
+				<x type="int">10</x>
+				<y type="int">10</y>
 				<status-with-priority comment="Show priority with status change" type="bool">false</status-with-priority>
 				<show-initial-joins comment="Show joins on your MUC join (with status and priority, depends on options)" type="bool">false</show-initial-joins>
 				<log-width type="int">500</log-width>
@@ -460,6 +467,9 @@ QLineEdit#le_status_text {
 				<show-tab-icons type="bool">true</show-tab-icons>
 				<disable-wheel-scroll type="bool">false</disable-wheel-scroll>
 				<can-close-inactive-tab type="bool">true</can-close-inactive-tab>
+				<maximized type="bool">false</maximized>
+				<x type="int">10</x>
+				<y type="int">10</y>
 				<show-tab-close-buttons type="bool">true</show-tab-close-buttons>
 				<put-tabs-at-bottom type="bool">false</put-tabs-at-bottom>
 				<use-tabs type="bool">true</use-tabs>
--- psi.orig/src/chatdlg.cpp
+++ psi/src/chatdlg.cpp
@@ -47,6 +47,7 @@
 #include <QDragEnterEvent>
 #include <QTextDocument> // for Qt::escape()
 #include <QScrollBar>
+#include <QDesktopWidget>
 
 #include "psiaccount.h"
 #include "userlist.h"
@@ -159,11 +160,8 @@ void ChatDlg::init()
 
 	// TODO: port to restoreSavedSize() (and adapt it from restoreSavedGeometry())
 	QSize size = PsiOptions::instance()->getOption("options.ui.chat.size").toSize();
-	if (!size.isEmpty()) {
-		resize(size);
-	} else {
-		resize(defaultSize());
-	}
+	setInitSize(size, PsiOptions::instance()->getOption("options.ui.chat.x").toInt(),
+		    PsiOptions::instance()->getOption("options.ui.chat.y").toInt());
 }
 
 ChatDlg::~ChatDlg()
@@ -226,13 +224,28 @@ void ChatDlg::scrollDown()
 
 void ChatDlg::resizeEvent(QResizeEvent *e)
 {
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		PsiOptions::instance()->setOption("options.ui.chat.size", e->size());
+	if (!(bool(window()->windowState() & Qt::WindowFullScreen)
+		|| bool(window()->windowState() & Qt::WindowMaximized))){
+		if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
+			PsiOptions::instance()->setOption("options.ui.chat.size", e->size());
+		}
 	}
 }
 
 void ChatDlg::closeEvent(QCloseEvent *e)
 {
+	PsiOptions::instance()->setOption("options.ui.chat.x", window()->x());
+	PsiOptions::instance()->setOption("options.ui.chat.y", window()->y());
+	PsiOptions::instance()->setOption("options.ui.chat.size", window()->size());
+	if (PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool()) {
+		PsiOptions::instance()->setOption("options.ui.chat.maximized",
+					  (bool(window()->windowState() & Qt::WindowFullScreen)
+					   || bool(window()->windowState() & Qt::WindowMaximized)));
+	}
+	else
+	{
+		PsiOptions::instance()->setOption("options.ui.chat.maximized", bool(window()->geometry() == qApp->desktop()->availableGeometry(-1)));
+	}
 	if (readyToHide()) {
 		e->accept();
 	}
@@ -1137,3 +1150,27 @@ int ChatDlg::unreadMessageCount() const
 {
 	return pending_;
 }
+
+void ChatDlg::setInitSize(QSize size, int x, int y)
+{
+	if (PsiOptions::instance()->getOption("options.ui.chat.maximized").toBool()) {
+		if (PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool()) {
+#ifdef Q_WS_WIN
+			window()->setWindowState(window()->windowState() | Qt::WindowFullScreen | Qt::WindowMaximized);
+#else
+			window()->setWindowState(window()->windowState() | Qt::WindowMaximized);
+#endif
+		}
+		else {
+			window()->setGeometry(qApp->desktop()->availableGeometry(-1));
+		}
+	}
+	else {
+		if (!size.isEmpty()) {
+			window()->resize(size);
+		} else {
+			window()->resize(defaultSize());
+		}
+		window()->move(x ,y);
+	}
+}
--- psi.orig/src/chatdlg.h
+++ psi/src/chatdlg.h
@@ -199,6 +199,8 @@ private:
 	QString eventId_;
 	ChatState contactChatState_;
 	ChatState lastChatState_;
+
+	void setInitSize(QSize size, int x, int y);
 };
 
 #endif
--- psi.orig/src/eventdlg.cpp
+++ psi/src/eventdlg.cpp
@@ -996,11 +996,8 @@ void EventDlg::init()
 	connect(d->pa, SIGNAL(encryptedMessageSent(int, bool, int, const QString &)), SLOT(encryptedMessageSent(int, bool, int, const QString &)));
 
 	bool use = PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool();
-	if (PsiOptions::instance()->getOption("options.ui.message.size").toSize().isValid() && use) {
-		resize(PsiOptions::instance()->getOption("options.ui.message.size").toSize());
-	} else {
-		resize(defaultSize());
-	}
+	if (use)
+		setInitSize(PsiOptions::instance()->getOption("options.ui.message.size").toSize());
 	optionsUpdate();
 
 	//ShortcutManager::connect("common.close", this, SLOT(close()));
@@ -1413,8 +1410,10 @@ void EventDlg::showEvent(QShowEvent *e)
 
 void EventDlg::resizeEvent(QResizeEvent *e)
 {
-	if(PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		PsiOptions::instance()->setOption("options.ui.message.size", e->size());
+	if (!(bool(windowState() & Qt::WindowFullScreen) || bool(windowState() & Qt::WindowMaximized))){
+		if(PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
+			PsiOptions::instance()->setOption("options.ui.message.size", e->size());
+		}
 	}
 }
 
@@ -1434,6 +1433,10 @@ void EventDlg::keyPressEvent(QKeyEvent *
 
 void EventDlg::closeEvent(QCloseEvent *e)
 {
+	PsiOptions::instance()->setOption("options.ui.message.size", window()->size());
+	PsiOptions::instance()->setOption("options.ui.message.maximized",
+					  (bool(window()->windowState() & Qt::WindowFullScreen)
+					   || bool(window()->windowState() & Qt::WindowMaximized)));
 	// really lame way of checking if we are encrypting
 	if(!d->mle->isEnabled())
 		return;
@@ -2145,4 +2148,18 @@ void EventDlg::encryptedMessageSent(int 
 #endif
 }
 
+void EventDlg::setInitSize(QSize size)
+{
+	if (PsiOptions::instance()->getOption("options.ui.message.maximized").toBool()) {
+		setWindowState(window()->windowState() | Qt::WindowMaximized);
+	}
+	else {
+		if (size.isValid()) {
+			resize(size);
+		} else {
+			resize(defaultSize());
+		}
+	}
+}
+
 #include "eventdlg.moc"
--- psi.orig/src/eventdlg.h
+++ psi/src/eventdlg.h
@@ -203,6 +203,8 @@ private:
 	friend class ELineEdit;
 	UserResourceList getResources(const QString &) const;
 	QString jidToString(const Jid &, const QString &r="") const;
+
+	void setInitSize(QSize size);
 };
 
 #endif
--- psi.orig/src/groupchatdlg.cpp
+++ psi/src/groupchatdlg.cpp
@@ -53,6 +53,7 @@
 #include <QCheckBox>
 #include <QDialogButtonBox>
 #include <QFormLayout>
+#include <QDesktopWidget>
 
 #include "psicon.h"
 #include "psiaccount.h"
@@ -811,7 +812,11 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	X11WM_CLASS("groupchat");
 
 	ui_.mle->chatEdit()->setFocus();
-	resize(PsiOptions::instance()->getOption("options.ui.muc.size").toSize());
+	if(PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool() && !d->tabmode) {
+		setInitSize(PsiOptions::instance()->getOption("options.ui.muc.size").toSize(),
+			   PsiOptions::instance()->getOption("options.ui.muc.x").toInt(),
+			    PsiOptions::instance()->getOption("options.ui.muc.y").toInt());
+	}
 
 	// Connect signals from MUC manager
 	connect(d->mucManager,SIGNAL(action_error(MUCManager::Action, int, const QString&)), SLOT(action_error(MUCManager::Action, int, const QString&)));
@@ -916,6 +921,17 @@ void GCMainDlg::scrollDown() {
 
 void GCMainDlg::closeEvent(QCloseEvent *e)
 {
+	PsiOptions::instance()->setOption("options.ui.muc.x", window()->x());
+	PsiOptions::instance()->setOption("options.ui.muc.y", window()->y());
+	PsiOptions::instance()->setOption("options.ui.muc.size", window()->size());
+	if (isBorder()) {
+		PsiOptions::instance()->setOption("options.ui.muc.maximized",
+					  (bool(window()->windowState() & Qt::WindowFullScreen)
+					   || bool(window()->windowState() & Qt::WindowMaximized)));
+	}
+	else {
+		PsiOptions::instance()->setOption("options.ui.muc.maximized", bool(window()->geometry() == qApp->desktop()->availableGeometry(-1)));
+	}
 	e->accept();
 	if (d->state != Private::Connected)
 		account()->groupChatLeave(d->dlg->jid().domain(),d->dlg->jid().node());
@@ -923,8 +939,11 @@ void GCMainDlg::closeEvent(QCloseEvent *
 
 void GCMainDlg::resizeEvent(QResizeEvent* e)
 {
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool())
-		PsiOptions::instance()->setOption("options.ui.muc.size", e->size());
+	if (!(bool(window()->windowState() & Qt::WindowFullScreen)
+		|| bool(window()->windowState() & Qt::WindowMaximized))){
+		if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool())
+			PsiOptions::instance()->setOption("options.ui.muc.size", e->size());
+	}
 }
 
 void GCMainDlg::deactivated()
@@ -2111,6 +2130,26 @@ void GCMainDlg::setMargins()
 	}
 }
 
+void GCMainDlg::setInitSize(QSize size, int x, int y)
+{
+	if (PsiOptions::instance()->getOption("options.ui.muc.maximized").toBool()) {
+		if (isBorder()) {
+#ifdef Q_WS_WIN
+			window()->setWindowState(window()->windowState() | Qt::WindowFullScreen | Qt::WindowMaximized);
+#else
+			window()->setWindowState(window()->windowState() | Qt::WindowMaximized);
+#endif
+		}
+		else {
+			window()->setGeometry(qApp->desktop()->availableGeometry(-1));
+		}
+	}
+	else {
+		window()->resize(size);
+		window()->move(x ,y);
+	}
+}
+
 //----------------------------------------------------------------------------
 // GCFindDlg
 //----------------------------------------------------------------------------
--- psi.orig/src/groupchatdlg.h
+++ psi/src/groupchatdlg.h
@@ -171,6 +171,7 @@ private:
 	QDateTime lastMsgTime_;
 
 	void setMargins();
+	void setInitSize(QSize size, int x, int y);
 };
 
 class GCFindDlg : public QDialog
--- psi.orig/src/tabs/tabdlg.cpp
+++ psi/src/tabs/tabdlg.cpp
@@ -33,6 +33,7 @@
 #include <QDropEvent>
 #include <QCloseEvent>
 #include <QSignalMapper>
+#include <QDesktopWidget>
 
 #include "psitabwidget.h"
 #include "psioptions.h"
@@ -190,12 +191,9 @@ TabDlg::TabDlg(TabManager* tabManager, Q
 		addAction(action);
 	}
 
-	if (size.isValid()) {
-		resize(size);
-	} else {
-		resize(ChatDlg::defaultSize()); //TODO: no!
-	}
 	setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
+	setInitSize(size, PsiOptions::instance()->getOption("options.ui.tabs.x").toInt(),
+		      PsiOptions::instance()->getOption("options.ui.tabs.y").toInt());
 }
 
 TabDlg::~TabDlg()
@@ -204,6 +202,7 @@ TabDlg::~TabDlg()
 	// so it could cancel an application quit
 	// Q_ASSERT(tabs_.isEmpty());
 
+	saveSize();
 	// ensure all tabs are closed at this moment
 	foreach(TabbableWidget* tab, tabs_) {
 		delete tab;
@@ -560,6 +559,7 @@ void TabDlg::updateCaption()
 
 void TabDlg::closeEvent(QCloseEvent* closeEvent)
 {
+	saveSize();
 	foreach(TabbableWidget* tab, tabs_) {
 		if (!tab->readyToHide()) {
 			closeEvent->ignore();
@@ -864,3 +864,38 @@ void TabDlg::setTabIcon(QWidget *widget,
 {
 	tabWidget_->setTabIcon(widget, icon);
 }
+
+void TabDlg::setInitSize(QSize size, int x, int y)
+{
+	if (PsiOptions::instance()->getOption("options.ui.tabs.maximized").toBool()) {
+		if (isBorder()) {
+#ifdef Q_WS_WIN
+			setWindowState(windowState() | Qt::WindowFullScreen | Qt::WindowMaximized);
+#else
+			setWindowState(windowState() | Qt::WindowMaximized);
+#endif
+		}
+		else {
+			setGeometry(qApp->desktop()->availableGeometry(-1));
+		}
+	} else {
+		if (size.isValid()) {
+			resize(size);
+		} else {
+			resize(ChatDlg::defaultSize()); //TODO: no!
+		}
+		move(x, y);
+	}
+}
+
+void TabDlg::saveSize()
+{
+	if (isBorder()) {
+		PsiOptions::instance()->setOption("options.ui.tabs.maximized", (bool(windowState() & Qt::WindowFullScreen)|| bool(windowState() & Qt::WindowMaximized)));
+	}
+	else {
+		PsiOptions::instance()->setOption("options.ui.tabs.maximized", bool(geometry() == qApp->desktop()->availableGeometry(-1)));
+	}
+	PsiOptions::instance()->setOption("options.ui.tabs.x", x());
+	PsiOptions::instance()->setOption("options.ui.tabs.y", y());
+}
--- psi.orig/src/tabs/tabdlg.h
+++ psi/src/tabs/tabdlg.h
@@ -167,6 +167,8 @@ private:
 	void updateCaption();
 	void updateTabBar();
 	PsiWindowHeader *winHeader_;
+	void setInitSize(QSize size, int x, int y);
+	void saveSize();
 };
 
 #endif
