--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -439,6 +439,8 @@
 					<item type="QKeySequence">Ctrl+PgUp</item>
 					<item type="QKeySequence">Ctrl+Shift+Tab</item>
 				</previous-tab>
+				<find-next type="QKeySequence"></find-next>
+				<find-prev type="QKeySequence"></find-prev>
 				<find type="QKeySequence" comment="Find text">Ctrl+F</find>
 				<send type="QVariantList" comment="Sends the message">
 					<item type="QKeySequence">Return</item>
--- git.orig/src/chatview_te.cpp
+++ git/src/chatview_te.cpp
@@ -456,3 +456,8 @@ bool ChatView::internalFind(QString str,
 
 	return true;
 }
+
+ChatView * ChatView::textWidget()
+{
+	return this;
+}
\ No newline at end of file
--- git.orig/src/chatview_te.h
+++ git/src/chatview_te.h
@@ -61,6 +61,7 @@ public:
 	void scrollDown();
 	void doTrackBar();
 	bool internalFind(QString str, bool startFromBeginning = false);
+	ChatView *textWidget();
 
 protected:
 	// override the tab/esc behavior
--- git.orig/src/chatview_webkit.cpp
+++ git/src/chatview_webkit.cpp
@@ -322,3 +322,8 @@ bool ChatView::internalFind(QString str,
 
 	return found;
 }
+
+WebView * ChatView::textWidget()
+{
+	return webView;
+}
\ No newline at end of file
--- git.orig/src/chatview_webkit.h
+++ git/src/chatview_webkit.h
@@ -82,6 +82,7 @@ public:
 	void clear();
 	void doTrackBar();
 	bool internalFind(QString str, bool startFromBeginning = false);
+	WebView * textWidget();
 
 protected:
 	// override the tab/esc behavior
--- git.orig/src/groupchatdlg.cpp
+++ git/src/groupchatdlg.cpp
@@ -104,7 +104,7 @@
 
 
 #include "groupchattopicdlg.h"
-
+#include "typeaheadfind.h"
 //----------------------------------------------------------------------------
 // StatusPingTask
 //----------------------------------------------------------------------------
@@ -210,6 +210,7 @@ public:
 	QString topic;
 	bool nonAnonymous;		 // got status code 100 ?
 	IconAction *act_find, *act_clear, *act_icon, *act_configure, *act_ps, *act_templates, *act_bookmark;
+	TypeAheadFindBar *typeahead;
 #ifdef WHITEBOARDING
 	IconAction *act_whiteboard;
 #endif
@@ -229,8 +230,8 @@ public:
 	QStringList hist;
 	int histAt;
 
-	QPointer<GCFindDlg> findDlg;
-	QString lastSearch;
+	//QPointer<GCFindDlg> findDlg;
+	//QString lastSearch;
 
 	QPointer<MUCConfigDlg> configDlg;
 	QPointer<GroupchatTopicDlg> topicDlg;
@@ -608,7 +609,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	d->connecting = false;
 
 	d->histAt = 0;
-	d->findDlg = 0;
+	//d->findDlg = 0;
 	d->configDlg = 0;
 
 	d->state = Private::Connected;
@@ -642,11 +643,11 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 
 	connect(account()->psi(), SIGNAL(accountCountChanged()), this, SLOT(updateIdentityVisibility()));
 	updateIdentityVisibility();
-
+/*
 	d->act_find = new IconAction(tr("Find"), "psi/search", tr("&Find"), 0, this);
 	connect(d->act_find, SIGNAL(triggered()), SLOT(openFind()));
 	ui_.tb_find->setDefaultAction(d->act_find);
-
+*/
 	ui_.tb_emoticons->setIcon(IconsetFactory::icon("psi/smile").icon());
 
 #ifdef Q_WS_MAC
@@ -661,8 +662,17 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	connect(ui_.lv_users, SIGNAL(action(const QString &, const Status &, int)), SLOT(lv_action(const QString &, const Status &, int)));
 	connect(ui_.lv_users, SIGNAL(insertNick(const QString&)), d, SLOT(insertNick(const QString&)));
 
+	// typeahead find bar
+	QHBoxLayout *hb3a = new QHBoxLayout();
+	d->typeahead = new TypeAheadFindBar(ui_.log->textWidget(), tr("Find toolbar"), 0);
+	hb3a->addWidget( d->typeahead );
+	ui_.vboxLayout1->addLayout(hb3a);
+
 	d->act_clear = new IconAction (tr("Clear Chat Window"), "psi/clearChat", tr("Clear Chat Window"), 0, this);
 	connect( d->act_clear, SIGNAL(triggered()), SLOT(doClearButton()));
+
+	d->act_find = new IconAction(tr("Find"), "psi/search", tr("&Find"), 0, this, "", true);
+	connect(d->act_find, SIGNAL(triggered()), d->typeahead, SLOT(toggleVisibility()));
 	
 	d->act_configure = new IconAction(tr("Configure Room"), "psi/configure-room", tr("&Configure Room"), 0, this);
 	connect(d->act_configure, SIGNAL(triggered()), SLOT(configureRoom()));
@@ -706,6 +716,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 
 	ui_.toolbar->setIconSize(QSize(16,16));
 	ui_.toolbar->addAction(d->act_clear);
+	ui_.toolbar->addAction(d->act_find);
 	ui_.toolbar->addAction(d->act_configure);
 #ifdef WHITEBOARDING
 	ui_.toolbar->addAction(d->act_whiteboard);
@@ -1127,7 +1138,7 @@ void GCMainDlg::doClearButton()
 		doClear();
 	}
 }
-
+/*
 void GCMainDlg::openFind()
 {
 	if(d->findDlg)
@@ -1138,7 +1149,7 @@ void GCMainDlg::openFind()
 		d->findDlg->show();
 	}
 }
-
+*/
 void GCMainDlg::configureRoom()
 {
 	if(d->configDlg)
@@ -1152,7 +1163,7 @@ void GCMainDlg::configureRoom()
 		d->configDlg->show();
 	}
 }
-
+/*
 void GCMainDlg::doFind(const QString &str)
 {
 	d->lastSearch = str;
@@ -1161,7 +1172,7 @@ void GCMainDlg::doFind(const QString &st
 	else
 		d->findDlg->error(str);
 }
-
+*/
 void GCMainDlg::goDisc()
 {
 	if(d->state != Private::Idle && d->state != Private::ForcedLeave) {
@@ -1747,7 +1758,7 @@ void GCMainDlg::optionsUpdate()
 
 	setLooks();
 	setShortcuts();
-
+	d->typeahead->optionsUpdate();
 	// update status icons
 	ui_.lv_users->updateAll();
 }
--- git.orig/src/groupchatdlg.h
+++ git/src/groupchatdlg.h
@@ -116,9 +116,9 @@ private slots:
 	void mle_returnPressed();
 	void openTopic();
 	void setTopic(const QString &);
-	void openFind();
+	//void openFind();
 	void configureRoom();
-	void doFind(const QString &);
+	//void doFind(const QString &);
 	void pa_updatedActivity();
 	void goDisc();
 	void goConn();
--- git.orig/src/groupchatdlg.ui
+++ git/src/groupchatdlg.ui
@@ -96,25 +96,6 @@
            </widget>
           </item>
           <item>
-           <widget class="QToolButton" name="tb_find" >
-            <property name="toolTip" >
-             <string>Select icon</string>
-            </property>
-            <property name="text" >
-             <string/>
-            </property>
-            <property name="iconSize" >
-             <size>
-              <width>16</width>
-              <height>16</height>
-             </size>
-            </property>
-            <property name="popupMode" >
-             <enum>QToolButton::InstantPopup</enum>
-            </property>
-           </widget>
-          </item>
-          <item>
            <widget class="QToolButton" name="tb_emoticons" >
             <property name="toolTip" >
              <string>Select icon</string>
--- git.orig/src/psichatdlg.cpp
+++ git/src/psichatdlg.cpp
@@ -308,6 +308,9 @@ void PsiChatDlg::setShortcuts()
 	ChatDlg::setShortcuts();
 
 	act_clear_->setShortcuts(ShortcutManager::instance()->shortcuts("chat.clear"));
+// typeahead find bar
+	act_find->setShortcuts(ShortcutManager::instance()->shortcuts("chat.find"));
+// -- typeahead
 	act_info_->setShortcuts(ShortcutManager::instance()->shortcuts("common.user-info"));
 	act_history_->setShortcuts(ShortcutManager::instance()->shortcuts("common.history"));
 
@@ -335,9 +338,21 @@ void PsiChatDlg::updateIdentityVisibilit
 
 void PsiChatDlg::initToolButtons()
 {
+// typeahead find
+	QHBoxLayout *hb3a = new QHBoxLayout();
+	typeahead = new TypeAheadFindBar(ui_.log->textWidget(), tr("Find toolbar"), 0);
+	hb3a->addWidget( typeahead );
+	ui_.vboxLayout1->addLayout(hb3a);
+// -- typeahead
+
 	act_clear_ = new IconAction(tr("Clear Chat Window"), "psi/clearChat", tr("Clear Chat Window"), 0, this);
 	connect(act_clear_, SIGNAL(triggered()), SLOT(doClearButton()));
 
+// typeahead find
+	act_find = new IconAction(tr("Find"), "psi/search", tr("&Find"), 0, this, "", true);
+	connect(act_find, SIGNAL(triggered()), typeahead, SLOT(toggleVisibility()));
+// -- typeahead
+
 	connect(account()->psi()->iconSelectPopup(), SIGNAL(textSelected(QString)), this, SLOT(addEmoticon(QString)));
 	act_icon_ = new IconAction(tr("Select Icon"), "psi/smile", tr("Select Icon"), 0, this);
 	act_icon_->setMenu(account()->psi()->iconSelectPopup());
@@ -375,6 +390,9 @@ void PsiChatDlg::initToolBar()
 	ui_.toolbar->setWindowTitle(tr("Chat Toolbar"));
 	ui_.toolbar->setIconSize(QSize(16, 16));
 	ui_.toolbar->addAction(act_clear_);
+// typeahead find bar
+	ui_.toolbar->addAction(act_find);
+// -- typeahead
 	ui_.toolbar->addWidget(new StretchWidget(ui_.toolbar));
 	ui_.toolbar->addAction(act_icon_);
 	((QToolButton *)ui_.toolbar->widgetForAction(act_icon_))->setPopupMode(QToolButton::InstantPopup);
@@ -498,6 +516,8 @@ void PsiChatDlg::optionsUpdate()
 	smallChat_ = PsiOptions::instance()->getOption("options.ui.chat.use-small-chats").toBool();
 
 	ChatDlg::optionsUpdate();
+// typeahead find bar
+	typeahead->optionsUpdate();
 }
 
 void PsiChatDlg::updatePGP()
--- git.orig/src/psichatdlg.h
+++ git/src/psichatdlg.h
@@ -8,6 +8,7 @@
 #include "mcmdcompletion.h"
 
 #include "ui_chatdlg.h"
+#include "typeaheadfind.h"
 
 class IconAction;
 
@@ -78,6 +79,8 @@ private:
 	IconAction* act_file_;
 	IconAction* act_compact_;
 	IconAction* act_voice_;
+	TypeAheadFindBar *typeahead;
+	IconAction* act_find;
 	IconAction* act_ps_;
 	IconAction* act_templates_;
 	QAction *act_mini_cmd_;
--- /dev/null
+++ git/src/widgets/typeaheadfind.cpp
@@ -0,0 +1,290 @@
+/*
+ * typeaheadfind.cpp - Typeahead find toolbar
+ * Copyright (C) 2006  Maciej Niedzielski
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include "typeaheadfind.h"
+
+#include <QAction>
+#include <QLineEdit>
+#include <QCheckBox>
+#include <QLabel>
+#include <QTextEdit>
+
+#include "iconaction.h"
+#include "stretchwidget.h"
+#include "shortcutmanager.h"
+#include "psioptions.h"
+
+/**
+ * \class TypeAheadFindBar
+ * \brief The TypeAheadFindBar class provides a toolbar for typeahead finding.
+ */
+
+class TypeAheadFindBar::Private
+{
+public:
+	// setup search and react to search results
+	void doFind(bool backward = false)
+	{
+		QTextDocument::FindFlags options;
+
+		if (caseSensitive)
+			options |= QTextDocument::FindCaseSensitively;
+
+		if (backward) {
+			options |= QTextDocument::FindBackward;
+
+			if (widgetType == TypeAheadFindBar::WebViewType) {
+				//FIXME make it work with web
+			} else {
+				// move cursor before currect selection
+				// to prevent finding the same occurence again
+				QTextCursor cursor = te->textCursor();
+				cursor.setPosition(cursor.selectionStart());
+				cursor.movePosition(QTextCursor::Left);
+				te->setTextCursor(cursor);
+			}
+		}
+
+		if (find(text, options)) {
+			le_find->setStyleSheet("");
+		}
+		else {
+			le_find->setStyleSheet("QLineEdit { background: #ff6666; color: #ffffff }");
+		}
+	}
+
+	// real search code
+
+	bool find(const QString &str, QTextDocument::FindFlags options, QTextCursor::MoveOperation start = QTextCursor::NoMove)
+	{
+		if (widgetType == TypeAheadFindBar::WebViewType) {
+#ifdef WEBKIT
+			QWebPage::FindFlags wkOptions;
+			wkOptions |= options & QTextDocument::FindBackward? QWebPage::FindBackward : (QWebPage::FindFlags)0;
+			wkOptions |= options & QTextDocument::FindCaseSensitively? QWebPage::FindCaseSensitively : (QWebPage::FindFlags)0;
+			return wv->findText(str, wkOptions);
+#endif
+		}
+		if (start != QTextCursor::NoMove) {
+			QTextCursor cursor = te->textCursor();
+			cursor.movePosition(start);
+			te->setTextCursor(cursor);
+		}
+
+		bool found = te->find(text, options);
+		if (!found) {
+			if (start == QTextCursor::NoMove)
+				return find(text, options, options & QTextDocument::FindBackward ? QTextCursor::End : QTextCursor::Start);
+
+			return false;
+		}
+
+		return true;
+	}
+
+	QString text;
+	bool caseSensitive;
+	TypeAheadFindBar::Type widgetType;
+
+	QTextEdit *te;
+#ifdef WEBKIT
+	WebView *wv;
+#endif
+	QLineEdit *le_find;
+	QAction *act_next;
+	QAction *act_prev;
+	QCheckBox *cb_case;
+};
+
+/**
+ * \brief Creates new find toolbar, hidden by default.
+ * \param textedit, QTextEdit that this toolbar will operate on.
+ * \param title, toolbar's title
+ * \param parent, toolbar's parent
+ */
+TypeAheadFindBar::TypeAheadFindBar(QTextEdit *textedit, const QString &title, QWidget *parent)
+: QToolBar(title, parent)
+{
+	d = new Private();
+	d->widgetType = TextEditType;
+	d->te = textedit;
+	init();
+}
+
+#ifdef WEBKIT
+TypeAheadFindBar::TypeAheadFindBar(WebView *webView, const QString &/*title*/, QWidget */*parent*/)
+{
+	d = new Private();
+	d->widgetType = WebViewType;
+	d->wv = webView;
+	init();
+}
+#endif
+
+void TypeAheadFindBar::init()
+{
+	setIconSize(QSize(16,16));
+	setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Maximum);
+
+	d->caseSensitive = false;
+	d->text = "";
+
+	d->le_find = new QLineEdit(this);
+	d->le_find->setMaximumWidth(200);
+	d->le_find->setToolTip(tr("Search"));
+	connect(d->le_find, SIGNAL(textEdited(const QString &)), SLOT(textChanged(const QString &)));
+	addWidget(d->le_find);
+
+	d->act_next = new IconAction(tr("Find next"), "psi/arrowDown", "", 0, this);
+	d->act_next->setEnabled(false);
+	d->act_next->setToolTip(tr("Find next"));
+	connect(d->act_next, SIGNAL(triggered()), SLOT(findNext()));
+	addAction(d->act_next);
+
+	d->act_prev = new IconAction(tr("Find previous"), "psi/arrowUp", "", 0, this);
+	d->act_prev->setEnabled(false);
+	d->act_prev->setToolTip(tr("Find previous"));
+	connect(d->act_prev, SIGNAL(triggered()), SLOT(findPrevious()));
+	addAction(d->act_prev);
+
+	d->cb_case = new QCheckBox(tr("&Case sensitive"), this);
+	connect(d->cb_case, SIGNAL(stateChanged(int)), SLOT(caseToggled(int)));
+	addWidget(d->cb_case);
+
+	addWidget(new StretchWidget(this));
+
+	optionsUpdate();
+
+	hide();
+}
+
+/**
+ * \brief Destroys the toolbar.
+ */
+TypeAheadFindBar::~TypeAheadFindBar()
+{
+	delete d;
+	d = 0;
+}
+
+/**
+ * \brief Should be called when application options are changed.
+ * This slot updates toolbar's shortcuts.
+ */
+void TypeAheadFindBar::optionsUpdate()
+{
+	d->act_next->setShortcuts(ShortcutManager::instance()->shortcuts("chat.find-next"));
+	d->act_prev->setShortcuts(ShortcutManager::instance()->shortcuts("chat.find-prev"));
+}
+
+/**
+ * \brief Opens (shows) the toolbar.
+ */
+void TypeAheadFindBar::open()
+{
+	show();
+	d->le_find->setFocus();
+	d->le_find->selectAll();
+	emit visibilityChanged(true);
+}
+
+/**
+ * \brief Closes (hides) the toolbar.
+ */
+void TypeAheadFindBar::close()
+{
+	hide();
+	emit visibilityChanged(false);
+}
+
+/**
+ * \brief Switched between visible and hidden state.
+ */
+void TypeAheadFindBar::toggleVisibility()
+{
+	if (isVisible())
+		hide();
+	else
+		//show();
+		open();
+}
+
+/**
+ * \brief Private slot activated when find text chagnes.
+ */
+void TypeAheadFindBar::textChanged(const QString &str)
+{
+	QTextCursor cursor;
+	if (d->widgetType == TextEditType) {
+		cursor = d->te->textCursor();
+	}
+
+	if (str.isEmpty()) {
+		d->act_next->setEnabled(false);
+		d->act_prev->setEnabled(false);
+		d->le_find->setStyleSheet("");
+		if (d->widgetType == WebViewType) {
+#ifdef WEBKIT
+			d->wv->page()->findText(""); //its buggy in qt-4.6.0
+#endif
+		} else { //TextEditType
+			cursor.clearSelection();
+			d->te->setTextCursor(cursor);
+		}
+		d->le_find->setStyleSheet("");
+	}
+	else {
+		d->act_next->setEnabled(true);
+		d->act_prev->setEnabled(true);
+
+		if (d->widgetType == TextEditType) {
+			// don't jump to next word occurence after appending new charater
+			cursor.setPosition(cursor.selectionStart());
+			d->te->setTextCursor(cursor);
+		}
+
+		d->text = str;
+		d->doFind();
+	}
+}
+
+/**
+ * \brief Private slot activated when find-next is requested.
+ */
+void TypeAheadFindBar::findNext()
+{
+	d->doFind();
+}
+
+/**
+ * \brief Private slot activated when find-prev is requested.
+ */
+void TypeAheadFindBar::findPrevious()
+{
+	d->doFind(true);
+}
+
+/**
+ * \brief Private slot activated when case-sensitive box is toggled.
+ */
+void TypeAheadFindBar::caseToggled(int state)
+{
+	d->caseSensitive = (state == Qt::Checked);
+}
--- /dev/null
+++ git/src/widgets/typeaheadfind.h
@@ -0,0 +1,69 @@
+/*
+ * typeaheadfind.h - Typeahead find toolbar
+ * Copyright (C) 2006  Maciej Niedzielski
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#ifndef TYPEAHEADFIND_H
+#define TYPEAHEADFIND_H
+
+#include <QToolBar>
+
+#ifdef WEBKIT
+#include <webview.h>
+#endif
+
+class QTextEdit;
+class QString;
+
+class TypeAheadFindBar : public QToolBar
+{
+	Q_OBJECT
+public:
+	enum Type {
+		TextEditType,
+		WebViewType
+	};
+
+	TypeAheadFindBar(QTextEdit *textedit, const QString &title, QWidget *parent = 0);
+#ifdef WEBKIT
+	TypeAheadFindBar(WebView *webView, const QString &title, QWidget *parent = 0);
+#endif
+	~TypeAheadFindBar();
+	void init();
+
+public slots:
+	void open();
+	void close();
+	void toggleVisibility();
+	void optionsUpdate();
+
+signals:
+	void visibilityChanged(bool visible);
+
+private slots:
+	void textChanged(const QString &);
+	void findNext();
+	void findPrevious();
+	void caseToggled(int);
+
+private:
+	class Private;
+	Private *d;
+};
+
+#endif
--- git.orig/src/widgets/widgets.pri
+++ git/src/widgets/widgets.pri
@@ -16,7 +16,9 @@ SOURCES += \
 	$$PWD/psitiplabel.cpp \
 	$$PWD/psitabwidget.cpp \
 	$$PWD/psitabbar.cpp \
-	$$PWD/actionlineedit.cpp
+	$$PWD/actionlineedit.cpp \
+	$$PWD/typeaheadfind.cpp
+
 
 HEADERS += \
 	$$PWD/stretchwidget.h \
@@ -41,7 +43,8 @@ HEADERS += \
 	$$PWD/psitiplabel.h \
 	$$PWD/psitabwidget.h \
 	$$PWD/psitabbar.h \
-	$$PWD/actionlineedit.h
+	$$PWD/actionlineedit.h \
+	$$PWD/typeaheadfind.h
 
 # to remove dependency on iconset and stuff
 #DEFINES += WIDGET_PLUGIN
