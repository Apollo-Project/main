--- psi.orig/src/contactlistproxymodel.cpp
+++ psi/src/contactlistproxymodel.cpp
@@ -158,6 +158,7 @@ bool ContactListProxyModel::lessThan(con
 void ContactListProxyModel::filterParametersChanged()
 {
 	invalidateFilter();
+	emit recalculateSize();
 }
 
 void ContactListProxyModel::updateSorting()
--- psi.orig/src/contactlistproxymodel.h
+++ psi/src/contactlistproxymodel.h
@@ -36,6 +36,9 @@ public:
 public slots:
 	void updateSorting();
 
+signals:
+	void recalculateSize();
+
 protected:
 	bool filterAcceptsRow(int sourceRow, const QModelIndex& sourceParent) const;
 	bool lessThan(const QModelIndex& left, const QModelIndex& right) const;
--- psi.orig/src/psicontactlistview.cpp
+++ psi/src/psicontactlistview.cpp
@@ -21,17 +21,143 @@
 #include "psicontactlistview.h"
 
 #include <QHelpEvent>
+#include <QLayout>
+#include <QApplication>
+#include <QDesktopWidget>
+#include <QTimer>
 
 #include "psicontactlistviewdelegate.h"
 #include "psitooltip.h"
 #include "psioptions.h"
 #include "contactlistmodel.h"
+#include "contactlistproxymodel.h"
+
+static const int recalculateTimerTimeout = 2000;
+
+class PsiContactListView::Private : public QObject
+{
+	Q_OBJECT
+public:
+	Private(PsiContactListView* p)
+		: QObject(p)
+		, allowAutoresize(false)
+		, lv(p)
+	{
+		recalculateSizeTimer = new QTimer(this);
+		recalculateSizeTimer->setInterval(recalculateTimerTimeout);
+		connect(recalculateSizeTimer, SIGNAL(timeout()), SLOT(doRecalculateSize()));
+	}
+
+	bool allowResize() const
+	{
+		if ( !allowAutoresize )
+			return false;
+
+		if ( lv->window()->isMaximized() )
+			return false;
+
+		return true;
+	}
+
+	int calculateHeight(const QModelIndex &parent) const
+	{
+		int height = 0;
+		int count = lv->model()->rowCount(parent);
+		for(int i = 0; i < count; i++) {
+			QModelIndex in = lv->model()->index(i, 0, parent);
+			if(!lv->isIndexHidden(in)) {
+				height += lv->sizeHintForIndex(in).height();
+				if(lv->isExpanded(in)) {
+					height += calculateHeight(in);
+				}
+			}
+		}
+		return height;
+	}
+
+private slots:
+	void doRecalculateSize()
+	{
+		recalculateSizeTimer->stop();
+
+		if( !allowResize() || !lv->updatesEnabled() || !lv->isVisible() ) {
+			return;
+		}
+
+		int dh = lv->sizeHint().height() - lv->size().height();
+
+		if ( dh != 0 ) {
+			QWidget *topParent = lv->window();
+			topParent->layout()->setEnabled( false ); // try to reduce some flicker
+
+			const QRect topParentRect = topParent->frameGeometry();
+			const QRect desktop = qApp->desktop()->availableGeometry(topParent);
+
+			int newHeight = topParent->height() + dh;
+			if( newHeight > desktop.height() ) {
+				const int diff = newHeight - desktop.height();
+				newHeight -= diff;
+				dh -= diff;
+			}
+
+			if ( (topParentRect.bottom() + dh) > desktop.bottom() ) {
+				int dy = desktop.bottom() - topParentRect.height() - dh;
+				if ( dy < desktop.top() ) {
+					newHeight -= abs( dy - desktop.top() );
+					topParent->move( topParent->x(), desktop.top() );
+				}
+			}
+			if ( determineAutoRosterSizeGrowSide()
+			     && topParentRect.top() > desktop.top()
+			     && topParentRect.bottom() < desktop.bottom() ) {
+				topParent->move( topParent->x(), topParent->y() - dh );
+			}
+			if ( topParent->frameGeometry().top() < desktop.top() ) {
+				topParent->move(topParent->x(), desktop.top());
+			}
+			topParent->resize( topParent->width(), newHeight );
+
+			topParent->layout()->setEnabled( true );
+
+			// issue a layout update
+			lv->parentWidget()->layout()->update();
+		}
+	}
+
+public slots:
+	void recalculateSize()
+	{
+		recalculateSizeTimer->start();
+	}
+
+private:
+	bool determineAutoRosterSizeGrowSide()
+	{
+		const QRect topParent = lv->window()->frameGeometry();
+		const QRect desktop = qApp->desktop()->availableGeometry(lv->window());
+
+		int top_offs    = abs( desktop.top()    - topParent.top() );
+		int bottom_offs = abs( desktop.bottom() - topParent.bottom() );
+
+		return (bottom_offs < top_offs);
+	}
+
+public:
+	bool allowAutoresize;
+	PsiContactListView* lv;
+	QTimer* recalculateSizeTimer;
+};
 
 PsiContactListView::PsiContactListView(QWidget* parent)
 	: ContactListDragView(parent)
 {
 	setIndentation(4);
 	setItemDelegate(new PsiContactListViewDelegate(this));
+
+	d = new Private(this);
+
+	connect(this, SIGNAL(expanded(QModelIndex)), d, SLOT(recalculateSize()));
+	connect(this, SIGNAL(collapsed(QModelIndex)), d, SLOT(recalculateSize()));
 }
 
 PsiContactListViewDelegate* PsiContactListView::itemDelegate() const
@@ -53,6 +179,9 @@ void PsiContactListView::setModel(QAbstr
 	if (dynamic_cast<ContactListModel*>(connectToModel)) {
 		connect(connectToModel, SIGNAL(contactAlert(const QModelIndex&)), SLOT(contactAlert(const QModelIndex&)));
 	}
+	if (dynamic_cast<ContactListProxyModel*>(model)) {
+		connect(model, SIGNAL(recalculateSize()), d, SLOT(recalculateSize()));
+	}
 }
 
 void PsiContactListView::contactAlert(const QModelIndex& realIndex)
@@ -73,3 +202,32 @@ void PsiContactListView::doItemsLayoutSt
 	ContactListDragView::doItemsLayoutStart();
 	itemDelegate()->clearAlerts();
 }
+
+void PsiContactListView::setAutoResizeEnabled(bool enabled)
+{
+	d->allowAutoresize = enabled;
+}
+
+QSize PsiContactListView::minimumSizeHint() const
+{
+	return QSize( minimumWidth(), minimumHeight() );
+}
+
+QSize PsiContactListView::sizeHint() const
+{
+	// save some CPU
+	if ( !d->allowResize() )
+		return minimumSizeHint();
+
+	QSize s(QTreeView::sizeHint().width(), 0);
+	const int border = 8;
+	int h = border + d->calculateHeight(rootIndex());
+
+	int minH = minimumSizeHint().height();
+	if ( h < minH )
+		h = minH + border;
+	s.setHeight( h );
+	return s;
+}
+
+#include "psicontactlistview.moc"
--- psi.orig/src/psicontactlistview.h
+++ psi/src/psicontactlistview.h
@@ -36,6 +36,11 @@ public:
 	// reimplemented
 	void setModel(QAbstractItemModel* model);
 
+	virtual QSize minimumSizeHint() const;
+	virtual QSize sizeHint() const;
+
+	void setAutoResizeEnabled(bool enabled);
+
 protected slots:
 	void contactAlert(const QModelIndex&);
 
@@ -45,6 +50,10 @@ protected:
 	virtual void doItemsLayoutStart();
 
 	PsiContactListViewDelegate* itemDelegate() const;
+
+private:
+	class Private;
+	Private* d;
 };
 
 #endif
--- psi.orig/src/psirosterwidget.cpp
+++ psi/src/psirosterwidget.cpp
@@ -49,6 +49,7 @@ static const QString showSelfOptionPath 
 static const QString showStatusMessagesOptionPath = "options.ui.contactlist.status-messages.show";
 static const QString showScrollBarOptionPath = "options.ui.contactlist.disable-scrollbar";
 static const QString enableGroupsOptionPath = "options.ui.contactlist.enable-groups";
+static const QString allowAutoResizeOptionPath = "options.ui.contactlist.automatically-resize-roster";
 
 //----------------------------------------------------------------------------
 // PsiRosterFilterProxyModel
@@ -177,6 +178,7 @@ void PsiRosterWidget::setContactList(Psi
 	optionChanged(showSelfOptionPath);
 	optionChanged(showOfflineOptionPath);
 	optionChanged(contactSortStyleOptionPath);
+	optionChanged(allowAutoResizeOptionPath);
 
 	contactListModel_ = new PsiContactListModel(contactList_);
 	contactListModel_->invalidateLayout();
@@ -243,6 +245,9 @@ void PsiRosterWidget::optionChanged(cons
 	else if (option == enableGroupsOptionPath) {
 		contactListModel_->setGroupsEnabled(PsiOptions::instance()->getOption(enableGroupsOptionPath).toBool());
 	}
+	else if (option == allowAutoResizeOptionPath) {
+		contactListPageView_->setAutoResizeEnabled(PsiOptions::instance()->getOption(allowAutoResizeOptionPath).toBool());
+	}
 }
 
 void PsiRosterWidget::removeSelection(QMimeData* selection)
