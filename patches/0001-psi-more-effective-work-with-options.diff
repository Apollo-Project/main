diff --git a/src/chatdlg.cpp b/src/chatdlg.cpp
--- a/src/chatdlg.cpp
+++ b/src/chatdlg.cpp
@@ -241,14 +241,15 @@ bool ChatDlg::readyToHide()
 	keepOpen_ = false; // tabdlg calls readyToHide twice on tabdlg close, only display message once.
 
 	// destroy the dialog if delChats is dcClose
-	if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "instant") {
+	QString del = PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString();
+	if (del == "instant") {
 		setAttribute(Qt::WA_DeleteOnClose);
 	}
 	else {
-		if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "hour") {
+		if (del == "hour") {
 			setSelfDestruct(60);
 		}
-		else if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "day") {
+		else if (del == "day") {
 			setSelfDestruct(60 * 24);
 		}
 	}
@@ -513,15 +514,16 @@ void ChatDlg::optionsUpdate()
 	setShortcuts();
 
 	if (!isTabbed() && isHidden()) {
-		if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "instant") {
+		QString del = PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString();
+		if (del == "instant") {
 			deleteLater();
 			return;
 		}
 		else {
-			if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "hour") {
+			if (del == "hour") {
 				setSelfDestruct(60);
 			}
-			else if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "day") {
+			else if (del == "day") {
 				setSelfDestruct(60 * 24);
 			}
 			else {
diff --git a/src/groupchatdlg.cpp b/src/groupchatdlg.cpp
--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -570,8 +570,6 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	connect(account(), SIGNAL(updatedActivity()), SLOT(pa_updatedActivity()));
 	d->mucManager = new MUCManager(account()->client(), jid());
 
-	options_ = PsiOptions::instance();
-
 	d->pending = 0;
 	d->connecting = false;
 
@@ -1166,6 +1164,7 @@ void GCMainDlg::presence(const QString &nick, const Status &s)
 		d->act_configure->setEnabled(s.mucItem().affiliation() >= MUCItem::Member);
 	}
 
+	PsiOptions *options_ = PsiOptions::instance();
 
 	if(s.isAvailable()) {
 		// Available
@@ -1353,12 +1352,13 @@ void GCMainDlg::message(const Message &_m)
 		d->nonAnonymous = false;
 	}
 
+	PsiOptions *options = PsiOptions::instance();
 	if(!m.subject().isNull()) {
 		QString subject = m.subject();
 		d->topic = subject;
 		QString subjectTooltip = TextUtil::plain2rich(subject);
 		subjectTooltip = TextUtil::linkify(subjectTooltip);
-		if(PsiOptions::instance()->getOption("options.ui.emoticons.use-emoticons").toBool()) {
+		if(options->getOption("options.ui.emoticons.use-emoticons").toBool()) {
 			subjectTooltip = TextUtil::emoticonify(subjectTooltip);
 		}
 		ui_.le_topic->setText(subject.replace("\n\n", " || ").replace("\n", " | ").replace("\t", " ").replace(QRegExp("\\s{2,}"), " "));
@@ -1392,8 +1392,8 @@ void GCMainDlg::message(const Message &_m)
 	if (m.body().left(d->self.length()) == d->self)
 		d->lastReferrer = m.from().resource();
 
-	if(PsiOptions::instance()->getOption("options.ui.muc.use-highlighting").toBool()) {
-		QStringList highlightWords = PsiOptions::instance()->getOption("options.ui.muc.highlight-words").toStringList();
+	if(options->getOption("options.ui.muc.use-highlighting").toBool()) {
+		QStringList highlightWords = options->getOption("options.ui.muc.highlight-words").toStringList();
 		foreach (QString word, highlightWords) {
 			if(m.body().contains((word), Qt::CaseInsensitive)) {
 				alert = true;
@@ -1407,10 +1407,10 @@ void GCMainDlg::message(const Message &_m)
 			account()->playSound(PsiAccount::eSend);
 	}
 	else {
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
+		if(alert || (options->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
 			account()->playSound(PsiAccount::eGroupChat);
 
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
+		if(alert || (options->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
 			if (!m.spooled() && !isActiveTab() && !m.from().resource().isEmpty()) {
 				XMPP::Jid jid = m.from()/*.withDomain("")*/;
 				MessageEvent *e = new MessageEvent(m, account());
@@ -1484,9 +1484,8 @@ void GCMainDlg::appendSysMsg(const MessageView &mv)
 void GCMainDlg::appendMessage(const Message &m, bool alert)
 {
 	MessageView mv(MessageView::Message);
-	if (m.containsHTML() && PsiOptions::instance()
-							->getOption("options.html.muc.render").toBool() &&
-							!m.html().text().isEmpty()) {
+	if (m.containsHTML() && PsiOptions::instance()->getOption("options.html.muc.render").toBool() &&
+					!m.html().text().isEmpty()) {
 		mv.setHtml(m.html().toString("span"));
 	} else {
 		mv.setPlainText(m.body());
diff --git a/src/groupchatdlg.h b/src/groupchatdlg.h
--- a/src/groupchatdlg.h
+++ b/src/groupchatdlg.h
@@ -151,7 +151,6 @@ private:
 
 	void contextMenuEvent(QContextMenuEvent *);
 
-	PsiOptions* options_;
 };
 
 class GCFindDlg : public QDialog
diff --git a/src/psiaccount.cpp b/src/psiaccount.cpp
--- a/src/psiaccount.cpp
+++ b/src/psiaccount.cpp
@@ -359,7 +359,6 @@ public:
 		, selfContact(0)
 		, psi(0)
 		, account(parent)
-		, options(0)
 		, client(0)
 		, eventQueue(0)
 		, xmlConsole(0)
@@ -406,7 +405,6 @@ public:
 	PsiSelfContact* selfContact;
 	PsiCon *psi;
 	PsiAccount *account;
-	PsiOptions *options;
 	Client *client;
 	UserAccount acc;
 	Jid jid, nextJid;
@@ -986,7 +984,6 @@ PsiAccount::PsiAccount(const UserAccount &acc, PsiContactList *parent, CapsRegis
 	d->contactList = parent;
 	d->tabManager = tabManager;
 	d->psi = parent->psi();
-	d->options = PsiOptions::instance();
 	d->client = 0;
 	d->userCounter = 0;
 	d->avatarFactory = 0;
@@ -1226,7 +1223,7 @@ PsiAccount::PsiAccount(const UserAccount &acc, PsiContactList *parent, CapsRegis
 	}
 
 	// Extended presence
-	if (d->options->getOption("options.extended-presence.notify").toBool()) {
+	if (PsiOptions::instance()->getOption("options.extended-presence.notify").toBool()) {
 		QStringList pepNodes;
 		pepNodes += "http://jabber.org/protocol/mood+notify";
 		pepNodes += "http://jabber.org/protocol/tune+notify";
@@ -1665,7 +1662,7 @@ void PsiAccount::forceDisconnect(bool fast, const XMPP::Status &s)
 
 	if(loggedIn()) {
 		// Extended Presence
-		if (d->options->getOption("options.extended-presence.tune.publish").toBool() && !d->lastTune.isNull())
+		if (PsiOptions::instance()->getOption("options.extended-presence.tune.publish").toBool() && !d->lastTune.isNull())
 			publishTune(Tune());
 
 		d->client->removeExtension("ep");
@@ -2234,7 +2231,7 @@ void PsiAccount::setPEPAvailable(bool b)
 	}
 
 	// Publish current tune information
-	if (b && d->psi->tuneManager() && d->options->getOption("options.extended-presence.tune.publish").toBool()) {
+	if (b && d->psi->tuneManager() && PsiOptions::instance()->getOption("options.extended-presence.tune.publish").toBool()) {
 		Tune current = d->psi->tuneManager()->currentTune();
 		if (!current.isNull())
 			publishTune(current);
@@ -2655,11 +2652,12 @@ void PsiAccount::processIncomingMessage(const Message &_m)
 		m.setType("chat");
 	}
 	else if (m.type() != "headline" && m.invite().isEmpty() && m.mucInvites().isEmpty()) {
-		if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "message")
+		const QString type = PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString();
+		if (type == "message")
 			m.setType("");
-		else if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "chat")
+		else if (type == "chat")
 			m.setType("chat");
-		else if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "current-open") {
+		else if (type == "current-open") {
 			if (c != NULL && !c->isHidden())
 				m.setType("chat");
 			else
@@ -2957,7 +2955,7 @@ void PsiAccount::tuneStopped()
 
 void PsiAccount::tunePlaying(const Tune& tune)
 {
-	if (loggedIn() && d->options->getOption("options.extended-presence.tune.publish").toBool()) {
+	if (loggedIn() && PsiOptions::instance()->getOption("options.extended-presence.tune.publish").toBool()) {
 		publishTune(tune);
 	}
 }
@@ -4576,6 +4574,7 @@ void PsiAccount::createNewPluginEvent(const QString &jid, const QString &descr,
 // handle an incoming event
 void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 {
+	PsiOptions *o = PsiOptions::instance();
 	if (e && activationType != FromXml) {
 		setEnabled();
 	}
@@ -4671,7 +4670,7 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 			return;
 		}
 		else if (m.messageReceipt() == ReceiptReceived) {
-			if (PsiOptions::instance()->getOption("options.ui.notifications.request-receipts").toBool()) {
+			if (o->getOption("options.ui.notifications.request-receipts").toBool()) {
 				ChatDlg *c = findChatDialog(e->from());
 				if (!c) {
 					c = findChatDialog(e->jid());
@@ -4686,7 +4685,7 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 
 		// Pass message events to chat window
 		if ((m.containsEvents() || m.chatState() != StateNone) && m.body().isEmpty()) {
-			if (PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool()) {
+			if (o->getOption("options.messages.send-composing-events").toBool()) {
 				ChatDlg *c = findChatDialog(e->from());
 				if (!c) {
 					c = findChatDialog(e->jid());
@@ -4726,7 +4725,7 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 #endif
 				c->incomingMessage(m);
 				soundType = eChat2;
-				if(PsiOptions::instance()->getOption("options.ui.chat.alert-for-already-open-chats").toBool() && !c->isActiveTab()) {
+				if(o->getOption("options.ui.chat.alert-for-already-open-chats").toBool() && !c->isActiveTab()) {
 					// to alert the chat also, we put it in the queue
 					me->setSentToChatWindow(true);
 				}
@@ -4733,7 +4732,7 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 				else {
 					putToQueue = false;
 #ifdef YAPSI
-					if (!d->noPopup(activationType) && PsiOptions::instance()->getOption("options.ui.chat.auto-popup").toBool()) {
+					if (!d->noPopup(activationType) && o->getOption("options.ui.chat.auto-popup").toBool()) {
 						openChat(e->from(), activationType);
 					}
 #endif
@@ -4814,7 +4813,7 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 			}
 			else if (userListItem && userListItem->inList()) {
 #else
-			if(PsiOptions::instance()->getOption("options.subscriptions.automatically-allow-authorization").toBool()) {
+			if(o->getOption("options.subscriptions.automatically-allow-authorization").toBool()) {
 #endif
 				// Check if we want to request auth as well
 				UserListItem *u = d->userList.find(ae->from());
@@ -4828,7 +4827,7 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 			}
 		}
 		else if(ae->authType() == "subscribed") {
-			if(!PsiOptions::instance()->getOption("options.ui.notifications.successful-subscription").toBool())
+			if(!o->getOption("options.ui.notifications.successful-subscription").toBool())
 				putToQueue = false;
 		}
 		else if(ae->authType() == "unsubscribe") {
@@ -4854,12 +4853,12 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 			r = *(u->priority());
 		}
 
-		if ((popupType == PopupManager::AlertChat      && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-chat").toBool())     ||
-		    (popupType == PopupManager::AlertMessage   && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-message").toBool())  ||
-		    (popupType == PopupManager::AlertHeadline  && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-headline").toBool()) ||
-		    (popupType == PopupManager::AlertFile      && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-file-transfer").toBool()) ||
-		    (popupType == PopupManager::AlertAvCall    && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-message").toBool()) ||
-		    (popupType == PopupManager::AlertComposing && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.composing").toBool()))
+		if ((popupType == PopupManager::AlertChat      && o->getOption("options.ui.notifications.passive-popups.incoming-chat").toBool())     ||
+		    (popupType == PopupManager::AlertMessage   && o->getOption("options.ui.notifications.passive-popups.incoming-message").toBool())  ||
+		    (popupType == PopupManager::AlertHeadline  && o->getOption("options.ui.notifications.passive-popups.incoming-headline").toBool()) ||
+		    (popupType == PopupManager::AlertFile      && o->getOption("options.ui.notifications.passive-popups.incoming-file-transfer").toBool()) ||
+		    (popupType == PopupManager::AlertAvCall    && o->getOption("options.ui.notifications.passive-popups.incoming-message").toBool()) ||
+		    (popupType == PopupManager::AlertComposing && o->getOption("options.ui.notifications.passive-popups.composing").toBool()))
 		{
 			psi()->popupManager()->doPopup(this, popupType, j, r, u, e, false);
 		}
@@ -5288,7 +5287,7 @@ bool PsiAccount::groupChatJoin(const QString &host, const QString &room, const Q
 		Status s = d->loginStatus;
 		s.setXSigned("");
 
-		return d->client->groupChatJoin(host, room, nick, pass, d->options->getOption("options.muc.context.maxchars").toInt(), d->options->getOption("options.muc.context.maxstanzas").toInt(), d->options->getOption("options.muc.context.seconds").toInt(), since, s);
+		return d->client->groupChatJoin(host, room, nick, pass, PsiOptions::instance()->getOption("options.muc.context.maxchars").toInt(), PsiOptions::instance()->getOption("options.muc.context.maxstanzas").toInt(), PsiOptions::instance()->getOption("options.muc.context.seconds").toInt(), since, s);
 	}
 }
 
@@ -5772,11 +5771,12 @@ void PsiAccount::processEncryptedMessageDone()
 
 void PsiAccount::optionsUpdate()
 {
+	PsiOptions *o = PsiOptions::instance();
 	profileUpdateEntry(d->self);
 
 	// Tune
 #ifdef USE_PEP // Tune cleaning not working. It's implemented in psicon.cpp in PsiCon::optionChanged
-	bool publish = d->options->getOption("options.extended-presence.tune.publish").toBool();
+	bool publish = o->getOption("options.extended-presence.tune.publish").toBool();
 	if (!d->lastTune.isNull() && !publish) {
 		publishTune(Tune());
 	}
@@ -5788,19 +5788,19 @@ void PsiAccount::optionsUpdate()
 #endif
 
 	// Chat states
-	setSendChatState(PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool());
+	setSendChatState(o->getOption("options.messages.send-composing-events").toBool());
 
 	//Receipts
-	setReceipts(PsiOptions::instance()->getOption("options.ui.notifications.send-receipts").toBool()); //FIXME second presence?
+	setReceipts(o->getOption("options.ui.notifications.send-receipts").toBool()); //FIXME second presence?
 
 	// Remote Controlling
-	setRCEnabled(PsiOptions::instance()->getOption("options.external-control.adhoc-remote-control.enable").toBool());
+	setRCEnabled(o->getOption("options.external-control.adhoc-remote-control.enable").toBool());
 
 	// Roster item exchange
-	d->rosterItemExchangeTask->setIgnoreNonRoster(PsiOptions::instance()->getOption("options.messages.ignore-non-roster-contacts").toBool());
+	d->rosterItemExchangeTask->setIgnoreNonRoster(o->getOption("options.messages.ignore-non-roster-contacts").toBool());
 
 	// Caps manager
-	d->capsManager->setEnabled(PsiOptions::instance()->getOption("options.service-discovery.enable-entity-capabilities").toBool());
+	d->capsManager->setEnabled(o->getOption("options.service-discovery.enable-entity-capabilities").toBool());
 }
 
 
diff --git a/src/psicon.cpp b/src/psicon.cpp
--- a/src/psicon.cpp
+++ b/src/psicon.cpp
@@ -456,7 +456,7 @@ bool PsiCon::init()
 #ifdef HAVE_SPARKLE
 	d->autoUpdater = new SparkleAutoUpdater(ApplicationInfo::getAppCastURL());
 #endif
-	if (d->autoUpdater && PsiOptions::instance()->getOption("options.auto-update.check-on-startup").toBool()) {
+	if (d->autoUpdater && options->getOption("options.auto-update.check-on-startup").toBool()) {
 		d->autoUpdater->checkForUpdates();
 	}
 
@@ -529,8 +529,8 @@ bool PsiCon::init()
 	Anim::setMainThread(QThread::currentThread());
 
 	// setup the main window
-	d->mainwin = new MainWin(PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool(), (PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() && PsiOptions::instance()->getOption("options.contactlist.use-toolwindow").toBool()), this);
-	d->mainwin->setUseDock(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool());
+	d->mainwin = new MainWin(options->getOption("options.ui.contactlist.always-on-top").toBool(), (options->getOption("options.ui.systemtray.enable").toBool() && options->getOption("options.contactlist.use-toolwindow").toBool()), this);
+	d->mainwin->setUseDock(options->getOption("options.ui.systemtray.enable").toBool());
 	d->bossKey = new BossKey(d->mainwin);
 
 	Q_UNUSED(psiConObject);
@@ -555,8 +555,8 @@ bool PsiCon::init()
 	d->mainwin->setGeometryOptionPath("options.ui.contactlist.saved-window-geometry");
 
 	if (result &&
-		!(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() &&
-		  PsiOptions::instance()->getOption("options.contactlist.hide-on-start").toBool()))
+	    !(options->getOption("options.ui.systemtray.enable").toBool() &&
+	      options->getOption("options.contactlist.hide-on-start").toBool()))
 	{
 		d->mainwin->show();
 	}
@@ -643,15 +643,17 @@ bool PsiCon::init()
 		}
 
 		// Disable accounts if necessary, and overwrite locked properties
-		if (PsiOptions::instance()->getOption("options.ui.account.single").toBool() || !PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty()) {
+		bool single = options->getOption("options.ui.account.single").toBool();
+		QString domain = options->getOption("options.account.domain").toString();
+		if (single || !domain.isEmpty()) {
 			bool haveEnabled = false;
 			for(UserAccountList::Iterator it = accs.begin(); it != accs.end(); ++it) {
 				// With single accounts, only modify the first account
-				if (PsiOptions::instance()->getOption("options.ui.account.single").toBool()) {
+				if (single) {
 					if (!haveEnabled) {
 						haveEnabled = it->opt_enabled;
 						if (it->opt_enabled) {
-							if (!PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty())
+							if (!domain.isEmpty())
 								it->jid = JIDUtil::accountFromString(Jid(it->jid).node()).bare();
 						}
 					}
@@ -660,7 +662,7 @@ bool PsiCon::init()
 				}
 				else {
 					// Overwirte locked properties
-					if (!PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty())
+					if (!domain.isEmpty())
 						it->jid = JIDUtil::accountFromString(Jid(it->jid).node()).bare();
 				}
 			}
@@ -677,7 +679,7 @@ bool PsiCon::init()
 	}
 
 	// show tip of the day
-	if ( PsiOptions::instance()->getOption("options.ui.tip.show").toBool() ) {
+	if ( options->getOption("options.ui.tip.show").toBool() ) {
 		TipDlg::show(this);
 	}
 
@@ -695,11 +697,11 @@ bool PsiCon::init()
 
 	if(AvCallManager::isSupported()) {
 		options_avcall_update();
-		AvCallManager::setAudioOutDevice(PsiOptions::instance()->getOption("options.media.devices.audio-output").toString());
-		AvCallManager::setAudioInDevice(PsiOptions::instance()->getOption("options.media.devices.audio-input").toString());
-		AvCallManager::setVideoInDevice(PsiOptions::instance()->getOption("options.media.devices.video-input").toString());
-		AvCallManager::setBasePort(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt());
-		AvCallManager::setExternalAddress(PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString());
+		AvCallManager::setAudioOutDevice(options->getOption("options.media.devices.audio-output").toString());
+		AvCallManager::setAudioInDevice(options->getOption("options.media.devices.audio-input").toString());
+		AvCallManager::setVideoInDevice(options->getOption("options.media.devices.video-input").toString());
+		AvCallManager::setBasePort(options->getOption("options.p2p.bytestreams.listen-port").toInt());
+		AvCallManager::setExternalAddress(options->getOption("options.p2p.bytestreams.external-address").toString());
 	}
 
 
@@ -1336,10 +1338,10 @@ void PsiCon::optionChanged(const QString& option)
 void PsiCon::slotApplyOptions()
 {
 	PsiIconset::instance()->reloadRoster();
+	PsiOptions *o = PsiOptions::instance();
 
 #ifndef Q_OS_MAC
-	PsiOptions *o = PsiOptions::instance();
-	if (!PsiOptions::instance()->getOption("options.ui.contactlist.show-menubar").toBool()) {
+	if (!o->getOption("options.ui.contactlist.show-menubar").toBool()) {
 		// check if all toolbars are disabled
 		bool toolbarsVisible = false;
 		foreach(QString base, o->getChildOptionNames("options.ui.contactlist.toolbars", true, true)) {
@@ -1354,7 +1356,7 @@ void PsiCon::slotApplyOptions()
 			QMessageBox::warning(0, tr("Warning"),
 				tr("You can not disable <i>all</i> toolbars <i>and</i> the menubar. If you do so, you will be unable to enable them back, when you'll change your mind."),
 				tr("I understand"));
-			PsiOptions::instance()->setOption("options.ui.contactlist.show-menubar", true);
+			o->setOption("options.ui.contactlist.show-menubar", true);
 		}
 	}
 #endif
@@ -1362,16 +1364,16 @@ void PsiCon::slotApplyOptions()
 	updateS5BServerAddresses();
 
 	if(AvCallManager::isSupported()) {
-		AvCallManager::setAudioOutDevice(PsiOptions::instance()->getOption("options.media.devices.audio-output").toString());
-		AvCallManager::setAudioInDevice(PsiOptions::instance()->getOption("options.media.devices.audio-input").toString());
-		AvCallManager::setVideoInDevice(PsiOptions::instance()->getOption("options.media.devices.video-input").toString());
-		AvCallManager::setBasePort(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt());
-		AvCallManager::setExternalAddress(PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString());
+		AvCallManager::setAudioOutDevice(o->getOption("options.media.devices.audio-output").toString());
+		AvCallManager::setAudioInDevice(o->getOption("options.media.devices.audio-input").toString());
+		AvCallManager::setVideoInDevice(o->getOption("options.media.devices.video-input").toString());
+		AvCallManager::setBasePort(o->getOption("options.p2p.bytestreams.listen-port").toInt());
+		AvCallManager::setExternalAddress(o->getOption("options.p2p.bytestreams.external-address").toString());
 	}
 
 	// mainwin stuff
-	d->mainwin->setWindowOpts(PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool(), (PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() && PsiOptions::instance()->getOption("options.contactlist.use-toolwindow").toBool()));
-	d->mainwin->setUseDock(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool());
+	d->mainwin->setWindowOpts(o->getOption("options.ui.contactlist.always-on-top").toBool(), (o->getOption("options.ui.systemtray.enable").toBool() && o->getOption("options.contactlist.use-toolwindow").toBool()));
+	d->mainwin->setUseDock(o->getOption("options.ui.systemtray.enable").toBool());
 	d->mainwin->buildToolbars();
 
 	// notify about options change
@@ -1403,9 +1405,10 @@ void PsiCon::queueChanged()
 void PsiCon::startBounce()
 {
 #ifdef Q_OS_MAC
-	if (PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString() != "never") {
+	QString bounce = PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString();
+	if (bounce != "never") {
 		MacDock::startBounce();
-		if (PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString() == "once") {
+		if (bounce == "once") {
 			MacDock::stopBounce();
 		}
 	}
@@ -1463,7 +1466,8 @@ void PsiCon::recentGCAdd(const QString &str)
 	recentList.prepend(str);
 
 	// trim the list if bigger than 10
-	while(recentList.count() > PsiOptions::instance()->getOption("options.muc.recent-joins.maximum").toInt()) {
+	int max = PsiOptions::instance()->getOption("options.muc.recent-joins.maximum").toInt();
+	while(recentList.count() > max) {
 		recentList.takeLast();
 	}
 
@@ -1706,17 +1710,18 @@ void PsiCon::updateS5BServerAddresses()
 		slist += (*hit).toString();
 
 	// add external
-	if(!PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString().isEmpty()) {
+	QString extAddr = PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString();
+	if(!extAddr.isEmpty()) {
 		bool found = false;
 		for(QStringList::ConstIterator sit = slist.begin(); sit != slist.end(); ++sit) {
 			const QString &s = *sit;
-			if(s == PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString()) {
+			if(s == extAddr) {
 				found = true;
 				break;
 			}
 		}
 		if(!found)
-			slist += PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString();
+			slist += extAddr;
 	}
 
 	// set up the server
@@ -1728,9 +1733,10 @@ void PsiCon::s5b_init()
 	if(d->s5bServer->isActive())
 		d->s5bServer->stop();
 
-	if (PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt()) {
-		if(!d->s5bServer->start(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt())) {
-			QMessageBox::warning(0, tr("Warning"), tr("Unable to bind to port %1 for Data Transfer.\nThis may mean you are already running another instance of Psi. You may experience problems sending and/or receiving files.").arg(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt()));
+	int port = PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt();
+	if (port) {
+		if(!d->s5bServer->start(port)) {
+			QMessageBox::warning(0, tr("Warning"), tr("Unable to bind to port %1 for Data Transfer.\nThis may mean you are already running another instance of Psi. You may experience problems sending and/or receiving files.").arg(port));
 		}
 	}
 }
