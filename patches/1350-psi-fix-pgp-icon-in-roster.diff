--- git.orig/src/contactlistmodel.cpp
+++ git/src/contactlistmodel.cpp
@@ -554,6 +554,9 @@ QVariant ContactListModel::contactData(c
 	else if (role == BlockRole) {
 		return QVariant(contact->isBlocked());
 	}
+	else if (role == IsSecureRole) {
+		return QVariant(contact->userListItem().isSecure());
+	}
 #ifdef YAPSI
 	else if (role == Qt::ForegroundRole) {
 		return QVariant(Ya::statusColor(contact->status().type()));
--- git.orig/src/contactlistmodel.h
+++ git/src/contactlistmodel.h
@@ -87,6 +87,7 @@ public:
 		IsMucRole = Qt::UserRole + 29,
 		MucMessagesRole = Qt::UserRole + 30,
 		BlockRole = Qt::UserRole + 31,
+		IsSecureRole = Qt::UserRole + 32,
 
 		// groups
 		ExpandedRole = Qt::UserRole + 12,
--- git.orig/src/psicontactlistviewdelegate.cpp
+++ git/src/psicontactlistviewdelegate.cpp
@@ -356,6 +356,11 @@ void PsiContactListViewDelegate::drawCon
 		rightPixs.push_back(pix);
 		rightWidths.push_back(pix.width());
 	}
+	if (index.data(ContactListModel::IsSecureRole).toBool()) {
+		const QPixmap &pix = IconsetFactory::iconPixmap("psi/pgp");
+		rightPixs.push_back(pix);
+		rightWidths.push_back(pix.width());
+	}
 	}
 
 	if(rightPixs.isEmpty() && mucMessages.isEmpty())
@@ -392,29 +397,6 @@ void PsiContactListViewDelegate::drawCon
 			painter->drawPixmap(iconRect.topRight(), pix);
 		}
 	}
-
-#if 0
-	int x;
-	if (d->status_single)
-		x = widthUsed();
-	else {
-		QFontMetrics fm(p->font());
-		const QPixmap *pix = pixmap(column);
-		x = fm.width(text(column)) + (pix ? pix->width() : 0) + 8;
-	}
-
-	if (d->u) {
-		UserResourceList::ConstIterator it = d->u->priority();
-		if (it != d->u->userResourceList().end()) {
-			if (d->u->isSecure((*it).name())) {
-				const QPixmap &pix = IconsetFactory::iconPixmap("psi/cryptoYes");
-				int y = (height() - pix.height()) / 2;
-				p->drawPixmap(x, y, pix);
-				x += 24;
-			}
-		}
-	}
-#endif
 }
 
 void PsiContactListViewDelegate::drawGroup(QPainter* painter, const QStyleOptionViewItem& option, const QModelIndex& index) const
--- git.orig/src/userlist.cpp
+++ git/src/userlist.cpp
@@ -1009,6 +1009,11 @@ void UserListItem::setPrivate(bool b)
 	v_private = b;
 }
 
+bool UserListItem::isSecure() const
+{
+	return !secList.isEmpty();
+}
+
 bool UserListItem::isSecure(const QString &rname) const
 {
 	for(QStringList::ConstIterator it = secList.begin(); it != secList.end(); ++it) {
--- git.orig/src/userlist.h
+++ git/src/userlist.h
@@ -152,6 +152,7 @@ public:
 	const UserResourceList & userResourceList() const;
 	UserResourceList::ConstIterator priority() const;
 
+	bool isSecure() const;
 	bool isSecure(const QString &rname) const;
 	void setSecure(const QString &rname, bool);
 
