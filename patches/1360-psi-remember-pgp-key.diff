--- git.orig/src/passphrasedlg.cpp
+++ git/src/passphrasedlg.cpp
@@ -42,3 +42,7 @@ QString PassphraseDlg::getPassphrase() c
 	return ui_.le_pass->text();
 }
 
+bool PassphraseDlg::rememberPassPhrase() const
+{
+	return ui_.cb_savePass->isChecked();
+}
--- git.orig/src/passphrasedlg.h
+++ git/src/passphrasedlg.h
@@ -32,6 +32,7 @@ public:
 	void promptPassphrase(const QString& name);
 
 	QString getPassphrase() const;
+	bool rememberPassPhrase() const;
 
 private:
 	Ui::Passphrase ui_;
--- git.orig/src/passphrase.ui
+++ git/src/passphrase.ui
@@ -74,6 +74,13 @@ Please enter your passphrase below:</str
                   </property>
                 </widget>
               </item>
+              <item>
+                <widget class="QCheckBox" name="cb_savePass">
+                  <property name="text">
+                    <string>Remember passphrase</string>
+                  </property>
+               </widget>
+              </item>
             </layout>
           </item>
         </layout>
--- git.orig/src/pgputil.cpp
+++ git/src/pgputil.cpp
@@ -92,6 +92,9 @@ void PGPUtil::passphraseDone(int result)
 		QString passphrase = passphraseDlg_->getPassphrase();
 		if (!currentEntryId_.isEmpty()) {
 			passphrases_[currentEntryId_] = passphrase;
+			if(passphraseDlg_->rememberPassPhrase()) {
+				emit newPassPhase(currentEntryId_, passphrase);
+			}
 		}
 		qcaEventHandler_->submitPassword(currentEventId_,passphrase.toUtf8());
 	}
@@ -283,6 +286,11 @@ void PGPUtil::removePassphrase(const QSt
 	passphrases_.remove(id);
 }
 
+void PGPUtil::addPassphrase(const QString &id, const QString &pass)
+{
+	passphrases_.insert(id, pass);
+}
+
 void PGPUtil::keyStoreAvailable(const QString& k)
 {
 	QCA::KeyStore* ks = new QCA::KeyStore(k, &qcaKeyStoreManager_);
--- git.orig/src/pgputil.h
+++ git/src/pgputil.h
@@ -40,9 +40,11 @@ public:
 	bool equals(QCA::PGPKey, QCA::PGPKey);
 
 	void removePassphrase(const QString& id);
+	void addPassphrase(const QString& id, const QString& pass);
 
 signals:
 	void pgpKeysUpdated();
+	void newPassPhase(const QString&, const QString&);
 
 protected:
 	PGPUtil();
--- git.orig/src/profiles.h
+++ git/src/profiles.h
@@ -80,6 +80,7 @@ public:
 	QMap<QString, GroupData> groupState;
 
 	QCA::PGPKey pgpSecretKey;
+	QString pgpPassPhrase;
 
 	VarList keybind;
 
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -1198,6 +1198,7 @@ PsiAccount::PsiAccount(const UserAccount
 	//connect(d->psi, SIGNAL(pgpToggled(bool)), SLOT(pgpToggled(bool)));
 #ifdef HAVE_PGPUTIL
 	connect(&PGPUtil::instance(), SIGNAL(pgpKeysUpdated()), SLOT(pgpKeysUpdated()));
+	connect(&PGPUtil::instance(), SIGNAL(newPassPhase(QString,QString)), SLOT(newPgpPassPhase(QString,QString)));
 #endif
 
 	d->setEnabled(enabled());
@@ -5817,10 +5818,23 @@ void PsiAccount::pgpKeysUpdated()
 #endif
 }
 
+void PsiAccount::newPgpPassPhase(const QString &id, const QString &pass)
+{
+	const QString pgpSecretKeyID = (d->acc.pgpSecretKey.isNull() ? "" : d->acc.pgpSecretKey.keyId());
+	if(pgpSecretKeyID == id) {
+		d->acc.pgpPassPhrase = pass;
+	}
+}
+
 void PsiAccount::trySignPresence()
 {
 	QCA::SecureMessageKey skey;
 	skey.setPGPSecretKey(d->cur_pgpSecretKey);
+#ifdef HAVE_PGPUTIL
+	if(!d->cur_pgpSecretKey.isNull() && !d->acc.pgpPassPhrase.isEmpty()) {
+		PGPUtil::instance().addPassphrase(d->cur_pgpSecretKey.keyId(), d->acc.pgpPassPhrase);
+	}
+#endif
 	QByteArray plain = d->loginStatus.status().toUtf8();
 
 	PGPTransaction *t = new PGPTransaction(new QCA::OpenPGP());
@@ -5844,6 +5858,7 @@ void PsiAccount::pgp_signFinished()
 	else {
 		// Clear passphrase from cache
 		if (t->errorCode() == QCA::SecureMessage::ErrorPassphrase) {
+			d->acc.pgpPassPhrase.clear();
 			QCA::KeyStoreEntry ke = PGPUtil::instance().getSecretKeyStoreEntry(d->cur_pgpSecretKey.keyId());
 			if (!ke.isNull())
 				PGPUtil::instance().removePassphrase(ke.id());
--- git.orig/src/psiaccount.h
+++ git/src/psiaccount.h
@@ -472,6 +472,7 @@ protected:
 private slots:
 	void eventFromXml(const PsiEvent::Ptr &e);
 	void simulateContactOffline(const XMPP::Jid& contact);
+	void newPgpPassPhase(const QString& id, const QString& pass);
 
 private:
 	void handleEvent(const PsiEvent::Ptr &e, ActivationType activationType);
--- git.orig/src/psi_profiles.cpp
+++ git/src/psi_profiles.cpp
@@ -259,6 +259,11 @@ void UserAccount::fromOptions(OptionsTre
 		QCA::KeyStoreEntry e = PGPUtil::instance().getSecretKeyStoreEntry(pgpSecretKeyID);
 		if (!e.isNull())
 			pgpSecretKey = e.pgpSecretKey();
+
+		pgpPassPhrase = o->getOption(base + ".pgp-pass-phrase").toString();
+		if(!pgpPassPhrase.isEmpty()) {
+			pgpPassPhrase = decodePassword(pgpPassPhrase, pgpSecretKeyID);
+		}
 	}
 #endif
 
@@ -389,8 +394,10 @@ void UserAccount::toOptions(OptionsTree
 	o->setOption(base + ".priority", priority);
 	if (!pgpSecretKey.isNull()) {
 		o->setOption(base + ".pgp-secret-key-id", pgpSecretKey.keyId());
+		o->setOption(base + ".pgp-pass-phrase", encodePassword(pgpPassPhrase, pgpSecretKey.keyId()));
 	} else {
 		o->setOption(base + ".pgp-secret-key-id", "");
+		o->setOption(base + ".pgp-pass-phrase", "");
 	}
 	switch (allow_plain) {
 		case XMPP::ClientStream::NoAllowPlain:
@@ -559,6 +566,11 @@ void UserAccount::fromXml(const QDomElem
 		QCA::KeyStoreEntry e = PGPUtil::instance().getSecretKeyStoreEntry(pgpSecretKeyID);
 		if (!e.isNull())
 			pgpSecretKey = e.pgpSecretKey();
+
+		readEntry(a, "passphrase", &pgpPassPhrase);
+		if(!pgpPassPhrase.isEmpty()) {
+			pgpPassPhrase = decodePassword(pgpPassPhrase, pgpSecretKeyID);
+		}
 	}
 #endif
 
