Index: psi/src/passphrasedlg.cpp
===================================================================
--- psi.orig/src/passphrasedlg.cpp	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/passphrasedlg.cpp	2013-01-15 14:04:27.444827078 +0400
@@ -42,3 +42,7 @@
 	return ui_.le_pass->text();
 }

+bool PassphraseDlg::rememberPassPhrase() const
+{
+	return ui_.cb_savePass->isChecked();
+}
Index: psi/src/passphrasedlg.h
===================================================================
--- psi.orig/src/passphrasedlg.h	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/passphrasedlg.h	2013-01-15 14:04:27.444827078 +0400
@@ -32,6 +32,7 @@
 	void promptPassphrase(const QString& name);

 	QString getPassphrase() const;
+	bool rememberPassPhrase() const;

 private:
 	Ui::Passphrase ui_;
Index: psi/src/passphrase.ui
===================================================================
--- psi.orig/src/passphrase.ui	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/passphrase.ui	2013-01-15 14:04:27.444827078 +0400
@@ -74,6 +74,13 @@
                   </property>
                 </widget>
               </item>
+              <item>
+                <widget class="QCheckBox" name="cb_savePass">
+                  <property name="text">
+                    <string>Remember passphrase</string>
+                  </property>
+               </widget>
+              </item>
             </layout>
           </item>
         </layout>
Index: psi/src/pgputil.cpp
===================================================================
--- psi.orig/src/pgputil.cpp	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/pgputil.cpp	2013-01-15 14:04:27.444827078 +0400
@@ -92,6 +92,9 @@
 		QString passphrase = passphraseDlg_->getPassphrase();
 		if (!currentEntryId_.isEmpty()) {
 			passphrases_[currentEntryId_] = passphrase;
+			if(passphraseDlg_->rememberPassPhrase()) {
+				emit newPassPhase(currentEntryId_, passphrase);
+			}
 		}
 		qcaEventHandler_->submitPassword(currentEventId_,passphrase.toUtf8());
 	}
@@ -283,6 +286,11 @@
 	passphrases_.remove(id);
 }

+void PGPUtil::addPassphrase(const QString &id, const QString &pass)
+{
+	passphrases_.insert(id, pass);
+}
+
 void PGPUtil::keyStoreAvailable(const QString& k)
 {
 	QCA::KeyStore* ks = new QCA::KeyStore(k, &qcaKeyStoreManager_);
Index: psi/src/pgputil.h
===================================================================
--- psi.orig/src/pgputil.h	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/pgputil.h	2013-01-15 14:04:27.444827078 +0400
@@ -40,9 +40,11 @@
 	bool equals(QCA::PGPKey, QCA::PGPKey);

 	void removePassphrase(const QString& id);
+	void addPassphrase(const QString& id, const QString& pass);

 signals:
 	void pgpKeysUpdated();
+	void newPassPhase(const QString&, const QString&);

 protected:
 	PGPUtil();
Index: psi/src/profiles.h
===================================================================
--- psi.orig/src/profiles.h	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/profiles.h	2013-01-15 14:04:27.444827078 +0400
@@ -78,6 +78,7 @@
 	QMap<QString, GroupData> groupState;

 	QCA::PGPKey pgpSecretKey;
+	QString pgpPassPhrase;

 	VarList keybind;

Index: psi/src/psiaccount.cpp
===================================================================
--- psi.orig/src/psiaccount.cpp	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/psiaccount.cpp	2013-01-15 14:04:27.444827078 +0400
@@ -1197,6 +1197,7 @@
 	//connect(d->psi, SIGNAL(pgpToggled(bool)), SLOT(pgpToggled(bool)));
 #ifdef HAVE_PGPUTIL
 	connect(&PGPUtil::instance(), SIGNAL(pgpKeysUpdated()), SLOT(pgpKeysUpdated()));
+	connect(&PGPUtil::instance(), SIGNAL(newPassPhase(QString,QString)), SLOT(newPgpPassPhase(QString,QString)));
 #endif

 	d->setEnabled(enabled());
@@ -5785,10 +5786,23 @@
 #endif
 }

+void PsiAccount::newPgpPassPhase(const QString &id, const QString &pass)
+{
+	const QString pgpSecretKeyID = (d->acc.pgpSecretKey.isNull() ? "" : d->acc.pgpSecretKey.keyId());
+	if(pgpSecretKeyID == id) {
+		d->acc.pgpPassPhrase = pass;
+	}
+}
+
 void PsiAccount::trySignPresence()
 {
 	QCA::SecureMessageKey skey;
 	skey.setPGPSecretKey(d->cur_pgpSecretKey);
+#ifdef HAVE_PGPUTIL
+	if(!d->cur_pgpSecretKey.isNull() && !d->acc.pgpPassPhrase.isEmpty()) {
+		PGPUtil::instance().addPassphrase(d->cur_pgpSecretKey.keyId(), d->acc.pgpPassPhrase);
+	}
+#endif
 	QByteArray plain = d->loginStatus.status().toUtf8();

 	PGPTransaction *t = new PGPTransaction(new QCA::OpenPGP());
@@ -5812,6 +5826,7 @@
 	else {
 		// Clear passphrase from cache
 		if (t->errorCode() == QCA::SecureMessage::ErrorPassphrase) {
+			d->acc.pgpPassPhrase.clear();
 			QCA::KeyStoreEntry ke = PGPUtil::instance().getSecretKeyStoreEntry(d->cur_pgpSecretKey.keyId());
 			if (!ke.isNull())
 				PGPUtil::instance().removePassphrase(ke.id());
Index: psi/src/psiaccount.h
===================================================================
--- psi.orig/src/psiaccount.h	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/psiaccount.h	2013-01-15 14:04:27.448827079 +0400
@@ -471,6 +471,7 @@
 private slots:
 	void eventFromXml(PsiEvent* e);
 	void simulateContactOffline(const XMPP::Jid& contact);
+	void newPgpPassPhase(const QString& id, const QString& pass);

 private:
 	void handleEvent(PsiEvent* e, ActivationType activationType);
Index: psi/src/psi_profiles.cpp
===================================================================
--- psi.orig/src/psi_profiles.cpp	2013-01-15 14:04:27.448827079 +0400
+++ psi/src/psi_profiles.cpp	2013-01-15 14:04:27.448827079 +0400
@@ -255,6 +255,11 @@
 		QCA::KeyStoreEntry e = PGPUtil::instance().getSecretKeyStoreEntry(pgpSecretKeyID);
 		if (!e.isNull())
 			pgpSecretKey = e.pgpSecretKey();
+
+		pgpPassPhrase = o->getOption(base + ".pgp-pass-phrase").toString();
+		if(!pgpPassPhrase.isEmpty()) {
+			pgpPassPhrase = decodePassword(pgpPassPhrase, pgpSecretKeyID);
+		}
 	}
 #endif

@@ -382,8 +387,10 @@
 	o->setOption(base + ".priority", priority);
 	if (!pgpSecretKey.isNull()) {
 		o->setOption(base + ".pgp-secret-key-id", pgpSecretKey.keyId());
+		o->setOption(base + ".pgp-pass-phrase", encodePassword(pgpPassPhrase, pgpSecretKey.keyId()));
 	} else {
 		o->setOption(base + ".pgp-secret-key-id", "");
+		o->setOption(base + ".pgp-pass-phrase", "");
 	}
 	switch (allow_plain) {
 		case XMPP::ClientStream::NoAllowPlain:
@@ -554,6 +561,11 @@
 		QCA::KeyStoreEntry e = PGPUtil::instance().getSecretKeyStoreEntry(pgpSecretKeyID);
 		if (!e.isNull())
 			pgpSecretKey = e.pgpSecretKey();
+
+		readEntry(a, "passphrase", &pgpPassPhrase);
+		if(!pgpPassPhrase.isEmpty()) {
+			pgpPassPhrase = decodePassword(pgpPassPhrase, pgpSecretKeyID);
+		}
 	}
 #endif

