--- psi.orig/options/default.xml
+++ psi/options/default.xml
@@ -317,7 +317,6 @@
 				</sounds>
 				<successful-subscription type="bool">false</successful-subscription>
 			</notifications>
-			<remember-window-sizes type="bool">true</remember-window-sizes>
 			<service-discovery>
 				<automatically-get-info type="bool">true</automatically-get-info>
 				<automatically-get-items type="bool">false</automatically-get-items>
--- psi.orig/src/chatdlg.cpp
+++ psi/src/chatdlg.cpp
@@ -80,6 +80,8 @@
 
 #include "psichatdlg.h"
 
+static const QString geometryOption = "options.ui.chat.size";
+
 ChatDlg* ChatDlg::create(const Jid& jid, PsiAccount* account, TabManager* tabManager)
 {
 	ChatDlg* chat = new PsiChatDlg(jid, account, tabManager);
@@ -141,14 +143,6 @@ void ChatDlg::init()
 
 	chatView()->setFocusPolicy(Qt::NoFocus);
 	chatEdit()->setFocus();
-
-	// TODO: port to restoreSavedSize() (and adapt it from restoreSavedGeometry())
-	QSize size = PsiOptions::instance()->getOption("options.ui.chat.size").toSize();
-	if (!size.isEmpty()) {
-		resize(size);
-	} else {
-		resize(defaultSize());
-	}
 }
 
 ChatDlg::~ChatDlg()
@@ -181,9 +175,13 @@ void ChatDlg::initActions()
 	connect(act_scrolldown_, SIGNAL(triggered()), SLOT(scrollDown()));
 }
 
-void ChatDlg::ensureTabbedCorrectly() {
+void ChatDlg::ensureTabbedCorrectly()
+{
 	TabbableWidget::ensureTabbedCorrectly();
 	setShortcuts();
+	if(!isTabbed() && geometryOptionPath().isEmpty()) {
+		setGeometryOptionPath(geometryOption);
+	}
 }
 
 
@@ -210,13 +208,6 @@ void ChatDlg::scrollDown()
 	chatView()->verticalScrollBar()->setValue(chatView()->verticalScrollBar()->value() + chatView()->verticalScrollBar()->pageStep() / 2);
 }
 
-void ChatDlg::resizeEvent(QResizeEvent *e)
-{
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		PsiOptions::instance()->setOption("options.ui.chat.size", e->size());
-	}
-}
-
 void ChatDlg::closeEvent(QCloseEvent *e)
 {
 	if (readyToHide()) {
@@ -385,11 +376,6 @@ const QString& ChatDlg::getDisplayName()
 	return dispNick_;
 }
 
-QSize ChatDlg::defaultSize()
-{
-	return QSize(320, 280);
-}
-
 struct UserStatus {
 	UserStatus()
 			: userListItem(0)
--- psi.orig/src/chatdlg.h
+++ psi/src/chatdlg.h
@@ -63,8 +63,6 @@ public:
 	void setJid(const Jid &);
 	const QString & getDisplayName();
 
-	static QSize defaultSize();
-
 	// reimplemented
 	virtual bool readyToHide();
 	virtual TabbableWidget::State state() const;
@@ -93,7 +91,6 @@ protected:
 
 	// reimplemented
 	void closeEvent(QCloseEvent *);
-	void resizeEvent(QResizeEvent *);
 	void hideEvent(QHideEvent *);
 	void showEvent(QShowEvent *);
 	void dropEvent(QDropEvent* event);
--- psi.orig/src/eventdlg.cpp
+++ psi/src/eventdlg.cpp
@@ -77,6 +77,8 @@
 #endif
 #include "psirichtext.h"
 
+static const QString geometryOption = "options.ui.message.size";
+
 static QString findJid(const QString &s, int x, int *p1, int *p2)
 {
 	// scan backward for the beginning of a Jid
@@ -995,12 +997,8 @@ void EventDlg::init()
 	connect(d->pa, SIGNAL(pgpKeyChanged()), SLOT(updatePGP()));
 	connect(d->pa, SIGNAL(encryptedMessageSent(int, bool, int, const QString &)), SLOT(encryptedMessageSent(int, bool, int, const QString &)));
 
-	bool use = PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool();
-	if (PsiOptions::instance()->getOption("options.ui.message.size").toSize().isValid() && use) {
-		resize(PsiOptions::instance()->getOption("options.ui.message.size").toSize());
-	} else {
-		resize(defaultSize());
-	}
+	setGeometryOptionPath(geometryOption);
+
 	optionsUpdate();
 
 	//ShortcutManager::connect("common.close", this, SLOT(close()));
@@ -1396,11 +1394,6 @@ void EventDlg::optionsUpdate()
 #endif
 }
 
-QSize EventDlg::defaultSize()
-{
-	return QSize(420, 280);
-}
-
 void EventDlg::showEvent(QShowEvent *e)
 {
 	QWidget::showEvent(e);
@@ -1411,13 +1404,6 @@ void EventDlg::showEvent(QShowEvent *e)
 	}
 }
 
-void EventDlg::resizeEvent(QResizeEvent *e)
-{
-	if(PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		PsiOptions::instance()->setOption("options.ui.message.size", e->size());
-	}
-}
-
 void EventDlg::keyPressEvent(QKeyEvent *e)
 {
 	// FIXMEKEY
--- psi.orig/src/eventdlg.h
+++ psi/src/eventdlg.h
@@ -128,8 +128,6 @@ public:
 
 	PsiAccount *psiAccount();
 
-	static QSize defaultSize();
-
 signals:
 	void aChat(const Jid& jid);
 	void aReply(const Jid &jid, const QString &body, const QString &subject, const QString &thread);
@@ -145,7 +143,6 @@ signals:
 protected:
 	// reimplemented
 	void showEvent(QShowEvent *);
-	void resizeEvent(QResizeEvent *);
 	void keyPressEvent(QKeyEvent *);
 	void closeEvent(QCloseEvent *);
 
--- psi.orig/src/groupchatdlg.cpp
+++ psi/src/groupchatdlg.cpp
@@ -92,7 +92,7 @@
 #define MCMDMUC		"http://psi-im.org/ids/mcmd#mucmain"
 #define MCMDMUCNICK	"http://psi-im.org/ids/mcmd#mucnick"
 
-
+static const QString geometryOption = "options.ui.muc.size";
 
 
 //----------------------------------------------------------------------------
@@ -753,7 +753,6 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	X11WM_CLASS("groupchat");
 
 	ui_.mle->chatEdit()->setFocus();
-	resize(PsiOptions::instance()->getOption("options.ui.muc.size").toSize());
 
 	// Connect signals from MUC manager
 	connect(d->mucManager,SIGNAL(action_error(MUCManager::Action, int, const QString&)), SLOT(action_error(MUCManager::Action, int, const QString&)));
@@ -779,7 +778,8 @@ GCMainDlg::~GCMainDlg()
 	delete d;
 }
 
-void GCMainDlg::ensureTabbedCorrectly() {
+void GCMainDlg::ensureTabbedCorrectly()
+{
 	TabbableWidget::ensureTabbedCorrectly();
 	setShortcuts();
 	// QSplitter is broken again, force resize so that
@@ -788,6 +788,9 @@ void GCMainDlg::ensureTabbedCorrectly() 
 	QList<int> tmp = ui_.hsplitter->sizes();
 	ui_.hsplitter->setSizes(QList<int>() << 0);
 	ui_.hsplitter->setSizes(tmp);
+	if(!isTabbed() && geometryOptionPath().isEmpty()) {
+		setGeometryOptionPath(geometryOption);
+	}
 }
 
 void GCMainDlg::setShortcuts()
@@ -805,11 +808,13 @@ void GCMainDlg::setShortcuts()
 	d->act_mini_cmd->setShortcuts(ShortcutManager::instance()->shortcuts("chat.quick-command"));
 }
 
-void GCMainDlg::scrollUp() {
+void GCMainDlg::scrollUp()
+{
 	ui_.log->verticalScrollBar()->setValue(ui_.log->verticalScrollBar()->value() - ui_.log->verticalScrollBar()->pageStep()/2);
 }
 
-void GCMainDlg::scrollDown() {
+void GCMainDlg::scrollDown()
+{
 	ui_.log->verticalScrollBar()->setValue(ui_.log->verticalScrollBar()->value() + ui_.log->verticalScrollBar()->pageStep()/2);
 }
 
@@ -818,12 +823,6 @@ void GCMainDlg::closeEvent(QCloseEvent *
 	e->accept();
 }
 
-void GCMainDlg::resizeEvent(QResizeEvent* e)
-{
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool())
-		PsiOptions::instance()->setOption("options.ui.muc.size", e->size());
-}
-
 void GCMainDlg::deactivated()
 {
 	TabbableWidget::deactivated();
--- psi.orig/src/groupchatdlg.h
+++ psi/src/groupchatdlg.h
@@ -89,7 +89,6 @@ protected:
 	void dragEnterEvent(QDragEnterEvent *);
 	void dropEvent(QDropEvent *);
 	void closeEvent(QCloseEvent *);
-	void resizeEvent(QResizeEvent*);
 	void mucInfoDialog(const QString& title, const QString& message, const Jid& actor, const QString& reason);
 
 signals:
--- psi.orig/src/historydlg.cpp
+++ psi/src/historydlg.cpp
@@ -37,6 +37,8 @@
 #include "userlist.h"
 #include "common.h"
 
+static const QString geometryOption = "options.ui.history.size";
+
 static QString getNext(QString *str)
 {
 	int n = 0;
@@ -147,21 +149,13 @@ HistoryDlg::HistoryDlg(const Jid &jid, P
 	listAccounts();
 	loadContacts();
 
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		QSize s = PsiOptions::instance()->getOption("options.ui.history.size").value<QSize>();
-		if (!s.isEmpty()) {
-			resize(s);
-		}
-	}
+	setGeometryOptionPath(geometryOption);
 
 	ui_.jidList->setFocus();
 }
 
 HistoryDlg::~HistoryDlg()
 {
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		PsiOptions::instance()->setOption("options.ui.history.size", size());
-	}
 	delete d;
 }
 
--- psi.orig/src/options/opt_application.cpp
+++ psi/src/options/opt_application.cpp
@@ -43,9 +43,6 @@ QWidget *OptionsTabApplication::widget()
 		tr("Makes the main Psi window always be in front of other windows."));
 	d->ck_autoRosterSize->setWhatsThis(
 		tr("Makes the main Psi window resize automatically to fit all contacts."));
-	d->ck_keepSizes->setWhatsThis(
-		tr("Makes Psi remember window size and positions for chats and messages."
-		"  If disabled, the windows will always appear in their default positions and sizes."));
 	d->ck_useleft->setWhatsThis(
 		tr("Normally, right-clicking with the mouse on a contact will activate the context-menu."
 		"  Check this option if you'd rather use a left-click."));
@@ -100,7 +97,6 @@ void OptionsTabApplication::applyOptions
 
 	PsiOptions::instance()->setOption("options.ui.contactlist.always-on-top", d->ck_alwaysOnTop->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.automatically-resize-roster", d->ck_autoRosterSize->isChecked());
-	PsiOptions::instance()->setOption("options.ui.remember-window-sizes",d->ck_keepSizes->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.use-left-click", d->ck_useleft->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-menubar", d->ck_showMenubar->isChecked());
 
@@ -130,7 +126,6 @@ void OptionsTabApplication::restoreOptio
 
 	d->ck_alwaysOnTop->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool() );
 	d->ck_autoRosterSize->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.automatically-resize-roster").toBool() );
-	d->ck_keepSizes->setChecked( PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool() );
 	d->ck_showMenubar->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-menubar").toBool() );
 	d->ck_useleft->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.use-left-click").toBool() );
 	d->ck_autoUpdate->setChecked(PsiOptions::instance()->getOption("options.auto-update.check-on-startup").toBool());
--- psi.orig/src/options/opt_application.ui
+++ psi/src/options/opt_application.ui
@@ -28,13 +28,6 @@
     </widget>
    </item>
    <item>
-    <widget class="QCheckBox" name="ck_keepSizes" >
-     <property name="text" >
-      <string>Remember window sizes</string>
-     </property>
-    </widget>
-   </item>
-   <item>
     <widget class="QCheckBox" name="ck_useleft" >
      <property name="enabled" >
       <bool>true</bool>
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -5156,7 +5156,7 @@ void PsiAccount::openChat(const Jid& j, 
 		chat->bringToFront(false);
 		TabDlg* dlg = chat->getManagingTabDlg();
 		if (dlg) {
-			QTimer::singleShot(1000, dlg, SLOT(showWithoutActivation()));
+			QTimer::singleShot(1000, dlg, SLOT(showTabWithoutActivation()));
 		}
 	}
 }
--- psi.orig/src/psi_profiles.cpp
+++ psi/src/psi_profiles.cpp
@@ -814,7 +814,6 @@ bool OptionsMigration::fromFile(const QS
 				}
 				PsiOptions::instance()->setOption("options.ui.chat.delete-contents-after", delafter);
 				migrateBoolEntry(tag, "alwaysOnTop", "options.ui.contactlist.always-on-top");
-				migrateBoolEntry(tag, "keepSizes", "options.ui.remember-window-sizes");
 				migrateBoolEntry(tag, "ignoreHeadline", "options.messages.ignore-headlines");
 				migrateBoolEntry(tag, "ignoreNonRoster", "options.messages.ignore-non-roster-contacts");
 				migrateBoolEntry(tag, "excludeGroupChatIgnore", "options.messages.exclude-muc-from-ignore");
--- psi.orig/src/tabs/tabdlg.cpp
+++ psi/src/tabs/tabdlg.cpp
@@ -33,6 +33,7 @@
 #include <QDropEvent>
 #include <QCloseEvent>
 #include <QSignalMapper>
+#include <QTimer>
 
 #include "psitabwidget.h"
 #include "psioptions.h"
@@ -126,7 +127,7 @@ bool TabDlgDelegate::eventFilter(QWidget
  *        will manage some aspects of the TabDlg behavior.  Ownership is not
  *        passed.
  */ 
-TabDlg::TabDlg(TabManager* tabManager, QSize size, TabDlgDelegate *delegate)
+TabDlg::TabDlg(TabManager* tabManager, const QString& geometryOption, TabDlgDelegate *delegate)
 		: AdvancedWidget<QWidget>(0, delegate ? delegate->initWindowFlags() : (Qt::WindowFlags)0)
 		, delegate_(delegate)
 		, tabWidget_(0)
@@ -194,11 +195,7 @@ TabDlg::TabDlg(TabManager* tabManager, Q
 		addAction(action);
 	}
 
-	if (size.isValid()) {
-		resize(size);
-	} else {
-		resize(ChatDlg::defaultSize()); //TODO: no!
-	}
+	setGeometryOptionPath(geometryOption);
 }
 
 TabDlg::~TabDlg()
@@ -392,9 +389,14 @@ void TabDlg::addTab(TabbableWidget* tab)
 	connect(tab, SIGNAL(invalidateTabInfo()), SLOT(updateTab()));
 	connect(tab, SIGNAL(updateFlashState()), SLOT(updateFlashState()));
 
-	this->showWithoutActivation();
 	updateTab(tab);
 	setUpdatesEnabled(true);
+	QTimer::singleShot(0, this, SLOT(showTabWithoutActivation()));
+}
+
+void TabDlg::showTabWithoutActivation()
+{
+	showWithoutActivation();
 }
 
 void TabDlg::detachCurrentTab()
--- psi.orig/src/tabs/tabdlg.h
+++ psi/src/tabs/tabdlg.h
@@ -68,7 +68,7 @@ class TabDlg : public AdvancedWidget<QWi
 {
 	Q_OBJECT
 public:
-	TabDlg(TabManager* tabManager, QSize size, TabDlgDelegate *delegate = 0);
+	TabDlg(TabManager* tabManager, const QString& geometryOption, TabDlgDelegate *delegate = 0);
 	~TabDlg();
 	bool managesTab(const TabbableWidget*) const;
 	bool tabOnTop(const TabbableWidget*) const;
@@ -128,6 +128,7 @@ private slots:
 	void checkHasChats();
 	void updateTab();
 	void updateTab(TabbableWidget*);
+	void showTabWithoutActivation();
 	void nextTab();
 	void previousTab();
 	void tab_aboutToShowMenu(QMenu *menu);
--- psi.orig/src/tabs/tabmanager.cpp
+++ psi/src/tabs/tabmanager.cpp
@@ -64,13 +64,6 @@ bool TabManager::shouldBeTabbed(QWidget 
 	return false;
 }
 
-void TabManager::tabResized(QSize size) {
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		PsiOptions::instance()->mapPut("options.ui.tabs.group-state", 
-					tabsetToKinds_[static_cast<TabDlg*>(sender())], "size", size);
-	}
-}
-
 TabDlg* TabManager::newTabs(QWidget *widget)
 {
 	QChar kind = tabKind(widget);
@@ -82,19 +75,9 @@ TabDlg* TabManager::newTabs(QWidget *wid
 		}
 	}
 	
-	
-	QVariantList savedSizes = PsiOptions::instance()->mapKeyList("options.ui.tabs.group-state");
-	QSize size = PsiOptions::instance()->getOption("options.ui.tabs.size").toSize();
-	if (savedSizes.contains(group)) {
-		size = PsiOptions::instance()->mapGet("options.ui.tabs.group-state", group, "size").toSize();
-	} else {
-		foreach(QVariant v, savedSizes) {
-			if (v.toString().contains(kind)) {
-				size = PsiOptions::instance()->mapGet("options.ui.tabs.group-state", v.toString(), "size").toSize();
-			}
-		}
-	}
-	TabDlg *tab = new TabDlg(this, size, tabDlgDelegate_);
+	QString geometryOption = QString("options.ui.tabs.group-state.%1.size").arg(group);
+
+	TabDlg *tab = new TabDlg(this, geometryOption, tabDlgDelegate_);
 	tab->setUserManagementEnabled(userManagement_);
 	tab->setTabBarShownForSingles(tabSingles_);
 	tab->setSimplifiedCaptionEnabled(simplifiedCaption_);
@@ -107,7 +90,6 @@ TabDlg* TabManager::newTabs(QWidget *wid
 	}
 	tabs_.append(tab);
 	connect(tab, SIGNAL(destroyed(QObject*)), SLOT(tabDestroyed(QObject*)));
-	connect(tab, SIGNAL(resized(QSize)), SLOT(tabResized(QSize)));
 	connect(psiCon_, SIGNAL(emitOptionsUpdate()), tab, SLOT(optionsUpdate()));
 	return tab;
 }
--- psi.orig/src/tabs/tabmanager.h
+++ psi/src/tabs/tabmanager.h
@@ -117,7 +117,6 @@ public:
 
 public slots:
 	void tabDestroyed(QObject*);
-	void tabResized(QSize);
 
 private:
 	QMap<QChar, TabDlg*> preferedTabsetForKind_;
--- psi.orig/src/tools/advwidget/advwidget.cpp
+++ psi/src/tools/advwidget/advwidget.cpp
@@ -98,6 +98,7 @@ protected:
 private:
 	QTimer* saveGeometryTimer_;
 	QRect newGeometry_;
+	QRect normalGeometry_;
 
 public slots:
 	void saveGeometry();
@@ -121,8 +122,6 @@ GAdvancedWidget::Private::Private(QWidge
 	if (!advancedWidgetShared)
 		advancedWidgetShared = new AdvancedWidgetShared();
 
-	parentWidget_ = parent;
-
 	saveGeometryTimer_ = new QTimer(this);
 	saveGeometryTimer_->setInterval(100);
 	saveGeometryTimer_->setSingleShot(true);
@@ -326,11 +325,13 @@ void GAdvancedWidget::Private::updateGeo
 
 void GAdvancedWidget::Private::saveGeometry()
 {
-	PsiOptions::instance()->setOption(geometryOptionPath_, parentWidget_->normalGeometry());
+	bool isMaximized = parentWidget_->windowState() & Qt::WindowMaximized;
+	//if window is maximized normalGeometry() returns null rect. So in this case we use cached geometry
+	PsiOptions::instance()->setOption(geometryOptionPath_, isMaximized ? normalGeometry_ : parentWidget_->normalGeometry());
 	PsiOptions::instance()->setOption(geometryOptionPath_ + "-frame", parentWidget_->frameGeometry());
 	PsiOptions::instance()->setOption(geometryOptionPath_ + "-screen", QApplication::desktop()->screenNumber(parentWidget_));
-	PsiOptions::instance()->setOption(geometryOptionPath_ + "-maximized", (parentWidget_->windowState() & Qt::WindowMaximized) != 0);
-	PsiOptions::instance()->setOption(geometryOptionPath_ + "-fullscreen", (parentWidget_->windowState() & Qt::WindowFullScreen) != 0);
+	PsiOptions::instance()->setOption(geometryOptionPath_ + "-maximized", isMaximized);
+	PsiOptions::instance()->setOption(geometryOptionPath_ + "-fullscreen", bool(parentWidget_->windowState() & Qt::WindowFullScreen));
 }
 
 void GAdvancedWidget::Private::restoreGeometry()
@@ -357,13 +358,13 @@ void GAdvancedWidget::Private::restoreGe
 		quint16 majorVersion = 1;
 		quint16 minorVersion = 0;
 		QRect restoredFrameGeometry = o->getOption(geometryOptionPath_ + "-frame").toRect();
-		QRect restoredNormalGeometry = o->getOption(geometryOptionPath_).toRect();
+		normalGeometry_ = o->getOption(geometryOptionPath_).toRect();
 
 		stream << magicNumber
 			<< majorVersion
 			<< minorVersion
 			<< restoredFrameGeometry
-			<< restoredNormalGeometry
+			<< normalGeometry_
 			<< qint32(o->getOption(geometryOptionPath_ + "-screen").toInt())
 			<< quint8(o->getOption(geometryOptionPath_ + "-maximized").toBool())
 			<< quint8(o->getOption(geometryOptionPath_ + "-fullscreen").toBool());
@@ -410,6 +411,10 @@ bool GAdvancedWidget::Private::eventFilt
 {
 	if (obj == parentWidget_) {
 		if (e->type() == QEvent::Move || e->type() == QEvent::Resize) {
+			Qt::WindowStates ws = parentWidget_->windowState();
+			if( !(ws & Qt::WindowMaximized) && !(ws & Qt::WindowFullScreen) ) {
+				normalGeometry_ = parentWidget_->normalGeometry();
+			}
 			saveGeometryTimer_->start();
 		}
 
--- psi.orig/src/whiteboarding/wbdlg.cpp
+++ psi/src/whiteboarding/wbdlg.cpp
@@ -34,6 +34,8 @@
 #include "stretchwidget.h"
 #include "iconset.h"
 
+static const QString geometryOption = "options.ui.chat.wb-size";
+
 //----------------------------------------------------------------------------
 // WbDlg
 //----------------------------------------------------------------------------
@@ -208,7 +210,7 @@ WbDlg::WbDlg(SxeSession* session, PsiAcc
 	
 	setWindowOpacity(double(qMax(MINIMUM_OPACITY, PsiOptions::instance()->getOption("options.ui.chat.opacity").toInt())) / 100);
 
-	resize(PsiOptions::instance()->getOption("options.ui.chat.size").toSize());
+	setGeometryOptionPath(geometryOption);
 }
 
 WbDlg::~WbDlg() {
@@ -283,12 +285,6 @@ void WbDlg::closeEvent(QCloseEvent *e) {
 	}
 }
 
-void WbDlg::resizeEvent(QResizeEvent *e) {
-	if (PsiOptions::instance()->getOption("options.ui.remember-window-sizes").toBool()) {
-		PsiOptions::instance()->setOption("options.ui.chat.size", e->size());
-	}
-}
-
 void WbDlg::showEvent(QShowEvent *) {
 	setSelfDestruct(0);
 }
--- psi.orig/src/whiteboarding/wbdlg.h
+++ psi/src/whiteboarding/wbdlg.h
@@ -100,8 +100,6 @@ protected:
 	void keyPressEvent(QKeyEvent *);
 	/*! \brief Sets the destruction times as specified by options.*/
 	void closeEvent(QCloseEvent *);
-	/*! \brief Saves the size of the dialog as default if so specified in options.*/
-	void resizeEvent(QResizeEvent *);
 	/*! \brief Removes the destruction timer.*/
 	void showEvent(QShowEvent *);
 	/*! \brief Invokes activated() if activated.*/
