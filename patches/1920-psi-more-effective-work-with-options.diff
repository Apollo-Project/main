--- psi.orig/src/chatdlg.cpp
+++ psi/src/chatdlg.cpp
@@ -270,14 +270,15 @@ bool ChatDlg::readyToHide()
 	keepOpen_ = false; // tabdlg calls readyToHide twice on tabdlg close, only display message once.
 
 	// destroy the dialog if delChats is dcClose
-	if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "instant") {
+	QString del = PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString();
+	if (del == "instant") {
 		setAttribute(Qt::WA_DeleteOnClose);
 	}
 	else {
-		if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "hour") {
+		if (del == "hour") {
 			setSelfDestruct(60);
 		}
-		else if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "day") {
+		else if (del == "day") {
 			setSelfDestruct(60 * 24);
 		}
 	}
@@ -574,15 +575,16 @@ void ChatDlg::optionsUpdate()
 	setShortcuts();
 
 	if (!isTabbed() && isHidden()) {
-		if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "instant") {
+		QString del = PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString();
+		if (del == "instant") {
 			deleteLater();
 			return;
 		}
 		else {
-			if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "hour") {
+			if (del == "hour") {
 				setSelfDestruct(60);
 			}
-			else if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "day") {
+			else if (del == "day") {
 				setSelfDestruct(60 * 24);
 			}
 			else {
--- psi.orig/src/gcuserview.cpp
+++ psi/src/gcuserview.cpp
@@ -60,25 +60,26 @@ public:
 
 	void updateSettings()
 	{
+		PsiOptions *o = PsiOptions::instance();
 		colorForeground_ = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-foreground");
 		colorBackground_ = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-background");
-		colorModerator_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-moderator").value<QColor>();
-		colorParticipant_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-participant").value<QColor>();
-		colorVisitor_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-visitor").value<QColor>();
-		colorNoRole_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-norole").value<QColor>();
-		showGroups_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-groups").toBool();
-		slimGroups_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.use-slim-group-headings").toBool();
-		nickColoring_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.nick-coloring").toBool();
-		showClients_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-client-icons").toBool();
-		showAffiliations_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-affiliation-icons").toBool();
-		showStatusIcons_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-status-icons").toBool();
-		showAvatar_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.show").toBool();
-		avatarSize_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.size").toInt();
-		avatarAtLeft_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.avatars-at-left").toBool();
-		avatarRadius_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.radius").toInt();
+		colorModerator_ = o->getOption("options.ui.look.colors.muc.role-moderator").value<QColor>();
+		colorParticipant_ = o->getOption("options.ui.look.colors.muc.role-participant").value<QColor>();
+		colorVisitor_ = o->getOption("options.ui.look.colors.muc.role-visitor").value<QColor>();
+		colorNoRole_ = o->getOption("options.ui.look.colors.muc.role-norole").value<QColor>();
+		showGroups_ = o->getOption("options.ui.muc.userlist.show-groups").toBool();
+		slimGroups_ = o->getOption("options.ui.muc.userlist.use-slim-group-headings").toBool();
+		nickColoring_ = o->getOption("options.ui.muc.userlist.nick-coloring").toBool();
+		showClients_ = o->getOption("options.ui.muc.userlist.show-client-icons").toBool();
+		showAffiliations_ = o->getOption("options.ui.muc.userlist.show-affiliation-icons").toBool();
+		showStatusIcons_ = o->getOption("options.ui.muc.userlist.show-status-icons").toBool();
+		showAvatar_ = o->getOption("options.ui.muc.userlist.avatars.show").toBool();
+		avatarSize_ = o->getOption("options.ui.muc.userlist.avatars.size").toInt();
+		avatarAtLeft_ = o->getOption("options.ui.muc.userlist.avatars.avatars-at-left").toBool();
+		avatarRadius_ = o->getOption("options.ui.muc.userlist.avatars.radius").toInt();
 
 		QFont font;
-		font.fromString(PsiOptions::instance()->getOption("options.ui.look.font.contactlist").toString());
+		font.fromString(o->getOption("options.ui.look.font.contactlist").toString());
 		fontHeight_ = QFontMetrics(font).height()+2;
 	}
 
--- psi.orig/src/groupchatdlg.cpp
+++ psi/src/groupchatdlg.cpp
@@ -683,8 +683,8 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	ui_.lb_ident->setAccount(account());
 	ui_.lb_ident->setShowJid(false);
 	ui_.log->setSessionData(true, jid().full(), jid().full()); //FIXME change conference name
-	d->tabmode = PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool();
-	setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
+	d->tabmode = options_->getOption("options.ui.tabs.use-tabs").toBool();
+	setWindowBorder(options_->getOption("options.ui.decorate-windows").toBool());
 	if (!d->tabmode && !isBorder()) {
 		d->winHeader_ = new PsiWindowHeader(this);
 		ui_.vboxLayout1->insertWidget(0, d->winHeader_);
@@ -716,7 +716,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 #endif
 
 	ui_.lv_users->setMainDlg(this);
-	if ( PsiOptions::instance()->getOption("options.ui.contactlist.disable-scrollbar").toBool() ) {
+	if ( options_->getOption("options.ui.contactlist.disable-scrollbar").toBool() ) {
 		ui_.lv_users->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
 	}
 	connect(ui_.lv_users, SIGNAL(action(const QString &, const Status &, int)), SLOT(lv_action(const QString &, const Status &, int)));
@@ -803,7 +803,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	((QToolButton *)ui_.toolbar->widgetForAction(d->act_icon))->setPopupMode(QToolButton::InstantPopup);
 	ui_.toolbar->addAction(d->act_templates);
 	((QToolButton *)ui_.toolbar->widgetForAction(d->act_templates))->setPopupMode(QToolButton::InstantPopup);
-	if (!PsiOptions::instance()->getOption("options.ui.chat.disable-paste-send").toBool())
+	if (!options_->getOption("options.ui.chat.disable-paste-send").toBool())
 		ui_.toolbar->addAction(d->act_ps);
 	ui_.toolbar->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Maximum);
 
@@ -842,10 +842,10 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	connect(ui_.vsplitter, SIGNAL(splitterMoved(int,int)), this, SLOT(verticalSplitterMoved(int,int)));
 
 	// resize the horizontal splitter
-	d->logSize = PsiOptions::instance()->getOption("options.ui.muc.log-width").toInt();
-	d->rosterSize = PsiOptions::instance()->getOption("options.ui.muc.roster-width").toInt();
+	d->logSize = options_->getOption("options.ui.muc.log-width").toInt();
+	d->rosterSize = options_->getOption("options.ui.muc.roster-width").toInt();
 	QList<int> list;
-	bool leftRoster = PsiOptions::instance()->getOption("options.ui.muc.roster-at-left").toBool();
+	bool leftRoster = options_->getOption("options.ui.muc.roster-at-left").toBool();
 	if(leftRoster)
 		list << d->rosterSize << d->logSize;
 	else
@@ -857,8 +857,8 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 		ui_.hsplitter->insertWidget(0, ui_.lv_users);  // Swap widgets
 
 	// resize the vertical splitter
-	d->logHeight = PsiOptions::instance()->getOption("options.ui.chat.log-height").toInt();
-	d->chateditHeight = PsiOptions::instance()->getOption("options.ui.chat.chatedit-height").toInt();
+	d->logHeight = options_->getOption("options.ui.chat.log-height").toInt();
+	d->chateditHeight = options_->getOption("options.ui.chat.chatedit-height").toInt();
 	setVSplitterPosition(d->logHeight, d->chateditHeight);
 
 	X11WM_CLASS("groupchat");
@@ -891,8 +891,8 @@ void GCMainDlg::vcard(const QString& _st
 GCMainDlg::~GCMainDlg()
 {
 	//  Save splitters size
-	PsiOptions::instance()->setOption("options.ui.muc.log-width", d->logSize);
-	PsiOptions::instance()->setOption("options.ui.muc.roster-width", d->rosterSize);
+	options_->setOption("options.ui.muc.log-width", d->logSize);
+	options_->setOption("options.ui.muc.roster-width", d->rosterSize);
 
 	if(d->state != Private::Idle && d->state != Private::ForcedLeave) {
 		account()->groupChatLeave(jid().domain(), jid().node());
@@ -917,12 +917,12 @@ GCMainDlg::~GCMainDlg()
 void GCMainDlg::horizSplitterMoved()
 {
 	QList<int> list = ui_.hsplitter->sizes();
-	bool leftRoster = PsiOptions::instance()->getOption("options.ui.muc.roster-at-left").toBool();
+	bool leftRoster = options_->getOption("options.ui.muc.roster-at-left").toBool();
 	d->rosterSize = !leftRoster ? list.last() : list.first();
 	d->logSize = leftRoster ? list.last() : list.first();
 
-	PsiOptions::instance()->setOption("options.ui.muc.log-width", d->logSize);
-	PsiOptions::instance()->setOption("options.ui.muc.roster-width", d->rosterSize);
+	options_->setOption("options.ui.muc.log-width", d->logSize);
+	options_->setOption("options.ui.muc.roster-width", d->rosterSize);
 }
 
 void GCMainDlg::verticalSplitterMoved(int, int)
@@ -930,8 +930,8 @@ void GCMainDlg::verticalSplitterMoved(in
 	QList<int> list = ui_.vsplitter->sizes();
 	d->logHeight = list.first();
 	d->chateditHeight = list.last();
-	PsiOptions::instance()->setOption("options.ui.chat.log-height", d->logHeight);
-	PsiOptions::instance()->setOption("options.ui.chat.chatedit-height", d->chateditHeight);
+	options_->setOption("options.ui.chat.log-height", d->logHeight);
+	options_->setOption("options.ui.chat.chatedit-height", d->chateditHeight);
 
 	emit vSplitterMoved(d->logHeight, d->chateditHeight);
 }
@@ -957,10 +957,10 @@ void GCMainDlg::ensureTabbedCorrectly()
 	// QSplitter is broken again, force resize so that
 	// lv_users gets initizalised properly and context menu
 	// works in tabs too.
-	d->logSize = PsiOptions::instance()->getOption("options.ui.muc.log-width").toInt();
-	d->rosterSize = PsiOptions::instance()->getOption("options.ui.muc.roster-width").toInt();
+	d->logSize = options_->getOption("options.ui.muc.log-width").toInt();
+	d->rosterSize = options_->getOption("options.ui.muc.roster-width").toInt();
 	QList<int> list;
-	if(PsiOptions::instance()->getOption("options.ui.muc.roster-at-left").toBool())
+	if(options_->getOption("options.ui.muc.roster-at-left").toBool())
 		list << d->rosterSize << d->logSize;
 	else
 		list <<  d->logSize << d->rosterSize;
@@ -1241,7 +1241,7 @@ void GCMainDlg::doClear()
 
 void GCMainDlg::doClearButton()
 {
-	if (PsiOptions::instance()->getOption("options.ui.chat.warn-before-clear").toBool()) {
+	if (options_->getOption("options.ui.chat.warn-before-clear").toBool()) {
 		switch (
 			QMessageBox::warning(
 				this,
@@ -1253,7 +1253,7 @@ void GCMainDlg::doClearButton()
 		case QMessageBox::No:
 		break;
 		case QMessageBox::YesAll:
-			PsiOptions::instance()->setOption("options.ui.chat.warn-before-clear", false);
+			options_->setOption("options.ui.chat.warn-before-clear", false);
 			// fall-through
 		case QMessageBox::Yes:
 			doClear();
@@ -1536,7 +1536,7 @@ void GCMainDlg::presence(const QString &
 				}
 			}
 			if ( !d->connecting && options_->getOption("options.muc.show-status-changes").toBool() ) {
-				bool statusWithPriority = PsiOptions::instance()->getOption("options.ui.muc.status-with-priority").toBool();
+				bool statusWithPriority = options_->getOption("options.ui.muc.status-with-priority").toBool();
 				if (s.status() != contact->s.status() || s.show() != contact->s.show() ||
 						(statusWithPriority && s.priority() != contact->s.priority())) {
 					ui_.log->dispatchMessage(MessageView::statusMessage(
@@ -1683,7 +1683,7 @@ void GCMainDlg::message(const Message &_
 		d->topic = subject;
 		QString subjectTooltip = TextUtil::plain2rich(subject);
 		subjectTooltip = TextUtil::linkify(subjectTooltip);
-		if(PsiOptions::instance()->getOption("options.ui.emoticons.use-emoticons").toBool()) {
+		if(options_->getOption("options.ui.emoticons.use-emoticons").toBool()) {
 			subjectTooltip = TextUtil::emoticonify(subjectTooltip);
 		}
 		ui_.le_topic->setText(subject.replace("\n\n", " || ").replace("\n", " | ").replace("\t", " ").replace(QRegExp("\\s{2,}"), " "));
@@ -1717,8 +1717,8 @@ void GCMainDlg::message(const Message &_
 	if (m.body().left(d->self.length()) == d->self)
 		d->lastReferrer = m.from().resource();
 
-	if(PsiOptions::instance()->getOption("options.ui.muc.use-highlighting").toBool()) {
-		QStringList highlightWords = PsiOptions::instance()->getOption("options.ui.muc.highlight-words").toStringList();
+	if(options_->getOption("options.ui.muc.use-highlighting").toBool()) {
+		QStringList highlightWords = options_->getOption("options.ui.muc.highlight-words").toStringList();
 		foreach (QString word, highlightWords) {
 			if(m.body().contains((word), Qt::CaseInsensitive)) {
 				alert = true;
@@ -1732,10 +1732,10 @@ void GCMainDlg::message(const Message &_
 			account()->playSound(PsiAccount::eSend);
 	}
 	else {
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
+		if(alert || (options_->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
 			account()->playSound(PsiAccount::eGroupChat);
 
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
+		if(alert || (options_->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
 			if (!m.spooled() && !isActiveTab() && !m.from().resource().isEmpty()) {
 				XMPP::Jid jid = m.from()/*.withDomain("")*/;
 				MessageEvent *e = new MessageEvent(m, account());
@@ -1785,7 +1785,7 @@ const QString& GCMainDlg::topic() const
 void GCMainDlg::appendSysMsg(const QString &str, bool alert, const QDateTime &ts)
 {
 	MessageView mv = MessageView::fromPlainText(str, MessageView::System);
-	if (!PsiOptions::instance()->getOption("options.ui.muc.use-highlighting").toBool()) {
+	if (!options_->getOption("options.ui.muc.use-highlighting").toBool()) {
 		alert = false;
 	}
 	mv.setAlert(alert);
@@ -1809,14 +1809,13 @@ void GCMainDlg::appendSysMsg(const Messa
 void GCMainDlg::appendMessage(const Message &m, bool alert)
 {
 	MessageView mv(MessageView::Message);
-	if (m.containsHTML() && PsiOptions::instance()
-							->getOption("options.html.muc.render").toBool() &&
-							!m.html().text().isEmpty()) {
+	if (m.containsHTML() && options_->getOption("options.html.muc.render").toBool() &&
+					!m.html().text().isEmpty()) {
 		mv.setHtml(m.html().toString("span"));
 	} else {
 		mv.setPlainText(m.body());
 	}
-	if (!PsiOptions::instance()->getOption("options.ui.muc.use-highlighting").toBool())
+	if (!options_->getOption("options.ui.muc.use-highlighting").toBool())
 		alert=false;
 	mv.setAlert(alert);
 	mv.setUserId(m.from().full());
@@ -1859,13 +1858,13 @@ void GCMainDlg::appendMessage(const Mess
 void GCMainDlg::doAlert()
 {
 	if(!isActiveTab())
-		if (PsiOptions::instance()->getOption("options.ui.flash-windows").toBool())
+		if (options_->getOption("options.ui.flash-windows").toBool())
 			doFlash(true);
 }
 
 QString GCMainDlg::desiredCaption() const
 {
-	QString cap = PsiOptions::instance()->getOption("options.ui.chat.caption").toString();
+	QString cap = options_->getOption("options.ui.chat.caption").toString();
 	if(!cap.isEmpty()) {
 		return cap;
 	}
@@ -1883,7 +1882,7 @@ QString GCMainDlg::desiredCaption() cons
 
 void GCMainDlg::setLooks()
 {
-	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	const QString css = options_->getOption("options.ui.chat.css").toString();
 	if (!css.isEmpty()) {
 		setStyleSheet(css);
 		d->mle()->setCssString(css);
@@ -1893,32 +1892,32 @@ void GCMainDlg::setLooks()
 
 	// update the fonts
 	QFont f;
-	f.fromString(PsiOptions::instance()->getOption("options.ui.look.font.chat").toString());
+	f.fromString(options_->getOption("options.ui.look.font.chat").toString());
 	ui_.log->setFont(f);
 	ui_.mle->chatEdit()->setFont(f);
 
-	f.fromString(PsiOptions::instance()->getOption("options.ui.look.font.contactlist").toString());
+	f.fromString(options_->getOption("options.ui.look.font.contactlist").toString());
 	ui_.lv_users->setFont(f);
 
-	if (PsiOptions::instance()->getOption("options.ui.chat.central-toolbar").toBool()) {
+	if (options_->getOption("options.ui.chat.central-toolbar").toBool()) {
 		ui_.toolbar->show();
 		ui_.tb_actions->hide();
 		ui_.tb_emoticons->hide();
 	}
 	else {
 		ui_.toolbar->hide();
-		ui_.tb_emoticons->setVisible(PsiOptions::instance()->getOption("options.ui.emoticons.use-emoticons").toBool());
+		ui_.tb_emoticons->setVisible(options_->getOption("options.ui.emoticons.use-emoticons").toBool());
 		ui_.tb_actions->show();
 	}
 
-	if (PsiOptions::instance()->getOption("options.ui.disable-send-button").toBool()) {
+	if (options_->getOption("options.ui.disable-send-button").toBool()) {
 		ui_.pb_send->hide();
 	}
 	else {
 		ui_.pb_send->show();
 	}
 
-	setWindowOpacity(double(qMax(MINIMUM_OPACITY,PsiOptions::instance()->getOption("options.ui.chat.opacity").toInt()))/100);
+	setWindowOpacity(double(qMax(MINIMUM_OPACITY,options_->getOption("options.ui.chat.opacity").toInt()))/100);
 
 	// update the widget icon
 #ifndef Q_WS_MAC
@@ -2022,7 +2021,7 @@ void GCMainDlg::lv_action(const QString 
 	else if(x >= 100 && x<300) {
 		// Kick || Ban with reason
 		QString reason;
-		QStringList reasons = PsiOptions::instance()->getOption("options.muc.reasons").toStringList();
+		QStringList reasons = options_->getOption("options.muc.reasons").toStringList();
 		if (x==100 || x==200) {
 			// Show custom reason dialog
 			MUCReasonsEditor *editor=new MUCReasonsEditor(this);
@@ -2069,12 +2068,12 @@ void GCMainDlg::buildMenu()
 
 	d->pm_settings->addAction(d->act_icon);
 	d->pm_settings->addAction(d->act_templates);
-	if (!PsiOptions::instance()->getOption("options.ui.chat.disable-paste-send").toBool())
+	if (!options_->getOption("options.ui.chat.disable-paste-send").toBool())
 		d->pm_settings->addAction(d->act_ps);
 	d->pm_settings->addAction(d->act_nick);
 	d->pm_settings->addAction(d->act_bookmark);
 #ifdef PSI_PLUGINS
-	if(!PsiOptions::instance()->getOption("options.ui.chat.central-toolbar").toBool()) {
+	if(!options_->getOption("options.ui.chat.central-toolbar").toBool()) {
 		d->pm_settings->addSeparator();
 		PluginManager::instance()->addGCToolBarButton(this, d->pm_settings, account(), jid().full());
 	}
@@ -2218,7 +2217,7 @@ void GCMainDlg::sendTemp(const QString &
 	if(TabbableWidget::isActiveTab()) {
 		if (!templText.isEmpty()) {
 			d->mle()->textCursor().insertText(templText);
-			if (!PsiOptions::instance()->getOption("options.ui.chat.only-paste-template").toBool())
+			if (!options_->getOption("options.ui.chat.only-paste-template").toBool())
 				mle_returnPressed();
 		}
 	}
@@ -2234,7 +2233,7 @@ void GCMainDlg::resizeEvent(QResizeEvent
 		return;
 
 	QList<int> sizes = ui_.hsplitter->sizes();
-	bool leftRoster = PsiOptions::instance()->getOption("options.ui.muc.roster-at-left").toBool();
+	bool leftRoster = options_->getOption("options.ui.muc.roster-at-left").toBool();
 	int logWidth = !leftRoster ? sizes.first() : sizes.last();
 	int rosterWidth = leftRoster ? sizes.first() : sizes.last();
 	int dw = rosterWidth - d->rosterSize;
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -541,12 +541,12 @@ public:
 
 		if (lastManualStatus().isAvailable()) {
 			if (lastManualStatus().type() == XMPP::Status::DND &&
-			    PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.suppress-while-dnd").toBool())
+			    options->getOption("options.ui.notifications.passive-popups.suppress-while-dnd").toBool())
 			{
 				return true;
 			}
 			if ((lastManualStatus().type() == XMPP::Status::Away || lastManualStatus().type() == XMPP::Status::XA) &&
-			    PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.suppress-while-away").toBool())
+			    options->getOption("options.ui.notifications.passive-popups.suppress-while-away").toBool())
 			{
 				return true;
 			}
@@ -564,7 +564,7 @@ public:
 			if (lastManualStatus().type() == XMPP::Status::DND)
 				return true;
 			if ((lastManualStatus().type() == XMPP::Status::Away || lastManualStatus().type() == XMPP::Status::XA) &&
-			    PsiOptions::instance()->getOption("options.ui.notifications.popup-dialogs.suppress-while-away").toBool())
+			    options->getOption("options.ui.notifications.popup-dialogs.suppress-while-away").toBool())
 			{
 				return true;
 			}
@@ -719,15 +719,15 @@ public slots:
 
 	void loadQueue()
 	{
-		bool soundEnabled = PsiOptions::instance()->getOption("options.ui.notifications.sounds.enable").toBool();
-		PsiOptions::instance()->setOption("options.ui.notifications.sounds.enable", false); // disable the sound and popups
+		bool soundEnabled = options->getOption("options.ui.notifications.sounds.enable").toBool();
+		options->setOption("options.ui.notifications.sounds.enable", false); // disable the sound and popups
 		doPopups_ = false;
 
 		QFileInfo fi( pathToProfileEvents() );
 		if ( fi.exists() )
 			eventQueue->fromFile(pathToProfileEvents());
 
-		PsiOptions::instance()->setOption("options.ui.notifications.sounds.enable", soundEnabled);
+		options->setOption("options.ui.notifications.sounds.enable", soundEnabled);
 		doPopups_ = true;
 	}
 
@@ -982,12 +982,12 @@ private:
 		withPriority = loginWithPriority;
 		if (!lastManualStatus().isAway() && !lastManualStatus().isInvisible()) {
 			int priority;
-			if (autoAway == AutoAway_Away && PsiOptions::instance()->getOption("options.status.auto-away.force-priority").toBool()) {
-				priority = PsiOptions::instance()->getOption("options.status.auto-away.priority").toInt();
+			if (autoAway == AutoAway_Away && options->getOption("options.status.auto-away.force-priority").toBool()) {
+				priority = options->getOption("options.status.auto-away.priority").toInt();
 				withPriority = true;
 			}
-			else if (autoAway == AutoAway_XA && PsiOptions::instance()->getOption("options.status.auto-away.force-xa-priority").toBool()) {
-				priority = PsiOptions::instance()->getOption("options.status.auto-away.xa-priority").toInt();
+			else if (autoAway == AutoAway_XA && options->getOption("options.status.auto-away.force-xa-priority").toBool()) {
+				priority = options->getOption("options.status.auto-away.xa-priority").toInt();
 				withPriority = true;
 			}
 			else {
@@ -1001,9 +1001,9 @@ private:
 
 			switch (autoAway) {
 			case AutoAway_Away:
-				return Status(XMPP::Status::Away, PsiOptions::instance()->getOption("options.status.auto-away.message").toString(), priority);
+				return Status(XMPP::Status::Away, options->getOption("options.status.auto-away.message").toString(), priority);
 			case AutoAway_XA:
-				return Status(XMPP::Status::XA, PsiOptions::instance()->getOption("options.status.auto-away.message").toString(), priority);
+				return Status(XMPP::Status::XA, options->getOption("options.status.auto-away.message").toString(), priority);
 			case AutoAway_Offline:
 				return Status(Status::Offline, loginStatus.status(), priority);
 			default:
@@ -1248,13 +1248,13 @@ PsiAccount::PsiAccount(const UserAccount
 	d->rcLeaveMucServer =0;
 
 	//Idle server
-	if(PsiOptions::instance()->getOption("options.service-discovery.last-activity").toBool()) {
+	if(d->options->getOption("options.service-discovery.last-activity").toBool()) {
 		new IdleServer(this, d->client->rootTask());
 		d->client->addExtension("last-act", QStringList("jabber:iq:last"));
 	}
 
 	// HTML
-	if(PsiOptions::instance()->getOption("options.html.chat.render").toBool())
+	if(d->options->getOption("options.html.chat.render").toBool())
 		d->client->addExtension("html",Features("http://jabber.org/protocol/xhtml-im"));
 
 	d->selfContact = new PsiSelfContact(d->self, this);
@@ -1291,7 +1291,7 @@ PsiAccount::PsiAccount(const UserAccount
 
 	//printf("PsiAccount: [%s] loaded\n", name().latin1());
 
-	if(PsiOptions::instance()->getOption("options.xml-console.enable-at-login").toBool() && enabled()) {
+	if(d->options->getOption("options.xml-console.enable-at-login").toBool() && enabled()) {
 		this->showXmlConsole();
 		d->xmlConsole->enable();
 	}
@@ -1815,7 +1815,7 @@ void PsiAccount::forceDisconnect(bool fa
 		d->client->removeExtension("pep");
 
 		// send logout status
-		d->client->groupChatLeaveAll(PsiOptions::instance()->getOption("options.muc.leave-status-message").toString());
+		d->client->groupChatLeaveAll(d->options->getOption("options.muc.leave-status-message").toString());
 		d->client->setPresence(s);
 	}
 
@@ -2320,8 +2320,8 @@ void PsiAccount::client_rosterRequestFin
 
 	// Get stored options
 	// FIXME: Should be an account-specific option
-	//if (PsiOptions::instance()->getOption("options.options-storage.load").toBool())
-	//	PsiOptions::instance()->load(d->client);
+	//if (d->options->getOption("options.options-storage.load").toBool())
+	//	d->options->load(d->client);
 
 	// we need to have up-to-date photoHash for initial presence
 	d->vcardChanged(jid());
@@ -2387,7 +2387,7 @@ void PsiAccount::setPEPAvailable(bool b)
 void PsiAccount::bookmarksAvailabilityChanged()
 {
 	if (!d->bookmarkManager->isAvailable() ||
-	    !PsiOptions::instance()->getOption("options.muc.bookmarks.auto-join").toBool())
+	    !d->options->getOption("options.muc.bookmarks.auto-join").toBool())
 	{
 		return;
 	}
@@ -2419,7 +2419,7 @@ void PsiAccount::incomingHttpAuthRequest
 
 void PsiAccount::client_rosterItemAdded(const RosterItem &r)
 {
-	if ( r.isPush() && r.name().isEmpty() && PsiOptions::instance()->getOption("options.contactlist.resolve-nicks-on-contact-add").toBool() ) {
+	if ( r.isPush() && r.name().isEmpty() && d->options->getOption("options.contactlist.resolve-nicks-on-contact-add").toBool() ) {
 		// automatically resolve nickname from vCard, if newly added item doesn't have any
 		VCardFactory::instance()->getVCard(r.jid(), d->client->rootTask(), this, SLOT(resolveContactName()));
 	}
@@ -2549,7 +2549,7 @@ void PsiAccount::client_resourceAvailabl
 		u->setPresenceError("");
 		cpUpdate(*u, r.name(), true);
 
-		if(doAnim && PsiOptions::instance()->getOption("options.ui.contactlist.use-status-change-animation").toBool())
+		if(doAnim && d->options->getOption("options.ui.contactlist.use-status-change-animation").toBool())
 			profileAnimateNick(u->jid());
 
 	}
@@ -2558,7 +2558,7 @@ void PsiAccount::client_resourceAvailabl
 		playSound(eOnline);
 
 	// Do the popup test earlier (to avoid needless JID lookups)
-	if ((popupType == PopupOnline && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.status.online").toBool()) || (popupType == PopupStatusChange && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.status.other-changes").toBool())) {
+	if ((popupType == PopupOnline && d->options->getOption("options.ui.notifications.passive-popups.status.online").toBool()) || (popupType == PopupStatusChange && d->options->getOption("options.ui.notifications.passive-popups.status.other-changes").toBool())) {
 		if(notifyOnlineOk && doPopup && !d->blockTransportPopupList->find(j, popupType == PopupOnline) && !d->noPopup(IncomingStanza)) {
 			UserListItem *u = findFirstRelevant(j);
 			PopupManager::PopupType pt = PopupManager::AlertNone;
@@ -2567,7 +2567,7 @@ void PsiAccount::client_resourceAvailabl
 			else if ( popupType == PopupStatusChange )
 				pt = PopupManager::AlertStatusChange;
 
-			if ((popupType == PopupOnline && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.status.online").toBool()) || (popupType == PopupStatusChange && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.status.other-changes").toBool())) {
+			if ((popupType == PopupOnline && d->options->getOption("options.ui.notifications.passive-popups.status.online").toBool()) || (popupType == PopupStatusChange && d->options->getOption("options.ui.notifications.passive-popups.status.other-changes").toBool())) {
 				psi()->popupManager()->doPopup(this, pt, j, r, u, 0, false);
 			}
 		}
@@ -2652,11 +2652,11 @@ void PsiAccount::client_resourceUnavaila
 		playSound(eOffline);
 
 	// Do the popup test earlier (to avoid needless JID lookups)
-	if(PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.status.offline").toBool() &&
+	if(d->options->getOption("options.ui.notifications.passive-popups.status.offline").toBool() &&
 	   doPopup && !d->blockTransportPopupList->find(j) && !d->noPopup(IncomingStanza)) {
 		UserListItem *u = findFirstRelevant(j);
 
-		if (PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.status.offline").toBool()) {
+		if (d->options->getOption("options.ui.notifications.passive-popups.status.offline").toBool()) {
 			psi()->popupManager()->doPopup(this, PopupManager::AlertOffline, j, r, u, 0, false);
 		}
 	}
@@ -2729,7 +2729,7 @@ void PsiAccount::processIncomingMessage(
 		return;
 
 	// skip headlines?
-	if(_m.type() == "headline" && PsiOptions::instance()->getOption("options.messages.ignore-headlines").toBool())
+	if(_m.type() == "headline" && d->options->getOption("options.messages.ignore-headlines").toBool())
 		return;
 
 	if(_m.type() == "groupchat") {
@@ -2760,9 +2760,9 @@ void PsiAccount::processIncomingMessage(
 	QList<UserListItem*> ul = findRelevant(m.from());
 
 	// ignore events from non-roster JIDs?
-	if (ul.isEmpty() && PsiOptions::instance()->getOption("options.messages.ignore-non-roster-contacts").toBool())
+	if (ul.isEmpty() && d->options->getOption("options.messages.ignore-non-roster-contacts").toBool())
 	{
-		if (PsiOptions::instance()->getOption("options.messages.exclude-muc-from-ignore").toBool())
+		if (d->options->getOption("options.messages.exclude-muc-from-ignore").toBool())
 		{
 #ifdef GROUPCHAT
 			GCMainDlg *w = findDialog<GCMainDlg*>(Jid(_m.from().bare()));
@@ -2809,11 +2809,12 @@ void PsiAccount::processIncomingMessage(
 		m.setType("chat");
 	}
 	else if (m.type() != "headline" && m.invite().isEmpty() && m.mucInvites().isEmpty()) {
-		if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "message")
+		const QString type = d->options->getOption("options.messages.force-incoming-message-type").toString();
+		if (type == "message")
 			m.setType("");
-		else if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "chat")
+		else if (type == "chat")
 			m.setType("chat");
-		else if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "current-open") {
+		else if (type == "current-open") {
 			c = NULL;
 			foreach (ChatDlg *cl, findChatDialogs(m.from(), false)) {
 				if (cl->autoSelectContact() || cl->jid().resource().isEmpty() || m.from().resource() == cl->jid().resource()) {
@@ -2833,7 +2834,7 @@ void PsiAccount::processIncomingMessage(
 	//	m.setType("");
 
 	if( m.messageReceipt() == ReceiptRequest && !m.id().isEmpty() &&
-		PsiOptions::instance()->getOption("options.ui.notifications.send-receipts").toBool()) {
+		d->options->getOption("options.ui.notifications.send-receipts").toBool()) {
 		UserListItem *u;
 		if(j.compare(d->self.jid(), false) || groupchats().contains(j.bare()) || (!d->loginStatus.isInvisible() && (u = d->userList.find(j)) && (u->subscription().type() == Subscription::To || u->subscription().type() == Subscription::Both))) {
 			Message tm(m.from());
@@ -2995,7 +2996,7 @@ void PsiAccount::setStatus(const Status 
 void PsiAccount::showStatusDialog(const QString& presetName)
 {
 	StatusPreset preset;
-	preset.fromOptions(PsiOptions::instance(), presetName);
+	preset.fromOptions(d->options, presetName);
 	Status status(preset.status(), preset.message(), preset.priority().hasValue() ? preset.priority().value() : this->status().priority());
 	StatusSetDlg *w = new StatusSetDlg(this, status, preset.priority().hasValue());
 	connect(w, SIGNAL(set(const XMPP::Status &, bool, bool)), SLOT(setStatus(const XMPP::Status &, bool, bool)));
@@ -3101,7 +3102,7 @@ void PsiAccount::sentInitialPresence()
 
 	// Get the vcard
 	const VCard *vcard = VCardFactory::instance()->vcard(d->jid);
-	if (PsiOptions::instance()->getOption("options.vcard.query-own-vcard-on-login").toBool() || !vcard || vcard->isEmpty() || (vcard->nickName().isEmpty() && vcard->fullName().isEmpty()))
+	if (d->options->getOption("options.vcard.query-own-vcard-on-login").toBool() || !vcard || vcard->isEmpty() || (vcard->nickName().isEmpty() && vcard->fullName().isEmpty()))
 		VCardFactory::instance()->getVCard(d->jid, d->client->rootTask(), this, SLOT(slotCheckVCard()));
 	else {
 		d->nickFromVCard = true;
@@ -3195,37 +3196,37 @@ void PsiAccount::playSound(PsiAccount::S
 	QString str;
 	switch (onevent) {
 	case eMessage:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.incoming-message").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.incoming-message").toString();
 		break;
 	case eChat1:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.new-chat").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.new-chat").toString();
 		break;
 	case eChat2:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.chat-message").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.chat-message").toString();
 		break;
 	case eGroupChat:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.groupchat-message").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.groupchat-message").toString();
 		break;
 	case eHeadline:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.incoming-headline").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.incoming-headline").toString();
 		break;
 	case eSystem:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.system-message").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.system-message").toString();
 		break;
 	case eOnline:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.contact-online").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.contact-online").toString();
 		break;
 	case eOffline:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.contact-offline").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.contact-offline").toString();
 		break;
 	case eSend:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.outgoing-chat").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.outgoing-chat").toString();
 		break;
 	case eIncomingFT:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.incoming-file-transfer").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.incoming-file-transfer").toString();
 		break;
 	case eFTComplete:
-		str = PsiOptions::instance()->getOption("options.ui.notifications.sounds.completed-file-transfer").toString();
+		str = d->options->getOption("options.ui.notifications.sounds.completed-file-transfer").toString();
 		break;
 	default:
 		Q_ASSERT(false);
@@ -3242,7 +3243,7 @@ void PsiAccount::playSound(PsiAccount::S
 		return;
 
 	// no away sounds?
-	if(PsiOptions::instance()->getOption("options.ui.notifications.sounds.silent-while-away").toBool() && (s == STATUS_AWAY || s == STATUS_XA))
+	if(d->options->getOption("options.ui.notifications.sounds.silent-while-away").toBool() && (s == STATUS_AWAY || s == STATUS_XA))
 		return;
 
 	d->psi->playSound(str);
@@ -3505,7 +3506,7 @@ void PsiAccount::actionJoin(const Confer
 	w->setPassword(bookmark.password());
 
 	if(reason != MUCJoinDlg::MucAutoJoin
-	   || !PsiOptions::instance()->getOption("options.ui.muc.hide-on-autojoin").toBool())
+	   || !d->options->getOption("options.ui.muc.hide-on-autojoin").toBool())
 		w->show();
 	if (connectImmediately) {
 		w->doJoin(reason);
@@ -3866,7 +3867,7 @@ ChatDlg *PsiAccount::ensureChatDlg(const
 		 * only way */
 		//TODO: This doesn't work as expected atm, it doesn't seem to reparent the tabset
 		QWidget *window=c;
-		if ( PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool() )
+		if ( d->options->getOption("options.ui.tabs.use-tabs").toBool() )
 			window = d->tabManager->getManagingTabs(c);
 		if(window && window->isHidden()) {
 			QPixmap pp = c->windowIcon().pixmap(16,16); // FIXME: 16x16 is just a guess of what size old QWidget::icon() used
@@ -3914,7 +3915,7 @@ void PsiAccount::changeStatus(int x, boo
 		}
 	}
 
-	PsiOptions* o = PsiOptions::instance();
+	PsiOptions* o = d->options;
 
 	//If option name is not empty (it is empty for Invisible) and option is set to ask for message, show dialog
 	if (forceDialog || (!optionName.isEmpty() && o->getOption("options.status.ask-for-message-on-" + optionName).toBool())) {
@@ -4130,7 +4131,7 @@ void PsiAccount::actionDefault(const Jid
 		}
 	}
 	else {
-		if(PsiOptions::instance()->getOption("options.messages.default-outgoing-message-type").toString() == "message")
+		if(d->options->getOption("options.messages.default-outgoing-message-type").toString() == "message")
 			actionSendMessage(u->jid());
 		else
 			actionOpenChat(u->jid());
@@ -4634,7 +4635,7 @@ void PsiAccount::dj_sendMessage(const Me
 	UserListItem *u = findFirstRelevant(m.to());
 	Message nm = m;
 
-	if(PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "current-open") {
+	if(d->options->getOption("options.messages.force-incoming-message-type").toString() == "current-open") {
 		if(u) {
 			switch(u->lastMessageType()) {
 				case 0: nm.setType(""); break;
@@ -5059,7 +5060,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 
 		// Pass message events to chat window
 		if ((m.containsEvents() || m.chatState() != StateNone) && m.body().isEmpty()) {
-			if (PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool()) {
+			if (d->options->getOption("options.messages.send-composing-events").toBool()) {
 				ChatDlg *c = findChatDialogEx(e->from());
 				if (c) {
 					c->setJid(e->from());
@@ -5077,7 +5078,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 			}
 		}
 		else if (m.messageReceipt() == ReceiptReceived) {
-			if (PsiOptions::instance()->getOption("options.ui.notifications.request-receipts").toBool()) {
+			if (d->options->getOption("options.ui.notifications.request-receipts").toBool()) {
 				foreach (ChatDlg *c, findChatDialogs(e->from(), false)) {
 					if (c->autoSelectContact()  || c->jid().resource().isEmpty() || e->from().resource() == c->jid().resource()) {
 						if (c->autoSelectContact())
@@ -5108,7 +5109,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 #endif
 				c->incomingMessage(m);
 				soundType = eChat2;
-				if((PsiOptions::instance()->getOption("options.ui.chat.alert-for-already-open-chats").toBool() && !c->isActiveTab())
+				if((d->options->getOption("options.ui.chat.alert-for-already-open-chats").toBool() && !c->isActiveTab())
 					|| (c->isTabbed() && c->getManagingTabDlg()->isHidden()) ) {
 					// to alert the chat also, we put it in the queue
 					me->setSentToChatWindow(true);
@@ -5116,7 +5117,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 				else {
 					putToQueue = false;
 #ifdef YAPSI
-					if (!d->noPopup(activationType) && PsiOptions::instance()->getOption("options.ui.chat.auto-popup").toBool()) {
+					if (!d->noPopup(activationType) && d->options->getOption("options.ui.chat.auto-popup").toBool()) {
 						openChat(e->from(), activationType);
 					}
 #endif
@@ -5197,7 +5198,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 			}
 			else if (userListItem && userListItem->inList()) {
 #else
-			if(PsiOptions::instance()->getOption("options.subscriptions.automatically-allow-authorization").toBool()) {
+			if(d->options->getOption("options.subscriptions.automatically-allow-authorization").toBool()) {
 #endif
 				// Check if we want to request auth as well
 				UserListItem *u = d->userList.find(ae->from());
@@ -5211,7 +5212,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 			}
 		}
 		else if(ae->authType() == "subscribed") {
-			if(!PsiOptions::instance()->getOption("options.ui.notifications.successful-subscription").toBool())
+			if(!d->options->getOption("options.ui.notifications.successful-subscription").toBool())
 				putToQueue = false;
 		}
 		else if(ae->authType() == "unsubscribe") {
@@ -5244,12 +5245,12 @@ void PsiAccount::handleEvent(PsiEvent* e
 			r = *(u->priority());
 		}
 
-		if ((popupType == PopupManager::AlertChat      && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-chat").toBool())     ||
-		    (popupType == PopupManager::AlertMessage   && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-message").toBool())  ||
-		    (popupType == PopupManager::AlertHeadline  && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-headline").toBool()) ||
-		    (popupType == PopupManager::AlertFile      && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-file-transfer").toBool()) ||
-		    (popupType == PopupManager::AlertAvCall    && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-message").toBool()) ||
-		    (popupType == PopupManager::AlertComposing && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.composing").toBool()))
+		if ((popupType == PopupManager::AlertChat      && d->options->getOption("options.ui.notifications.passive-popups.incoming-chat").toBool())     ||
+		    (popupType == PopupManager::AlertMessage   && d->options->getOption("options.ui.notifications.passive-popups.incoming-message").toBool())  ||
+		    (popupType == PopupManager::AlertHeadline  && d->options->getOption("options.ui.notifications.passive-popups.incoming-headline").toBool()) ||
+		    (popupType == PopupManager::AlertFile      && d->options->getOption("options.ui.notifications.passive-popups.incoming-file-transfer").toBool()) ||
+		    (popupType == PopupManager::AlertAvCall    && d->options->getOption("options.ui.notifications.passive-popups.incoming-message").toBool()) ||
+		    (popupType == PopupManager::AlertComposing && d->options->getOption("options.ui.notifications.passive-popups.composing").toBool()))
 		{
 #ifdef PSI_PLUGINS
 			if(e->type() != PsiEvent::Plugin) {
@@ -5403,7 +5404,7 @@ void PsiAccount::queueEvent(PsiEvent* e,
 	d->eventQueue->enqueue(e);
 
 	updateReadNext(e->jid());
-	if(PsiOptions::instance()->getOption("options.ui.contactlist.raise-on-new-event").toBool())
+	if(d->options->getOption("options.ui.contactlist.raise-on-new-event").toBool())
 		d->psi->raiseMainwin();
 
 	// update the roster
@@ -5424,14 +5425,14 @@ void PsiAccount::queueEvent(PsiEvent* e,
 			MessageEvent *me = (MessageEvent *)e;
 			const Message &m = me->message();
 			if (m.type() == "chat")
-				doPopup = PsiOptions::instance()->getOption("options.ui.chat.auto-popup").toBool();
+				doPopup = d->options->getOption("options.ui.chat.auto-popup").toBool();
 			else if (m.type() == "headline")
-				doPopup = PsiOptions::instance()->getOption("options.ui.message.auto-popup-headlines").toBool();
+				doPopup = d->options->getOption("options.ui.message.auto-popup-headlines").toBool();
 			else
-				doPopup = PsiOptions::instance()->getOption("options.ui.message.auto-popup").toBool();
+				doPopup = d->options->getOption("options.ui.message.auto-popup").toBool();
 		}
 		else if (e->type() == PsiEvent::File) {
-			doPopup = PsiOptions::instance()->getOption("options.ui.file-transfer.auto-popup").toBool();
+			doPopup = d->options->getOption("options.ui.file-transfer.auto-popup").toBool();
 		}
 		else if (e->type() == PsiEvent::Auth && !EventDlg::messagingEnabled())
 			doPopup = false;
@@ -5440,13 +5441,13 @@ void PsiAccount::queueEvent(PsiEvent* e,
 			doPopup = false;
 #endif
 		else {
-			doPopup = PsiOptions::instance()->getOption("options.ui.message.auto-popup").toBool();
+			doPopup = d->options->getOption("options.ui.message.auto-popup").toBool();
 		}
 
 		// Popup
 		if (doPopup) {
 			UserListItem *u = find(e->jid());
-			if (u && (!PsiOptions::instance()->getOption("options.ui.notifications.popup-dialogs.suppress-when-not-on-roster").toBool() || u->inList()))
+			if (u && (!d->options->getOption("options.ui.notifications.popup-dialogs.suppress-when-not-on-roster").toBool() || u->inList()))
 				openNextEvent(*u, activationType);
 		}
 	}
@@ -5683,7 +5684,7 @@ void PsiAccount::openChat(const Jid& j, 
 
 void PsiAccount::chatMessagesRead(const Jid &j)
 {
-//	if(PsiOptions::instance()->getOption("options.ui.chat.alert-for-already-open-chats").toBool()) {
+//	if(d->options->getOption("options.ui.chat.alert-for-already-open-chats").toBool()) {
 		processChats(j);
 //	}
 }
@@ -5711,7 +5712,7 @@ void PsiAccount::openGroupChat(const Jid
 	w->setPassword(d->client->groupChatPassword(j.domain(), j.node()));
 	connect(w, SIGNAL(aSend(const Message &)), SLOT(dj_sendMessage(const Message &)));
 	connect(d->psi, SIGNAL(emitOptionsUpdate()), w, SLOT(optionsUpdate()));
-	if(reason != MUCJoinDlg::MucAutoJoin || !PsiOptions::instance()->getOption("options.ui.muc.hide-on-autojoin").toBool()) {
+	if(reason != MUCJoinDlg::MucAutoJoin || !d->options->getOption("options.ui.muc.hide-on-autojoin").toBool()) {
 		w->ensureTabbedCorrectly();
 		if (activationType == UserAction)
 			w->bringToFront();
@@ -5744,7 +5745,7 @@ void PsiAccount::groupChatLeave(const QS
 {
 	Jid j(room + '@' + host);
 	d->groupchats.removeAll(j.bare());
-	d->client->groupChatLeave(host, room, PsiOptions::instance()->getOption("options.muc.leave-status-message").toString());
+	d->client->groupChatLeave(host, room, d->options->getOption("options.muc.leave-status-message").toString());
 	UserListItem *u = find(j);
 	if (u) {
 		d->removeEntry(j);
@@ -5794,7 +5795,7 @@ void PsiAccount::client_groupChatJoined(
 	w->joined();
 
 	openGroupChat(j, UserAction, r);
-	if(r == MUCJoinDlg::MucAutoJoin && PsiOptions::instance()->getOption("options.ui.muc.hide-on-autojoin").toBool()) {
+	if(r == MUCJoinDlg::MucAutoJoin && d->options->getOption("options.ui.muc.hide-on-autojoin").toBool()) {
 		m = findDialog<GCMainDlg*>(Jid(j.bare()));
 		if(m) {
 			QTimer::singleShot(0, m, SLOT(hideTab()));
@@ -5906,7 +5907,7 @@ void PsiAccount::slotCheckVCard()
 	}
 
 #ifndef YAPSI
-	if (j->vcard().isEmpty() && PsiOptions::instance()->getOption("options.vcard.query-own-vcard-on-login").toBool())
+	if (j->vcard().isEmpty() && d->options->getOption("options.vcard.query-own-vcard-on-login").toBool())
 	{
 		changeVCard();
 		return;
@@ -6268,27 +6269,27 @@ void PsiAccount::optionsUpdate()
 #endif
 
 	// Chat states
-	setSendChatState(PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool());
+	setSendChatState(d->options->getOption("options.messages.send-composing-events").toBool());
 
 	//Receipts
-	setReceipts(PsiOptions::instance()->getOption("options.ui.notifications.send-receipts").toBool()); //FIXME second presence?
+	setReceipts(d->options->getOption("options.ui.notifications.send-receipts").toBool()); //FIXME second presence?
 
 	// Remote Controlling
-	setRCEnabled(PsiOptions::instance()->getOption("options.external-control.adhoc-remote-control.enable").toBool());
+	setRCEnabled(d->options->getOption("options.external-control.adhoc-remote-control.enable").toBool());
 
 	// Roster item exchange
-	d->rosterItemExchangeTask->setIgnoreNonRoster(PsiOptions::instance()->getOption("options.messages.ignore-non-roster-contacts").toBool());
+	d->rosterItemExchangeTask->setIgnoreNonRoster(d->options->getOption("options.messages.ignore-non-roster-contacts").toBool());
 
 	// Caps manager
-	d->capsManager->setEnabled(PsiOptions::instance()->getOption("options.service-discovery.enable-entity-capabilities").toBool());
+	d->capsManager->setEnabled(d->options->getOption("options.service-discovery.enable-entity-capabilities").toBool());
 
-	d->useOffline = PsiOptions::instance()->getOption("options.status.auto-away.use-offline").toBool();
-	d->useNotAvailable = PsiOptions::instance()->getOption("options.status.auto-away.use-not-availible").toBool();
-	d->useAway = PsiOptions::instance()->getOption("options.status.auto-away.use-away").toBool();
-	d->offlineAfter = PsiOptions::instance()->getOption("options.status.auto-away.offline-after").toInt();
-	d->notAvailableAfter = PsiOptions::instance()->getOption("options.status.auto-away.not-availible-after").toInt();
-	d->awayAfter = PsiOptions::instance()->getOption("options.status.auto-away.away-after").toInt();
-	d->menuXA = PsiOptions::instance()->getOption("options.ui.menu.status.xa").toBool();
+	d->useOffline = d->options->getOption("options.status.auto-away.use-offline").toBool();
+	d->useNotAvailable = d->options->getOption("options.status.auto-away.use-not-availible").toBool();
+	d->useAway = d->options->getOption("options.status.auto-away.use-away").toBool();
+	d->offlineAfter = d->options->getOption("options.status.auto-away.offline-after").toInt();
+	d->notAvailableAfter = d->options->getOption("options.status.auto-away.not-availible-after").toInt();
+	d->awayAfter = d->options->getOption("options.status.auto-away.away-after").toInt();
+	d->menuXA = d->options->getOption("options.ui.menu.status.xa").toBool();
 }
 
 
--- psi.orig/src/psicon.cpp
+++ psi/src/psicon.cpp
@@ -476,13 +476,13 @@ bool PsiCon::init()
 #elif defined(USE_QDCHECKER)
 	d->autoUpdater = new QDChecker();
 #endif
-	if (PsiOptions::instance()->getOption("options.auto-update.check-on-startup").toBool() && d->autoUpdater)
+	if (options->getOption("options.auto-update.check-on-startup").toBool() && d->autoUpdater)
 		d->autoUpdater->checkForUpdates();
 
 	d->iconSelect = new IconSelectPopup(0);
 	connect(PsiIconset::instance(), SIGNAL(emoticonsChanged()), d, SLOT(updateIconSelect()));
 
-	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	const QString css = options->getOption("options.ui.chat.css").toString();
 	if (!css.isEmpty())
 		d->iconSelect->setStyleSheet(css);
 
@@ -517,8 +517,8 @@ bool PsiCon::init()
 	Anim::setMainThread(QThread::currentThread());
 
 	// setup the main window
-	d->mainwin = new MainWin(PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool(), (PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() && PsiOptions::instance()->getOption("options.contactlist.use-toolwindow").toBool()), this);
-	d->mainwin->setUseDock(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool());
+	d->mainwin = new MainWin(options->getOption("options.ui.contactlist.always-on-top").toBool(), (options->getOption("options.ui.systemtray.enable").toBool() && options->getOption("options.contactlist.use-toolwindow").toBool()), this);
+	d->mainwin->setUseDock(options->getOption("options.ui.systemtray.enable").toBool());
 	d->bossKey = new BossKey(d->mainwin);
 
 	Q_UNUSED(psiConObject);
@@ -544,8 +544,8 @@ bool PsiCon::init()
 	d->mainwin->setGeometryOptionPath("options.ui.contactlist.saved-window-geometry");
 
 	if (result &&
-	    !(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() &&
-	      PsiOptions::instance()->getOption("options.contactlist.hide-on-start").toBool()))
+	    !(options->getOption("options.ui.systemtray.enable").toBool() &&
+	      options->getOption("options.contactlist.hide-on-start").toBool()))
 	{
 		d->mainwin->show();
 	}
@@ -645,15 +645,17 @@ bool PsiCon::init()
 		}
 		
 		// Disable accounts if necessary, and overwrite locked properties
-		if (PsiOptions::instance()->getOption("options.ui.account.single").toBool() || !PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty()) {
+		bool single = options->getOption("options.ui.account.single").toBool();
+		QString domain = options->getOption("options.account.domain").toString();
+		if (single || !domain.isEmpty()) {
 			bool haveEnabled = false;
 			for(UserAccountList::Iterator it = accs.begin(); it != accs.end(); ++it) {
 				// With single accounts, only modify the first account
-				if (PsiOptions::instance()->getOption("options.ui.account.single").toBool()) {
+				if (single) {
 					if (!haveEnabled) {
 						haveEnabled = it->opt_enabled;
 						if (it->opt_enabled) {
-							if (!PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty())
+							if (!domain.isEmpty())
 								it->jid = JIDUtil::accountFromString(Jid(it->jid).node()).bare();
 						}
 					}
@@ -662,7 +664,7 @@ bool PsiCon::init()
 				}
 				else {
 					// Overwirte locked properties
-					if (!PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty())
+					if (!domain.isEmpty())
 						it->jid = JIDUtil::accountFromString(Jid(it->jid).node()).bare();
 				}
 			}
@@ -680,7 +682,7 @@ bool PsiCon::init()
 		emit statusMessageChanged(d->contactList->defaultAccount()->status().status());
 
 	// show tip of the day
-	if ( PsiOptions::instance()->getOption("options.ui.tip.show").toBool() ) {
+	if ( options->getOption("options.ui.tip.show").toBool() ) {
 		TipDlg::show(this);
 	}
 
@@ -698,11 +700,11 @@ bool PsiCon::init()
 
 	if(AvCallManager::isSupported()) {
 		options_avcall_update();
-		AvCallManager::setAudioOutDevice(PsiOptions::instance()->getOption("options.media.devices.audio-output").toString());
-		AvCallManager::setAudioInDevice(PsiOptions::instance()->getOption("options.media.devices.audio-input").toString());
-		AvCallManager::setVideoInDevice(PsiOptions::instance()->getOption("options.media.devices.video-input").toString());
-		AvCallManager::setBasePort(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt());
-		AvCallManager::setExternalAddress(PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString());
+		AvCallManager::setAudioOutDevice(options->getOption("options.media.devices.audio-output").toString());
+		AvCallManager::setAudioInDevice(options->getOption("options.media.devices.audio-input").toString());
+		AvCallManager::setVideoInDevice(options->getOption("options.media.devices.video-input").toString());
+		AvCallManager::setBasePort(options->getOption("options.p2p.bytestreams.listen-port").toInt());
+		AvCallManager::setExternalAddress(options->getOption("options.p2p.bytestreams.external-address").toString());
 	}
 
 
@@ -1431,7 +1433,7 @@ void PsiCon::slotApplyOptions()
 
 #ifndef Q_WS_MAC
 	PsiOptions *o = PsiOptions::instance();
-	if (!PsiOptions::instance()->getOption("options.ui.contactlist.show-menubar").toBool()) {
+	if (!o->getOption("options.ui.contactlist.show-menubar").toBool()) {
 		// check if all toolbars are disabled
 		bool toolbarsVisible = false;
 		foreach(QString base, o->getChildOptionNames("options.ui.contactlist.toolbars", true, true)) {
@@ -1446,7 +1448,7 @@ void PsiCon::slotApplyOptions()
 			QMessageBox::warning(0, tr("Warning"),
 				tr("You can not disable <i>all</i> toolbars <i>and</i> the menubar. If you do so, you will be unable to enable them back, when you'll change your mind."),
 				tr("I understand"));
-			PsiOptions::instance()->setOption("options.ui.contactlist.show-menubar", true);
+			o->setOption("options.ui.contactlist.show-menubar", true);
 		}
 	}
 #endif
@@ -1454,16 +1456,16 @@ void PsiCon::slotApplyOptions()
 	updateS5BServerAddresses();
 
 	if(AvCallManager::isSupported()) {
-		AvCallManager::setAudioOutDevice(PsiOptions::instance()->getOption("options.media.devices.audio-output").toString());
-		AvCallManager::setAudioInDevice(PsiOptions::instance()->getOption("options.media.devices.audio-input").toString());
-		AvCallManager::setVideoInDevice(PsiOptions::instance()->getOption("options.media.devices.video-input").toString());
-		AvCallManager::setBasePort(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt());
-		AvCallManager::setExternalAddress(PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString());
+		AvCallManager::setAudioOutDevice(o->getOption("options.media.devices.audio-output").toString());
+		AvCallManager::setAudioInDevice(o->getOption("options.media.devices.audio-input").toString());
+		AvCallManager::setVideoInDevice(o->getOption("options.media.devices.video-input").toString());
+		AvCallManager::setBasePort(o->getOption("options.p2p.bytestreams.listen-port").toInt());
+		AvCallManager::setExternalAddress(o->getOption("options.p2p.bytestreams.external-address").toString());
 	}
 
 	// mainwin stuff
-	d->mainwin->setWindowOpts(PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool(), (PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() && PsiOptions::instance()->getOption("options.contactlist.use-toolwindow").toBool()));
-	d->mainwin->setUseDock(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool());
+	d->mainwin->setWindowOpts(o->getOption("options.ui.contactlist.always-on-top").toBool(), (o->getOption("options.ui.systemtray.enable").toBool() && o->getOption("options.contactlist.use-toolwindow").toBool()));
+	d->mainwin->setUseDock(o->getOption("options.ui.systemtray.enable").toBool());
 	d->mainwin->buildToolbars();
 
 	// notify about options change
@@ -1495,9 +1497,10 @@ void PsiCon::queueChanged()
 void PsiCon::startBounce()
 {
 #ifdef Q_WS_MAC
-	if (PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString() != "never") {
+	QString bounce = PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString();
+	if (bounce != "never") {
 		MacDock::startBounce();
-		if (PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString() == "once") {
+		if (bounce == "once") {
 			MacDock::stopBounce();
 		}
 	}
@@ -1555,7 +1558,8 @@ void PsiCon::recentGCAdd(const QString &
 	recentList.prepend(str);
 
 	// trim the list if bigger than 10
-	while(recentList.count() > PsiOptions::instance()->getOption("options.muc.recent-joins.maximum").toInt()) {
+	int max = PsiOptions::instance()->getOption("options.muc.recent-joins.maximum").toInt();
+	while(recentList.count() > max) {
 		recentList.takeLast();
 	}
 	
@@ -1793,17 +1797,18 @@ void PsiCon::updateS5BServerAddresses()
 		slist += (*hit).toString();
 
 	// add external
-	if(!PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString().isEmpty()) {
+	QString extAddr = PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString();
+	if(!extAddr.isEmpty()) {
 		bool found = false;
 		for(QStringList::ConstIterator sit = slist.begin(); sit != slist.end(); ++sit) {
 			const QString &s = *sit;
-			if(s == PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString()) {
+			if(s == extAddr) {
 				found = true;
 				break;
 			}
 		}
 		if(!found)
-			slist += PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString();
+			slist += extAddr;
 	}
 
 	// set up the server
@@ -1815,9 +1820,10 @@ void PsiCon::s5b_init()
 	if(d->s5bServer->isActive())
 		d->s5bServer->stop();
 
-	if (PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt()) {
-		if(!d->s5bServer->start(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt())) {
-			QMessageBox::warning(0, tr("Warning"), tr("Unable to bind to port %1 for Data Transfer.\nThis may mean you are already running another instance of Psi. You may experience problems sending and/or receiving files.").arg(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt()));
+	int port = PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt();
+	if (port) {
+		if(!d->s5bServer->start(port)) {
+			QMessageBox::warning(0, tr("Warning"), tr("Unable to bind to port %1 for Data Transfer.\nThis may mean you are already running another instance of Psi. You may experience problems sending and/or receiving files.").arg(port));
 		}
 	}
 }
--- psi.orig/src/psicontactlistviewdelegate.cpp
+++ psi/src/psicontactlistviewdelegate.cpp
@@ -47,6 +47,10 @@ static const QString showStatusIconsPath
 static const QString statusIconsOverAvatarsPath = "options.ui.contactlist.status-icon-over-avatar";
 static const QString statusSingleOptionPath = "options.ui.contactlist.status-messages.single-line";
 static const QString statusIconsetOptionPath = "options.iconsets.status";
+static const QString allClientsOptionPath = "options.ui.contactlist.show-all-client-icons";
+static const QString slimGroupsOptionPath = "options.ui.look.contactlist.use-slim-group-headings";
+static const QString enableGroupsOptionPath = "options.ui.contactlist.enable-groups";
+static const QString outlinedGroupsOptionPath = "options.ui.look.contactlist.use-outlined-group-headings";
 
 PsiContactListViewDelegate::PsiContactListViewDelegate(ContactListView* parent)
 	: ContactListViewDelegate(parent)
@@ -77,6 +81,10 @@ PsiContactListViewDelegate::PsiContactLi
 	optionChanged(showStatusIconsPath);
 	optionChanged(statusIconsOverAvatarsPath);
 	optionChanged(statusSingleOptionPath);
+	optionChanged(allClientsOptionPath);
+	optionChanged(slimGroupsOptionPath);
+	optionChanged(enableGroupsOptionPath);
+	optionChanged(outlinedGroupsOptionPath);
 }
 
 PsiContactListViewDelegate::~PsiContactListViewDelegate()
@@ -191,7 +199,7 @@ void PsiContactListViewDelegate::drawCon
 		int size = avatarSize_;
 		avatarRect.setSize(QSize(size,size));
 		if(avatarAtLeft_) {
-			avatarRect.translate(PsiOptions::instance()->getOption("options.ui.contactlist.enable-groups").toBool() ? -5:-1, 1);
+			avatarRect.translate(enableGroups_ ? -5:-1, 1);
 			r.setLeft(avatarRect.right() + 3);
 		}
 		else {
@@ -298,14 +306,14 @@ void PsiContactListViewDelegate::drawCon
 	QList<int> rightWidths;
 	if(!isMuc) {
 	if (showClientIcons_) {
-		bool showAllClients = PsiOptions::instance()->getOption("options.ui.contactlist.show-all-client-icons").toBool();
 		const QList<QPixmap> pixList = this->clientPixmap(index);
 
 		for (QList<QPixmap>::ConstIterator it = pixList.begin(); it != pixList.end(); ++it) {
 			const QPixmap &pix = *it;
 			rightPixs.push_back(pix);
 			rightWidths.push_back(pix.width());
-			if(!showAllClients) break;
+			if(!allClients_)
+				break;
 		}
 	}
 
@@ -385,10 +393,9 @@ void PsiContactListViewDelegate::drawGro
 	o.font = *font_;
 	o.fontMetrics = *fontMetrics_;
 	QPalette palette = o.palette;
-	bool b = PsiOptions::instance()->getOption("options.ui.look.contactlist.use-slim-group-headings").toBool();
 	QColor background = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-background");
 	QColor foreground = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-foreground");
-	if (!b)
+	if (!slimGroup_)
 		palette.setColor(QPalette::Base, background);
 	palette.setColor(QPalette::Text, foreground);
 	o.palette = palette;
@@ -396,7 +403,7 @@ void PsiContactListViewDelegate::drawGro
 	drawBackground(painter, o, index);
 
 	QRect r = option.rect;
-	if (!b && PsiOptions::instance()->getOption("options.ui.look.contactlist.use-outlined-group-headings").toBool()) {
+	if (!slimGroup_ && outlinedGroup_) {
 		painter->setPen(QPen(foreground));
 		QRect gr(r);
 		gr.setLeft(contactList()->x());
@@ -417,7 +424,7 @@ void PsiContactListViewDelegate::drawGro
 	QString text = index.data(Qt::ToolTipRole).toString();
 	drawText(painter, o, r, text, index);
 
-	if(b && !(option.state & QStyle::State_Selected)) {
+	if(slimGroup_ && !(option.state & QStyle::State_Selected)) {
 		int h = r.y() + (r.height() / 2);
 		int x = r.left() + fontMetrics_->width(text) + 1;
 		painter->setPen(QPen(background,2));
@@ -439,7 +446,7 @@ void PsiContactListViewDelegate::drawAcc
 	drawBackground(painter, o, index);
 
 	QRect r = option.rect;
-	if (PsiOptions::instance()->getOption("options.ui.look.contactlist.use-outlined-group-headings").toBool()) {
+	if (outlinedGroup_) {
 		painter->setPen(QPen(foreground));
 		painter->drawRect(r);
 	}
@@ -565,6 +572,22 @@ void PsiContactListViewDelegate::optionC
 		statusSingle_ = !PsiOptions::instance()->getOption(statusSingleOptionPath).toBool();
 		contactList()->viewport()->update();
 	}
+	else if(option == allClientsOptionPath) {
+		allClients_= PsiOptions::instance()->getOption(allClientsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == slimGroupsOptionPath) {
+		slimGroup_ = PsiOptions::instance()->getOption(slimGroupsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == enableGroupsOptionPath) {
+		enableGroups_ = PsiOptions::instance()->getOption(enableGroupsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == outlinedGroupsOptionPath) {
+		outlinedGroup_ = PsiOptions::instance()->getOption(outlinedGroupsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
 }
 
 void PsiContactListViewDelegate::rosterIconsSizeChanged(int size)
--- psi.orig/src/psicontactlistviewdelegate.h
+++ psi/src/psicontactlistviewdelegate.h
@@ -70,6 +70,7 @@ private:
 	bool statusSingle_;
 	mutable QHash<QModelIndex, bool> alertingIndexes_;
 	int statusIconSize_;
+	bool enableGroups_, slimGroup_, outlinedGroup_, allClients_;
 };
 
 #endif
--- psi.orig/src/psirosterwidget.cpp
+++ psi/src/psirosterwidget.cpp
@@ -222,6 +222,7 @@ void PsiRosterWidget::optionChanged(cons
 {
 	if (!contactList_)
 		return;
+
 	if (option == contactSortStyleOptionPath) {
 		contactList_->setContactSortStyle(PsiOptions::instance()->getOption(contactSortStyleOptionPath).toString());
 	}
