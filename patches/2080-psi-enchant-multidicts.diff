diff --git a/src/libpsi/tools/spellchecker/enchantchecker.cpp b/src/libpsi/tools/spellchecker/enchantchecker.cpp
index eae6749..2ba0730 100644
--- a/src/libpsi/tools/spellchecker/enchantchecker.cpp
+++ b/src/libpsi/tools/spellchecker/enchantchecker.cpp
@@ -31,42 +31,41 @@
 #include "enchant++.h"
 #include "enchantchecker.h"
 
-EnchantChecker::EnchantChecker() : speller_(NULL)
+EnchantChecker::EnchantChecker()
+	: spellers_(EnchantDictList())
+	, allLanguages_(QStringList())
 {
 	if (enchant::Broker *instance = enchant::Broker::instance())
 	{
-		std::string lang("en_US");
-		std::string probeLang = QLocale().name().toStdString();
-		if (instance->dict_exists(probeLang))
-			lang = probeLang;
-		try {
-			speller_ = enchant::Broker::instance()->request_dict(lang);
-		} catch (enchant::Exception &e) {
-			qWarning() << QString("Enchant error: %1").arg(e.what());
-		}
+		instance->list_dicts(enchantDictDescribeFn, static_cast<void*>(this));
+		setActiveLanguages(getAllLanguages());
 	}
 }
 
 EnchantChecker::~EnchantChecker()
 {
-	delete speller_;
-	speller_ = NULL;
+	clearSpellers();
 }
 
 bool EnchantChecker::isCorrect(const QString& word)
 {
-	if(speller_) {
-		return speller_->check(word.toUtf8().constData());
+	if (spellers_.isEmpty())
+		return true;
+
+	foreach (enchant::Dict* speller, spellers_) {
+		if (speller->check(word.toUtf8().constData()))
+			return true;
 	}
-	return true;
+	return false;
 }
 
 QList<QString> EnchantChecker::suggestions(const QString& word)
 {
 	QList<QString> words;
-	if (speller_) {
+
+	foreach(enchant::Dict* speller, spellers_) {
 		std::vector<std::string> out_suggestions;
-		speller_->suggest(word.toUtf8().constData(), out_suggestions);
+		speller->suggest(word.toUtf8().constData(), out_suggestions);
 		std::vector<std::string>::iterator aE = out_suggestions.end();
 		for (std::vector<std::string>::iterator aI = out_suggestions.begin(); aI != aE; ++aI) {
 			words += QString::fromUtf8(aI->c_str());
@@ -78,10 +77,10 @@ QList<QString> EnchantChecker::suggestions(const QString& word)
 bool EnchantChecker::add(const QString& word)
 {
 	bool result = false;
-	if (speller_) {
+	if (!spellers_.isEmpty()) {
 		QString trimmed_word = word.trimmed();
 		if(!word.isEmpty()) {
-			speller_->add_to_pwl(word.toUtf8().constData());
+			spellers_.first()->add_to_pwl(word.toUtf8().constData());
 			result = true;
 		}
 	}
@@ -90,10 +89,54 @@ bool EnchantChecker::add(const QString& word)
 
 bool EnchantChecker::available() const
 {
-	return (speller_ != NULL);
+	return (spellers_.isEmpty() != true);
 }
 
 bool EnchantChecker::writable() const
 {
 	return false;
 }
+
+QList<QString> EnchantChecker::getAllLanguages() const
+{
+	return allLanguages_;
+}
+
+void EnchantChecker::setActiveLanguages(const QList<QString>& langs)
+{
+	clearSpellers();
+
+	foreach (const QString& lang, langs) {
+		if (!allLanguages_.contains(lang))
+			continue;
+
+		try {
+			spellers_ << enchant::Broker::instance()->request_dict(lang.toStdString());
+		} catch (enchant::Exception &e) {
+			qWarning() << QString("Enchant error: %1").arg(e.what());
+		}
+	}
+}
+
+void EnchantChecker::clearSpellers()
+{
+	qDeleteAll(spellers_);
+	spellers_.clear();
+}
+
+void EnchantChecker::enchantDictDescribeFn(const char *const lang_tag,
+										   const char *const provider_name,
+										   const char *const provider_desc,
+										   const char *const provider_file,
+										   void *user_data)
+{
+	EnchantChecker *enchantChecker = static_cast<EnchantChecker*>(user_data);
+
+	QString lang(lang_tag);
+
+	if (lang.contains('_'))
+		lang.truncate(lang.indexOf('_'));
+
+	if (!enchantChecker->allLanguages_.contains(lang))
+		enchantChecker->allLanguages_ << lang;
+}
diff --git a/src/libpsi/tools/spellchecker/enchantchecker.h b/src/libpsi/tools/spellchecker/enchantchecker.h
index 93aa856..1d6eb66 100644
--- a/src/libpsi/tools/spellchecker/enchantchecker.h
+++ b/src/libpsi/tools/spellchecker/enchantchecker.h
@@ -27,8 +27,7 @@
 #ifndef ENCHANTCHECKER_H
 #define ENCHANTCHECKER_H
 
-#include <QList>
-#include <QString>
+#include <QStringList>
 
 #include "spellchecker.h"
 
@@ -48,8 +47,20 @@ public:
 	virtual bool available() const;
 	virtual bool writable() const;
 
+	virtual void setActiveLanguages(const QList<QString>& langs);
+	virtual QList<QString> getAllLanguages() const;
+
 private:
-	enchant::Dict* speller_;
+	static void enchantDictDescribeFn(const char *const lang_tag,
+									  const char *const provider_name,
+									  const char *const provider_desc,
+									  const char *const provider_file,
+									  void *user_data);
+	void clearSpellers();
+
+	typedef QList<enchant::Dict*> EnchantDictList;
+	EnchantDictList spellers_;
+	QStringList allLanguages_;
 };
 
 #endif
