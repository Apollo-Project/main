--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -2675,10 +2675,7 @@ void PsiAccount::processIncomingMessage(
 		}
 
 		// change the type?
-		if (!EventDlg::messagingEnabled()) {
-			m.setType("chat");
-		}
-		else if (m.type() != "headline" && m.invite().isEmpty() && m.mucInvites().isEmpty()) {
+		if (m.type() != "headline" && m.invite().isEmpty() && m.mucInvites().isEmpty()) {
 			const QString type = PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString();
 			if (type == "message")
 				m.setType("");
@@ -3571,7 +3568,7 @@ void PsiAccount::cpUpdate(const UserList
 EventDlg *PsiAccount::ensureEventDlg(const Jid &j)
 {
 	EventDlg *w = findDialog<EventDlg*>(j);
-	if (!w && EventDlg::messagingEnabled())
+	if (!w)
 		w = new EventDlg(j, this, true);
 
 	if (w) {
@@ -3821,7 +3818,7 @@ void PsiAccount::actionRecvRosterExchang
 
 void PsiAccount::actionSendMessage(const Jid &j)
 {
-	EventDlg *w = d->psi->createEventDlg(j.full(), this);
+	EventDlg *w = d->psi->createMessageDlg(j.full(), this);
 	if (!w)
 		return;
 	w->show();
@@ -3839,7 +3836,7 @@ void PsiAccount::actionSendMessage(const
 		str += (*it).full();
 	}
 
-	EventDlg *w = d->psi->createEventDlg(str, this);
+	EventDlg *w = d->psi->createMessageDlg(str, this);
 	if (!w)
 		return;
 	w->show();
@@ -3847,7 +3844,7 @@ void PsiAccount::actionSendMessage(const
 
 void PsiAccount::actionSendUrl(const Jid &j)
 {
-	EventDlg *w = d->psi->createEventDlg(j.full(), this);
+	EventDlg *w = d->psi->createMessageDlg(j.full(), this);
 	if (!w)
 		return;
 	w->setUrlOnShow();
@@ -4358,7 +4355,7 @@ void PsiAccount::dj_sendMessage(const Me
 
 void PsiAccount::dj_newMessage(const Jid &jid, const QString &body, const QString &subject, const QString &thread)
 {
-	EventDlg *w = d->psi->createEventDlg(jid.full(), this);
+	EventDlg *w = d->psi->createMessageDlg(jid.full(), this);
 	if (!w)
 		return;
 
@@ -5028,8 +5025,6 @@ void PsiAccount::queueEvent(const PsiEve
 		else if (e->type() == PsiEvent::File) {
 			doPopup = PsiOptions::instance()->getOption("options.ui.file-transfer.auto-popup").toBool();
 		}
-		else if (e->type() == PsiEvent::Auth && !EventDlg::messagingEnabled())
-			doPopup = false;
 		else {
 			doPopup = PsiOptions::instance()->getOption("options.ui.message.auto-popup").toBool();
 		}
--- git.orig/src/psicon.cpp
+++ git/src/psicon.cpp
@@ -886,20 +886,25 @@ void PsiCon::doNewBlankMessage()
 	if(!account)
 		return;
 
-	EventDlg *w = createEventDlg("", account);
+	EventDlg *w = createMessageDlg("", account);
 	if (!w)
 		return;
 
 	w->show();
 }
 
-// FIXME: smells fishy. Refactor! Probably create a common class for all dialogs and
-// call optionsUpdate() automatically.
-EventDlg *PsiCon::createEventDlg(const QString &to, PsiAccount *pa)
+EventDlg *PsiCon::createMessageDlg(const QString &to, PsiAccount *pa)
 {
 	if (!EventDlg::messagingEnabled())
 		return 0;
 
+	return createEventDlg(to, pa);
+}
+
+// FIXME: smells fishy. Refactor! Probably create a common class for all dialogs and
+// call optionsUpdate() automatically.
+EventDlg *PsiCon::createEventDlg(const QString &to, PsiAccount *pa)
+{
 	EventDlg *w = new EventDlg(to, this, pa);
 	connect(this, SIGNAL(emitOptionsUpdate()), w, SLOT(optionsUpdate()));
 	return w;
@@ -1604,26 +1609,12 @@ void PsiCon::processEvent(const PsiEvent
 		const Message &m = me->message();
 		bool emptyForm = m.getForm().fields().empty();
 		// FIXME: Refactor this, PsiAccount and PsiEvent out
-		if ((m.type() == "chat" && emptyForm)
-			|| !EventDlg::messagingEnabled()) {
+		if (m.type() == "chat" && emptyForm) {
 			isChat = true;
 			sentToChatWindow = me->sentToChatWindow();
 		}
 	}
 
-	if (e->type() == PsiEvent::Auth && !EventDlg::messagingEnabled()) {
-		if (e.staticCast<AuthEvent>()->authType() == "subscribe") {
-#ifdef YAPSI
-			bringToFront(d->mainwin);
-			return;
-#else
-			e->account()->dj_addAuth(e->jid());
-#endif
-		}
-		e->account()->eventQueue()->dequeue(e);
-		return;
-	}
-
 	if ( isChat ) {
 		PsiAccount* account = e->account();
 		XMPP::Jid from = e->from();
--- git.orig/src/psicon.h
+++ git/src/psicon.h
@@ -110,6 +110,7 @@ public:
 	const QStringList & recentNodeList() const;
 	void recentNodeAdd(const QString &);
 
+	EventDlg *createMessageDlg(const QString &, PsiAccount*);
 	EventDlg *createEventDlg(const QString &, PsiAccount*);
 	void updateContactGlobal(PsiAccount *, const Jid &);
 
