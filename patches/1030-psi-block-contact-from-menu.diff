--- git.orig/src/contactlistmodel.cpp
+++ git/src/contactlistmodel.cpp
@@ -540,6 +540,9 @@ QVariant ContactListModel::contactData(c
 	else if (role == MucMessagesRole) {
 		return QVariant(contact->userListItem().pending());
 	}
+	else if (role == BlockRole) {
+		return QVariant(contact->isBlocked());
+	}
 #ifdef YAPSI
 	else if (role == Qt::ForegroundRole) {
 		return QVariant(Ya::statusColor(contact->status().type()));
--- git.orig/src/contactlistmodel.h
+++ git/src/contactlistmodel.h
@@ -84,6 +84,7 @@ public:
 		AvatarRole = Qt::UserRole + 28,
 		IsMucRole = Qt::UserRole + 29,
 		MucMessagesRole = Qt::UserRole + 30,
+		BlockRole = Qt::UserRole + 31,
 
 		// groups
 		ExpandedRole = Qt::UserRole + 12,
--- git.orig/src/privacy/privacydlg.cpp
+++ git/src/privacy/privacydlg.cpp
@@ -48,11 +48,11 @@ PrivacyDlg::PrivacyDlg(const QString& ac
 	connect(ui_.cb_default,SIGNAL(activated(int)),SLOT(default_selected(int)));
 	connect(ui_.cb_lists,SIGNAL(activated(int)),SLOT(list_selected(int)));
 	connect(ui_.cb_lists,SIGNAL(currentIndexChanged(int)),SLOT(list_changed(int)));
-	connect(manager_,SIGNAL(changeActiveList_success()),SLOT(change_succeeded()));
+	connect(manager_,SIGNAL(changeActiveList_success(QString)),SLOT(changeActiveList_succeeded(QString)));
 	connect(manager_,SIGNAL(changeActiveList_error()),SLOT(change_failed()));
-	connect(manager_,SIGNAL(changeDefaultList_success()),SLOT(change_succeeded()));
+	connect(manager_,SIGNAL(changeDefaultList_success(QString)),SLOT(changeDefaultList_succeeded(QString)));
 	connect(manager_,SIGNAL(changeDefaultList_error()),SLOT(change_failed()));
-	connect(manager_,SIGNAL(changeList_success()),SLOT(changeList_succeeded()));
+	connect(manager_,SIGNAL(changeList_success(QString)),SLOT(changeList_succeeded(QString)));
 	connect(manager_,SIGNAL(changeList_error()),SLOT(changeList_failed()));
 
 	connect(ui_.pb_newList,SIGNAL(clicked()),SLOT(newList()));
@@ -252,8 +252,29 @@ void PrivacyDlg::list_failed()
 	setWidgetsEnabled(true);
 }
 
-void PrivacyDlg::changeList_succeeded()
+void PrivacyDlg::changeActiveList_succeeded(QString name)
 {
+	if(!name.isEmpty() && ui_.cb_active->findText(name) == -1) {
+		ui_.cb_active->addItem(name);
+		ui_.cb_active->setCurrentIndex(ui_.cb_active->findText(name));
+	}
+	change_succeeded();
+}
+
+void PrivacyDlg::changeDefaultList_succeeded(QString name)
+{
+	if(!name.isEmpty() && ui_.cb_default->findText(name) == -1) {
+		ui_.cb_default->addItem(name);
+		ui_.cb_default->setCurrentIndex(ui_.cb_default->findText(name));
+	}
+	change_succeeded();
+}
+
+void PrivacyDlg::changeList_succeeded(QString name)
+{
+	if(!name.isEmpty() && ui_.cb_lists->findText(name) == -1) {
+		ui_.cb_lists->addItem(name);
+	}
 	// If we just deleted a list, select the first list
 	if (model_.list().isEmpty()) {
 		ui_.cb_lists->setCurrentIndex(0);
--- git.orig/src/privacy/privacydlg.h
+++ git/src/privacy/privacydlg.h
@@ -55,9 +55,11 @@ protected slots:
 	void list_selected(int i);
 	void list_changed(int);
 	void list_failed();
-	void changeList_succeeded();
+	void changeList_succeeded(QString);
 	void changeList_failed();
 	void change_succeeded();
+	void changeActiveList_succeeded(QString);
+	void changeDefaultList_succeeded(QString);
 	void change_failed();
 	void close();
 	void addRule();
--- git.orig/src/privacy/privacylist.cpp
+++ git/src/privacy/privacylist.cpp
@@ -51,6 +51,12 @@ void PrivacyList::insertItem(int index, 
 	reNumber();
 }
 
+void PrivacyList::appendItem(const PrivacyListItem& item)
+{
+	insertItem(items_.count(), item);
+}
+
+
 void PrivacyList::reNumber() 
 {
 	unsigned int order = 100;
--- git.orig/src/privacy/privacylist.h
+++ git/src/privacy/privacylist.h
@@ -43,6 +43,7 @@ public:
 	const PrivacyListItem& item(int index) const { return items_.at(index); }
 	void removeItem(int index) { items_.removeAt(index); }
 	void insertItem(int index, const PrivacyListItem& item);
+	void appendItem(const PrivacyListItem& item);
 	bool moveItemUp(int index);
 	bool moveItemDown(int index);
 	bool onlyBlockItems() const;
--- git.orig/src/privacy/privacymanager.h
+++ git/src/privacy/privacymanager.h
@@ -40,11 +40,11 @@ public:
 	virtual void requestList(const QString& name) = 0;
 
 signals:
-	void changeDefaultList_success();
+	void changeDefaultList_success(QString);
 	void changeDefaultList_error();
-	void changeActiveList_success();
+	void changeActiveList_success(QString);
 	void changeActiveList_error();
-	void changeList_success();
+	void changeList_success(QString);
 	void changeList_error();
 	void defaultListAvailable(const PrivacyList&);
 	void defaultListError();
--- git.orig/src/privacy/psiprivacymanager.cpp
+++ git/src/privacy/psiprivacymanager.cpp
@@ -23,12 +23,30 @@
 #include "xmpp_xmlcommon.h"
 #include "xmpp_task.h"
 #include "xmpp_jid.h"
+#include "xmpp_tasks.h"
+#include "userlist.h"
 #include "psiprivacymanager.h"
 #include "privacymanager.h"
 #include "privacylist.h"
+#include "psicon.h"
+#include "contactupdatesmanager.h"
+#include "psiaccount.h"
 
 #define PRIVACY_NS "jabber:iq:privacy"
 
+static const QString BLOCKED_LIST_NAME = "blocked";
+
+static XMPP::Jid processJid(const XMPP::Jid& jid)
+{
+	return jid.withResource("");
+}
+
+static bool privacyListItemForJid(const PrivacyListItem& item, const Jid& jid)
+{
+	return item.type() == PrivacyListItem::JidType &&
+	       processJid(item.value()) == processJid(jid);
+}
+
 using namespace XMPP;
 
 // -----------------------------------------------------------------------------
@@ -46,9 +64,12 @@ public:
 			return false;
 		
 		QString ns = queryNS(e);
-		if(ns == "jabber:iq:privacy") {
-			// TODO: Do something with update
-			
+		if (ns == PRIVACY_NS) {
+			QDomElement listTag = findSubTag(queryTag(e), "list", 0);
+			if (!listTag.isNull()) {
+				emit privacyListChanged(listTag.attribute("name"));
+			}
+
 			// Confirm receipt
 			QDomElement iq = createIQ(doc(), "result", e.attribute("from"), e.attribute("id"));
 			send(iq);
@@ -57,6 +78,9 @@ public:
 
 		return false;
 	}
+
+signals:
+	void privacyListChanged(const QString& name);
 };
 
 // -----------------------------------------------------------------------------
@@ -205,6 +229,9 @@ public:
 		}
 		return true;
 	}
+	QString name() {
+		return list_.name();
+	}
 };
 
 class GetPrivacyListTask : public Task
@@ -262,14 +289,38 @@ public:
 
 // -----------------------------------------------------------------------------
 
-PsiPrivacyManager::PsiPrivacyManager(XMPP::Task* rootTask) : rootTask_(rootTask), getDefault_waiting_(false), block_waiting_(false)
-{
-   listener_ = new PrivacyListListener(rootTask_);	
+PsiPrivacyManager::PsiPrivacyManager(PsiAccount* account, XMPP::Task* rootTask) : rootTask_(rootTask), getDefault_waiting_(false), block_waiting_(false)
+		, account_(account)
+		, accountAvailable_(false)
+		, isAvailable_(false)
+{
+	blockedListName_ = BLOCKED_LIST_NAME;
+	listener_ = new PrivacyListListener(rootTask_);
+	connect(listener_, SIGNAL(privacyListChanged(const QString&)), SLOT(privacyListChanged(const QString&)));
+
+	connect(account, SIGNAL(updatedActivity()), SLOT(accountStateChanged()));
+
+	connect(this, SIGNAL(listReceived(const PrivacyList&)), SLOT(newListReceived(const PrivacyList&)));
+	connect(this, SIGNAL(listsReceived(const QString&, const QString&, const QStringList&)), SLOT(newListsReceived(const QString&, const QString&, const QStringList&)));
+	connect(this, SIGNAL(listsError()), SLOT(newListsError()));
+
+	connect(this, SIGNAL(changeDefaultList_success(QString)), SLOT(newChangeDefaultList_success()));
+	connect(this, SIGNAL(changeDefaultList_error()), SLOT(newChangeDefaultList_error()));
+	connect(this, SIGNAL(changeActiveList_success(QString)), SLOT(newChangeActiveList_success()));
+	connect(this, SIGNAL(changeActiveList_error()), SLOT(newChangeActiveList_error()));
 }
 
 PsiPrivacyManager::~PsiPrivacyManager()
 {
 	delete listener_;
+
+	qDeleteAll(lists_);
+}
+
+void PsiPrivacyManager::privacyListChanged(const QString& name)
+{
+	if (!name.isEmpty())
+		requestList(name);
 }
 
 void PsiPrivacyManager::requestListNames()
@@ -379,7 +430,7 @@ void PsiPrivacyManager::changeDefaultLis
 	}
 
 	if (t->success()) {
-		emit changeDefaultList_success();
+		emit changeDefaultList_success(t->name());
 	}
 	else {
 		emit changeDefaultList_error();
@@ -388,6 +439,7 @@ void PsiPrivacyManager::changeDefaultLis
 
 void PsiPrivacyManager::changeActiveList(const QString& name)
 {
+	tmpActiveListName_ = name;
 	SetPrivacyListsTask* t = new SetPrivacyListsTask(rootTask_);
 	t->setActive(name);
 	connect(t,SIGNAL(finished()),SLOT(changeActiveList_finished()));
@@ -403,7 +455,8 @@ void PsiPrivacyManager::changeActiveList
 	}
 
 	if (t->success()) {
-		emit changeActiveList_success();
+		blockedListName_ = tmpActiveListName_ .isEmpty() ? BLOCKED_LIST_NAME : tmpActiveListName_ ;
+		emit changeActiveList_success(t->name());
 	}
 	else {
 		emit changeActiveList_error();
@@ -427,7 +480,7 @@ void PsiPrivacyManager::changeList_finis
 	}
 
 	if (t->success()) {
-		emit changeList_success();
+		emit changeList_success(t->name());
 	}
 	else {
 		emit changeList_error();
@@ -468,4 +521,229 @@ void PsiPrivacyManager::receiveList() 
 	}
 }
 
+
+bool PsiPrivacyManager::isAvailable() const
+{
+	return isAvailable_;
+}
+
+void PsiPrivacyManager::setIsAvailable(bool available)
+{
+	if (available != isAvailable_) {
+		isAvailable_ = available;
+		emit availabilityChanged();
+	}
+}
+
+void PsiPrivacyManager::accountStateChanged()
+{
+	if (!account_->isAvailable()) {
+		setIsAvailable(false);
+	}
+
+	if (account_->isAvailable() && !accountAvailable_) {
+		requestListNames();
+	}
+
+	accountAvailable_ = account_->isAvailable();
+}
+
+static QStringList findDifferences(QStringList previous, QStringList current)
+{
+	QStringList result;
+	foreach(QString i, previous) {
+		if (!current.contains(i))
+			result += i;
+	}
+	return result;
+}
+
+void PsiPrivacyManager::newListReceived(const PrivacyList& list)
+{
+	QStringList previouslyBlockedContacts = blockedContacts();
+
+	if (lists_.contains(list.name()))
+		*lists_[list.name()] = list;
+	else
+		lists_[list.name()] = new PrivacyList(list);
+
+	if (list.name() == blockedListName_)
+		invalidateBlockedListCache();
+
+	QStringList currentlyBlockedContacts = blockedContacts();
+	QStringList updatedContacts;
+	updatedContacts += findDifferences(previouslyBlockedContacts, currentlyBlockedContacts);
+	updatedContacts += findDifferences(currentlyBlockedContacts, previouslyBlockedContacts);
+
+	foreach(QString contact, updatedContacts) {
+		//emit simulateContactOffline(contact);
+
+		if (!isContactBlocked(contact)) {
+			if (isAuthorized(contact)) {
+				JT_Presence* p = new JT_Presence(account_->client()->rootTask());
+				p->pres(processJid(contact), account_->status());
+				p->go(true);
+			}
+
+			{
+				JT_Presence* p = new JT_Presence(account_->client()->rootTask());
+				p->probe(processJid(contact));
+				p->go(true);
+			}
+		}
+	}
+
+	emit listChanged(updatedContacts);
+}
+
+void PsiPrivacyManager::newListsReceived(const QString& defaultList, const QString& activeList, const QStringList& lists)
+{
+	if(!activeList.isEmpty())
+		blockedListName_ = activeList;
+
+	if (!lists.contains(blockedListName_))
+		createBlockedList();
+	else
+		requestList(blockedListName_);
+
+	if (defaultList.isEmpty())
+		changeDefaultList(blockedListName_);
+
+	if(activeList.isEmpty())
+		changeActiveList(blockedListName_);
+
+	setIsAvailable(true);
+}
+
+void PsiPrivacyManager::newListsError()
+{
+	setIsAvailable(false);
+}
+
+void PsiPrivacyManager::newChangeDefaultList_success()
+{
+}
+
+void PsiPrivacyManager::newChangeDefaultList_error()
+{
+	qWarning("YaPrivacyManager::changeDefaultList_error()");
+}
+
+void PsiPrivacyManager::newChangeActiveList_success()
+{
+}
+
+void PsiPrivacyManager::newChangeActiveList_error()
+{
+	qWarning("YaPrivacyManager::changeActiveList_error()");
+}
+
+void PsiPrivacyManager::createBlockedList()
+{	
+	PrivacyList list(blockedListName_);
+	PrivacyListItem allowAll;
+	allowAll.setType(PrivacyListItem::FallthroughType);
+	allowAll.setAction(PrivacyListItem::Allow);
+	allowAll.setAll();
+
+	list.insertItem(0, allowAll);
+	changeList(list);
+}
+
+PrivacyList* PsiPrivacyManager::blockedList() const
+{
+	if(lists_.contains(blockedListName_))
+		return lists_[blockedListName_];
+
+	return 0;
+}
+
+QStringList PsiPrivacyManager::blockedContacts() const
+{
+	QStringList result;
+	if (blockedList()) {
+		foreach(PrivacyListItem item, blockedList()->items()) {
+			if (item.type() == PrivacyListItem::JidType &&
+			    item.action() == PrivacyListItem::Deny) {
+				result << processJid(item.value()).full();
+			}
+		}
+	}
+	return result;
+}
+
+void PsiPrivacyManager::invalidateBlockedListCache()
+{
+	isBlocked_.clear();
+
+	if (!blockedList())
+		return;
+
+	foreach(PrivacyListItem item, blockedList()->items()) {
+		if (item.type() == PrivacyListItem::JidType &&
+		    item.action() == PrivacyListItem::Deny) {
+			isBlocked_[processJid(item.value()).full()] = true;
+		}
+	}
+}
+
+bool PsiPrivacyManager::isContactBlocked(const XMPP::Jid& jid) const
+{
+	return isBlocked_.contains(processJid(jid).full());
+}
+
+PrivacyListItem PsiPrivacyManager::blockItemFor(const XMPP::Jid& jid) const
+{
+	PrivacyListItem item;
+	item.setType(PrivacyListItem::JidType);
+	item.setValue(processJid(jid).full());
+	item.setAction(PrivacyListItem::Deny);
+	item.setAll();
+	return item;
+}
+
+void PsiPrivacyManager::setContactBlocked(const XMPP::Jid& jid, bool blocked)
+{
+	if (blocked) {
+		account_->psi()->contactUpdatesManager()->contactBlocked(account_, jid);
+	}
+
+	if(!blockedList()) {
+		createBlockedList();
+		return;
+	}
+
+	if (isContactBlocked(jid) == blocked)
+		return;
+
+	if (blocked && isAuthorized(jid)) {
+		JT_Presence* p = new JT_Presence(account_->client()->rootTask());
+		p->pres(processJid(jid), account_->loggedOutStatus());
+		p->go(true);
+	}
+
+	PrivacyList newList(*blockedList());
+	newList.clear();
+
+	foreach(PrivacyListItem item, blockedList()->items()) {
+		if (privacyListItemForJid(item, jid))
+			continue;
+
+		newList.appendItem(item);
+	}
+
+	if (blocked)
+		newList.insertItem(0, blockItemFor(jid));
+
+	changeList(newList);
+}
+
+bool PsiPrivacyManager::isAuthorized(const XMPP::Jid& jid) const
+{
+	UserListItem* u = account_->findFirstRelevant(processJid(jid));
+	return u && (u->subscription().type() == Subscription::Both ||
+		     u->subscription().type() == Subscription::From);
+}
+
+
 #include "psiprivacymanager.moc"
--- git.orig/src/privacy/psiprivacymanager.h
+++ git/src/privacy/psiprivacymanager.h
@@ -23,11 +23,16 @@
 
 #include <QObject>
 #include <QStringList>
+#include <QHash>
 
 #include "privacymanager.h"
 
+#include "xmpp_jid.h"
+
 class QString;
+class PsiAccount;
 class PrivacyList;
+class PrivacyListItem;
 class PrivacyListListener;
 namespace XMPP {
 	class Task;
@@ -39,7 +44,7 @@ class PsiPrivacyManager : public Privacy
 	Q_OBJECT
 
 public:
-	PsiPrivacyManager(XMPP::Task* rootTask);
+	PsiPrivacyManager(PsiAccount* account, XMPP::Task* rootTask);
 	virtual ~PsiPrivacyManager();
 
 	void requestListNames();
@@ -80,6 +85,52 @@ private:
 
 	QStringList block_targets_;
 	bool block_waiting_;
+
+public:
+	bool isAvailable() const;
+
+	bool isContactBlocked(const XMPP::Jid& jid) const;
+	void setContactBlocked(const XMPP::Jid& jid, bool blocked);
+
+signals:
+	void availabilityChanged();
+	void listChanged(const QStringList& contacts);
+
+	//void simulateContactOffline(const XMPP::Jid& contact);
+
+private slots:
+	void newListReceived(const PrivacyList& p);
+	void newListsReceived(const QString& defaultList, const QString& activeList, const QStringList& lists);
+	void newListsError();
+
+	void accountStateChanged();
+
+	void newChangeDefaultList_success();
+	void newChangeDefaultList_error();
+	void newChangeActiveList_success();
+	void newChangeActiveList_error();
+
+private slots:
+	void privacyListChanged(const QString& name);
+
+private:
+	PsiAccount* account_;
+	bool accountAvailable_;
+	bool isAvailable_;
+	QHash<QString, PrivacyList*> lists_;
+	QHash<QString, bool> isBlocked_;
+
+	void invalidateBlockedListCache();
+	void setIsAvailable(bool available);
+
+	void createBlockedList();
+	PrivacyList* blockedList() const;
+	PrivacyListItem blockItemFor(const XMPP::Jid& jid) const;
+
+	QStringList blockedContacts() const;
+
+	QString blockedListName_, tmpActiveListName_;
+	bool isAuthorized(const XMPP::Jid& jid) const;
 };
 
 #endif
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -1083,7 +1083,7 @@ PsiAccount::PsiAccount(const UserAccount
 	connect(d->client, SIGNAL(xmlOutgoing(const QString &)), d, SLOT(client_xmlOutgoing(const QString &)));
 
 	// Privacy manager
-	d->privacyManager = new PsiPrivacyManager(d->client->rootTask());
+	d->privacyManager = new PsiPrivacyManager(d->account, d->client->rootTask());
 
 	// Caps manager
 	d->capsManager = new CapsManager(d->client->jid(), capsRegistry, new IrisProtocol::DiscoInfoQuerier(d->client));
--- git.orig/src/psicontact.cpp
+++ git/src/psicontact.cpp
@@ -44,6 +44,8 @@
 #include "yacommon.h"
 #include "yaprofile.h"
 #include "yatoastercentral.h"
+#else
+#include "psiprivacymanager.h"
 #endif
 #include "contactlistgroup.h"
 #include "desktoputil.h"
@@ -653,6 +655,10 @@ void PsiContact::toggleBlockedStateConfi
 
 	bool blocked = privacyManager->isContactBlocked(jid());
 	blockContactConfirmationHelper(!blocked);
+#else
+	PsiPrivacyManager* privacyManager = dynamic_cast<PsiPrivacyManager*>(account()->privacyManager());
+	bool blocked = privacyManager->isContactBlocked(jid());
+	blockContactConfirmationHelper(!blocked);
 #endif
 }
 
@@ -667,8 +673,8 @@ void PsiContact::blockContactConfirmatio
 
 	privacyManager->setContactBlocked(jid(), block);
 #else
-	// FIXME
-	Q_UNUSED(block);
+	PsiPrivacyManager* privacyManager = dynamic_cast<PsiPrivacyManager*>(account()->privacyManager());
+	privacyManager->setContactBlocked(jid(), block);
 #endif
 }
 
@@ -810,6 +816,10 @@ void PsiContact::addRemoveAuthBlockAvail
 		YaPrivacyManager* privacyManager = dynamic_cast<YaPrivacyManager*>(account()->privacyManager());
 		Q_ASSERT(privacyManager);
 		*blockButton = *blockButton && privacyManager->isAvailable();
+#else
+		PsiPrivacyManager* privacyManager = dynamic_cast<PsiPrivacyManager*>(account()->privacyManager());
+		if(privacyManager)
+			*blockButton = *blockButton && privacyManager->isAvailable();
 #endif
 	}
 }
@@ -910,6 +920,10 @@ bool PsiContact::isBlocked() const
 	return account() && privacyManager(account()) &&
 	       privacyManager(account())->isContactBlocked(jid());
 #else
+	if(account()) {
+		PsiPrivacyManager* privacyManager = dynamic_cast<PsiPrivacyManager*>(account()->privacyManager());
+		return privacyManager->isContactBlocked(jid());
+	}
 	return false;
 #endif
 }
--- git.orig/src/psicontactlistviewdelegate.cpp
+++ git/src/psicontactlistviewdelegate.cpp
@@ -269,6 +269,7 @@ void PsiContactListViewDelegate::drawCon
 
 	QStyleOptionViewItemV2 o = option;
 	o.font = *font_;
+	o.font.setItalic(index.data(ContactListModel::BlockRole).toBool());
 	o.fontMetrics = *fontMetrics_;
 	QPalette palette = o.palette;
 	palette.setColor(QPalette::Text, textColor);
--- git.orig/src/psicontactmenu.cpp
+++ git/src/psicontactmenu.cpp
@@ -45,6 +45,8 @@
 
 #ifdef YAPSI
 #include "yaprofile.h"
+#else
+#include "psiprivacymanager.h"
 #endif
 
 #include "groupchatdlg.h"
@@ -254,6 +256,7 @@ public:
 	QAction* mucHideAction_;
 	QAction* mucShowAction_;
 	QAction* mucLeaveAction_;
+	QAction* blockAction_;
 
 #endif
 
@@ -421,6 +424,9 @@ public:
 		connect(mucLeaveAction_, SIGNAL(triggered()), SLOT(mucLeave()));
 		mucLeaveAction_->setShortcuts(ShortcutManager::instance()->shortcuts("common.close"));
 
+		blockAction_ = new IconAction(tr("Block"), "psi/stop", tr("Block"), 0, this, 0, true);
+		connect(blockAction_, SIGNAL(triggered(bool)), SLOT(block(bool)));
+
 		if (!contact_->isConference()) {
 			menu_->addAction(addAuthAction_);
 			menu_->addSeparator();
@@ -445,6 +451,7 @@ public:
 			menu_->addMenu(groupMenu_);
 			menu_->addAction(transportLogonAction_);
 			menu_->addAction(transportLogoffAction_);
+			menu_->addAction(blockAction_);
 			authMenu_ = menu_->addMenu(tr("Authorization"));
 			authMenu_->addAction(authResendAction_);
 			authMenu_->addAction(authRerequestAction_);
@@ -467,6 +474,7 @@ public:
 			menu_->addAction(mucLeaveAction_);
 			menu_->addSeparator();
 			menu_->addAction(customStatusAction_);
+			//menu_->addAction(blockAction_);
 		}
 #endif
 	}
@@ -485,9 +493,14 @@ private slots:
 
 	void updateActions()
 	{
-		if (!contact_ or contact_->isConference())
+		if (!contact_)
 			return;
 
+		if(contact_->isConference()) {
+			updateBlockActionState();
+			return;
+		}
+
 #ifdef YAPSI
 		YaProfile* profile = YaProfile::create(contact_->account(), contact_->jid());
 		openHistoryAction_->setEnabled(contact_->historyAvailable());
@@ -554,6 +567,7 @@ private slots:
 			authMenu_->menuAction()->setVisible(false);
 		}
 		authMenu_->setEnabled(contact_->account()->isAvailable());
+		updateBlockActionState();
 		removeAction_->setVisible(!PsiOptions::instance()->getOption("options.ui.contactlist.lockdown-roster").toBool()  && !contact_->isSelf());
 		removeAction_->setEnabled(contact_->removeAvailable());
 		if (!PsiOptions::instance()->getOption("options.ui.menu.contact.custom-picture").toBool()) {
@@ -634,6 +648,14 @@ private slots:
 		contact_->setGroups(QStringList() << group);
 	}
 
+	void block(bool )
+	{
+		if (!contact_)
+			return;
+
+		contact_->toggleBlockedStateConfirmation();
+	}
+
 	void addAuth()
 	{
 		if (!contact_)
@@ -840,6 +862,16 @@ private slots:
 		contact_->account()->actionOpenChatSpecific(jid);
 	}
 #endif
+private:
+	void updateBlockActionState()
+	{
+		if(!contact_)
+			return;
+		blockAction_->setVisible(!(contact_->isPrivate()/* || contact_->isAgent()*/ || contact_->isSelf()));
+		blockAction_->setEnabled(contact_->account()->isAvailable() && dynamic_cast<PsiPrivacyManager*>(contact_->account()->privacyManager())->isAvailable());
+		blockAction_->setChecked(contact_->isBlocked());
+		blockAction_->setText(blockAction_->isChecked() ? tr("Unblock") : tr("Block"));
+	}
 };
 
 PsiContactMenu::PsiContactMenu(PsiContact* contact, ContactListModel* model)
