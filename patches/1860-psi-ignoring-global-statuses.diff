Entering 'iris'
Entering 'src/libpsi'
Index: psi/src/accountstatusmenu.cpp
===================================================================
--- psi.orig/src/accountstatusmenu.cpp	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/accountstatusmenu.cpp	2013-01-15 14:04:35.232827395 +0400
@@ -30,4 +30,18 @@
 {
 	StatusMenu::fill();
 	statusChanged(account->status());
+	addIgnoreGlobalActions();
 }
+
+void AccountStatusMenu::addIgnoreGlobalActions()
+{
+	QAction *blockAction = new IconAction(tr("Ignore global actions"), this, "psi/ignore_global_actions");
+	blockAction->setCheckable(true);
+	blockAction->setChecked(account->accountOptions().ignore_global_actions);
+	blockAction->setToolTip(tr("Ignore all global actions for this account. For example, autostatus, mood, activity etc."));
+	connect(blockAction, SIGNAL(triggered(bool)), account, SLOT(actionSetBlock(bool)));
+	addSeparator();
+	addAction(blockAction);
+
+}
+
Index: psi/src/accountstatusmenu.h
===================================================================
--- psi.orig/src/accountstatusmenu.h	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/accountstatusmenu.h	2013-01-15 14:04:35.232827395 +0400
@@ -20,6 +20,9 @@
 	void addChoose();
 	void addReconnect();

+private:
+	void addIgnoreGlobalActions();
+
 private slots:
 	void chooseStatusActivated();

Index: psi/src/mainwin.cpp
===================================================================
--- psi.orig/src/mainwin.cpp	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/mainwin.cpp	2013-01-15 14:04:35.232827395 +0400
@@ -1200,7 +1200,7 @@
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->accountOptions().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1218,7 +1218,7 @@
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->accountOptions().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1236,7 +1236,7 @@
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->accountOptions().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
Index: psi/src/profiles.h
===================================================================
--- psi.orig/src/profiles.h	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/profiles.h	2013-01-15 14:04:35.232827395 +0400
@@ -61,7 +61,7 @@
 	XMPP::ClientStream::AllowPlainType allow_plain;
 	bool req_mutual_auth;
 	bool legacy_ssl_probe;
-	bool opt_automatic_resource, priority_dep_on_status;
+	bool opt_automatic_resource, priority_dep_on_status, ignore_global_actions;
 	int security_level;
 	enum SSLFlag { SSL_No = 0, SSL_Yes = 1, SSL_Auto = 2, SSL_Legacy = 3 } ssl;

Index: psi/src/psi_profiles.cpp
===================================================================
--- psi.orig/src/psi_profiles.cpp	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/psi_profiles.cpp	2013-01-15 14:04:35.232827395 +0400
@@ -133,6 +133,7 @@
 	host = "";
 	opt_automatic_resource = false;
 	priority_dep_on_status = true;
+	ignore_global_actions = false;
 	resource = ApplicationInfo::name();
 	priority = 55;
 	ibbOnly = false;
@@ -184,6 +185,7 @@
 	legacy_ssl_probe = o->getOption(base + ".legacy-ssl-probe").toBool();
 	opt_automatic_resource = o->getOption(base + ".automatic-resource").toBool();
 	priority_dep_on_status = o->getOption(base + ".priority-depends-on-status").toBool();
+	ignore_global_actions = o->getOption(base + ".ignore-global-actions").toBool();
 	opt_log = o->getOption(base + ".log").toBool();
 	opt_reconn = o->getOption(base + ".reconn").toBool();
 	opt_ignoreSSLWarnings = o->getOption(base + ".ignore-SSL-warnings").toBool();
@@ -346,6 +348,7 @@
 	o->setOption(base + ".legacy-ssl-probe", legacy_ssl_probe);
 	o->setOption(base + ".automatic-resource", opt_automatic_resource);
 	o->setOption(base + ".priority-depends-on-status", priority_dep_on_status);
+	o->setOption(base + ".ignore-global-actions", ignore_global_actions);
 	o->setOption(base + ".log", opt_log);
 	o->setOption(base + ".reconn", opt_reconn);
 	o->setOption(base + ".connect-after-sleep", opt_connectAfterSleep);
@@ -494,6 +497,7 @@
 	//readBoolAttribute(a, "gpg", &opt_gpg);
 	readBoolAttribute(a, "automatic-resource", &opt_automatic_resource);
 	readBoolAttribute(a, "priority-depends-on-status", &priority_dep_on_status);
+	readBoolAttribute(a, "ignore-global-actions", &ignore_global_actions);

 	// Will be overwritten if there is a new option
 	bool opt_plain = false;
Index: psi/src/psiaccount.cpp
===================================================================
--- psi.orig/src/psiaccount.cpp	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/psiaccount.cpp	2013-01-15 14:04:35.236827395 +0400
@@ -4066,6 +4066,11 @@
 	}
 }

+void PsiAccount::actionSetBlock(bool blocked)
+{
+	d->acc.ignore_global_actions = blocked;
+}
+
 void PsiAccount::actionSetMood()
 {
 	QList<PsiAccount*> list;
Index: psi/src/psiaccount.h
===================================================================
--- psi.orig/src/psiaccount.h	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/psiaccount.h	2013-01-15 14:04:35.236827395 +0400
@@ -377,6 +377,7 @@
 	void actionSendFiles(const Jid &, const QStringList&);
 	void actionExecuteCommand(const Jid& j, const QString& = QString());
 	void actionExecuteCommandSpecific(const Jid&, const QString& = QString());
+	void actionSetBlock(bool);
 	void actionSetMood();
 	void actionSetActivity();
 	void actionSetGeoLocation();
Index: psi/src/psicon.cpp
===================================================================
--- psi.orig/src/psicon.cpp	2013-01-15 14:04:35.240827395 +0400
+++ psi/src/psicon.cpp	2013-01-15 14:04:35.236827395 +0400
@@ -1173,7 +1173,7 @@

 	// globally set each account which is logged in
 	foreach(PsiAccount* account, d->contactList->enabledAccounts())
-		if (allOffline || account->isActive())
+		if ((allOffline || account->isActive()) && (!account->accountOptions().ignore_global_actions || s.type() == Status::Offline))
 			account->setStatus(s, withPriority, isManualStatus);

 	emit statusMessageChanged(s.status());
@@ -1940,6 +1940,9 @@
 		aa = PsiAccount::AutoAway_None;

 	foreach(PsiAccount* pa, d->contactList->enabledAccounts()) {
+		if(pa->accountOptions().ignore_global_actions)
+			continue;
+
 		pa->setAutoAwayStatus(aa);
 	}
 }
