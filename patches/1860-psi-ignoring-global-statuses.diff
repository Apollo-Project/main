Entering 'iris'
Entering 'src/libpsi'
diff --git a/src/accountstatusmenu.cpp b/src/accountstatusmenu.cpp
index ecb71c8..f9719fb 100644
--- a/src/accountstatusmenu.cpp
+++ b/src/accountstatusmenu.cpp
@@ -30,4 +30,18 @@ void AccountStatusMenu::fill()
 {
 	StatusMenu::fill();
 	statusChanged(account->status());
+	addIgnoreGlobalActions();
 }
+
+void AccountStatusMenu::addIgnoreGlobalActions()
+{
+	QAction *blockAction = new IconAction(tr("Ignore global actions"), this, "psi/ignore_global_actions");
+	blockAction->setCheckable(true);
+	blockAction->setChecked(account->accountOptions().ignore_global_actions);
+	blockAction->setToolTip(tr("Ignore all global actions for this account. For example, autostatus, mood, activity etc."));
+	connect(blockAction, SIGNAL(triggered(bool)), account, SLOT(actionSetBlock(bool)));
+	addSeparator();
+	addAction(blockAction);
+
+}
+
diff --git a/src/accountstatusmenu.h b/src/accountstatusmenu.h
index 3effaad..7672712 100644
--- a/src/accountstatusmenu.h
+++ b/src/accountstatusmenu.h
@@ -20,6 +20,9 @@ protected:
 	void addChoose();
 	void addReconnect();
 
+private:
+	void addIgnoreGlobalActions();
+
 private slots:
 	void chooseStatusActivated();
 
diff --git a/src/mainwin.cpp b/src/mainwin.cpp
index 84deaca..5109066 100644
--- a/src/mainwin.cpp
+++ b/src/mainwin.cpp
@@ -1199,7 +1199,7 @@ void MainWin::actSetMoodActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->accountOptions().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1217,7 +1217,7 @@ void MainWin::actSetActivityActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->accountOptions().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1235,7 +1235,7 @@ void MainWin::actSetGeolocActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->accountOptions().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
diff --git a/src/profiles.h b/src/profiles.h
index a9a03bb..ee1b986 100644
--- a/src/profiles.h
+++ b/src/profiles.h
@@ -61,7 +61,7 @@ public:
 	XMPP::ClientStream::AllowPlainType allow_plain;
 	bool req_mutual_auth;
 	bool legacy_ssl_probe;
-	bool opt_automatic_resource, priority_dep_on_status;
+	bool opt_automatic_resource, priority_dep_on_status, ignore_global_actions;
 	int security_level;
 	enum SSLFlag { SSL_No = 0, SSL_Yes = 1, SSL_Auto = 2, SSL_Legacy = 3 } ssl;
 
diff --git a/src/psi_profiles.cpp b/src/psi_profiles.cpp
index 65f52d3..dfe9a1f 100644
--- a/src/psi_profiles.cpp
+++ b/src/psi_profiles.cpp
@@ -133,6 +133,7 @@ void UserAccount::reset()
 	host = "";
 	opt_automatic_resource = false;
 	priority_dep_on_status = true;
+	ignore_global_actions = false;
 	resource = ApplicationInfo::name();
 	priority = 55;
 	ibbOnly = false;
@@ -184,6 +185,7 @@ void UserAccount::fromOptions(OptionsTree *o, QString base)
 	legacy_ssl_probe = o->getOption(base + ".legacy-ssl-probe").toBool();
 	opt_automatic_resource = o->getOption(base + ".automatic-resource").toBool();
 	priority_dep_on_status = o->getOption(base + ".priority-depends-on-status").toBool();
+	ignore_global_actions = o->getOption(base + ".ignore-global-actions").toBool();
 	opt_log = o->getOption(base + ".log").toBool();
 	opt_reconn = o->getOption(base + ".reconn").toBool();
 	opt_ignoreSSLWarnings = o->getOption(base + ".ignore-SSL-warnings").toBool();
@@ -346,6 +348,7 @@ void UserAccount::toOptions(OptionsTree *o, QString base)
 	o->setOption(base + ".legacy-ssl-probe", legacy_ssl_probe);
 	o->setOption(base + ".automatic-resource", opt_automatic_resource);
 	o->setOption(base + ".priority-depends-on-status", priority_dep_on_status);
+	o->setOption(base + ".ignore-global-actions", ignore_global_actions);
 	o->setOption(base + ".log", opt_log);
 	o->setOption(base + ".reconn", opt_reconn);
 	o->setOption(base + ".connect-after-sleep", opt_connectAfterSleep);
@@ -494,6 +497,7 @@ void UserAccount::fromXml(const QDomElement &a)
 	//readBoolAttribute(a, "gpg", &opt_gpg);
 	readBoolAttribute(a, "automatic-resource", &opt_automatic_resource);
 	readBoolAttribute(a, "priority-depends-on-status", &priority_dep_on_status);
+	readBoolAttribute(a, "ignore-global-actions", &ignore_global_actions);
 
 	// Will be overwritten if there is a new option
 	bool opt_plain = false;
diff --git a/src/psiaccount.cpp b/src/psiaccount.cpp
index 21d4045..7ef4cc0 100644
--- a/src/psiaccount.cpp
+++ b/src/psiaccount.cpp
@@ -4066,6 +4066,11 @@ void PsiAccount::actionExecuteCommandSpecific(const Jid& j, const QString& node)
 	}
 }
 
+void PsiAccount::actionSetBlock(bool blocked)
+{
+	d->acc.ignore_global_actions = blocked;
+}
+
 void PsiAccount::actionSetMood()
 {
 	QList<PsiAccount*> list;
diff --git a/src/psiaccount.h b/src/psiaccount.h
index f7eaac7..6872e36 100644
--- a/src/psiaccount.h
+++ b/src/psiaccount.h
@@ -377,6 +377,7 @@ public slots:
 	void actionSendFiles(const Jid &, const QStringList&);
 	void actionExecuteCommand(const Jid& j, const QString& = QString());
 	void actionExecuteCommandSpecific(const Jid&, const QString& = QString());
+	void actionSetBlock(bool);
 	void actionSetMood();
 	void actionSetActivity();
 	void actionSetGeoLocation();
diff --git a/src/psicon.cpp b/src/psicon.cpp
index 5326885..28ce3ad 100644
--- a/src/psicon.cpp
+++ b/src/psicon.cpp
@@ -1173,7 +1173,7 @@ void PsiCon::setGlobalStatus(const Status &s, bool withPriority, bool isManualSt
 
 	// globally set each account which is logged in
 	foreach(PsiAccount* account, d->contactList->enabledAccounts())
-		if (allOffline || account->isActive())
+		if ((allOffline || account->isActive()) && (!account->accountOptions().ignore_global_actions || s.type() == Status::Offline))
 			account->setStatus(s, withPriority, isManualStatus);
 
 	emit statusMessageChanged(s.status());
@@ -1940,6 +1940,9 @@ void PsiCon::secondsIdle(int sec)
 		aa = PsiAccount::AutoAway_None;
 
 	foreach(PsiAccount* pa, d->contactList->enabledAccounts()) {
+		if(pa->accountOptions().ignore_global_actions)
+			continue;
+
 		pa->setAutoAwayStatus(aa);
 	}
 }
