--- psi.orig/src/contactlistaccountmenu.cpp
+++ psi/src/contactlistaccountmenu.cpp
@@ -43,6 +43,7 @@ class ContactListAccountMenu::Private :
 
 	QPointer<ContactListAccountGroup> account;
 	AccountStatusMenu* statusMenu_;
+	QAction* blockAction_;
 	QAction* moodAction_;
 	QAction* activityAction_;
 	QAction* geolocationAction_;
@@ -78,6 +79,10 @@ public:
 		connect(account->account(), SIGNAL(updatedActivity()), SLOT(updateActions()));
 		connect(account->account(), SIGNAL(updatedAccount()), SLOT(updateActions()));
 
+		blockAction_ = new IconAction(tr("Blocked"), this, "psi/cryptoYes");
+		blockAction_->setCheckable(true);
+		connect(blockAction_, SIGNAL(triggered()), SLOT(setBlock()));
+
 		statusMenu_ = new AccountStatusMenu(0, account->account()->psi(), account->account());
 		statusMenu_->fill();
 		statusMenu_->setTitle(tr("&Status"));
@@ -148,6 +153,7 @@ public:
 		adminDeleteMotdAction_ = new IconAction(tr("Delete MOTD"), this, "psi/remove");
 		connect(adminDeleteMotdAction_, SIGNAL(triggered()), SLOT(adminDeleteMotd()));
 
+		menu->addAction(blockAction_);
 		menu->addMenu(statusMenu_);
 		menu->addAction(moodAction_);
 		menu->addAction(activityAction_);
@@ -196,6 +202,7 @@ private slots:
 		if (!account)
 			return;
 
+		blockAction_->setChecked(account->account()->userAccount().ignore_global_actions);
 		statusMenu_->statusChanged(account->account()->status());
 #ifndef USE_PEP
 		moodAction_->setVisible(false);
@@ -259,6 +266,14 @@ private slots:
 		account->account()->changeStatus(static_cast<int>(statusType), forceDialog);
 	}
 
+	void setBlock()
+	{
+		if (!account)
+			return;
+
+		account->account()->actionSetBlock(!account->account()->userAccount().ignore_global_actions);
+	}
+
 	void setMood()
 	{
 		if (!account)
--- psi.orig/src/mainwin.cpp
+++ psi/src/mainwin.cpp
@@ -1203,7 +1203,7 @@ void MainWin::actSetMoodActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->userAccount().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1221,7 +1221,7 @@ void MainWin::actSetActivityActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->userAccount().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1239,7 +1239,7 @@ void MainWin::actSetGeolocActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->userAccount().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
--- psi.orig/src/profiles.h
+++ psi/src/profiles.h
@@ -61,7 +61,7 @@ public:
 	XMPP::ClientStream::AllowPlainType allow_plain;
 	bool req_mutual_auth;
 	bool legacy_ssl_probe;
-	bool opt_automatic_resource, priority_dep_on_status;
+	bool opt_automatic_resource, priority_dep_on_status, ignore_global_actions;
 	int security_level;
 	enum SSLFlag { SSL_No = 0, SSL_Yes = 1, SSL_Auto = 2, SSL_Legacy = 3 } ssl;
 
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -3167,6 +3167,9 @@ void PsiAccount::publishTune(const Tune&
 
 void PsiAccount::secondsIdle(int seconds)
 {
+	if (userAccount().ignore_global_actions)
+		return;
+
 	d->lastIdle = seconds;
 	int minutes = seconds / 60;
 
@@ -4066,6 +4069,11 @@ void PsiAccount::actionExecuteCommandSpe
 	}
 }
 
+void PsiAccount::actionSetBlock(bool blocked)
+{
+	d->acc.ignore_global_actions = blocked;
+}
+
 void PsiAccount::actionSetMood()
 {
 	QList<PsiAccount*> list;
--- psi.orig/src/psiaccount.h
+++ psi/src/psiaccount.h
@@ -374,6 +374,7 @@ public slots:
 	void actionSendFiles(const Jid &, const QStringList&);
 	void actionExecuteCommand(const Jid& j, const QString& = QString());
 	void actionExecuteCommandSpecific(const Jid&, const QString& = QString());
+	void actionSetBlock(bool);
 	void actionSetMood();
 	void actionSetActivity();
 	void actionSetGeoLocation();
--- psi.orig/src/psicon.cpp
+++ psi/src/psicon.cpp
@@ -1151,7 +1151,7 @@ void PsiCon::setGlobalStatus(const Statu
 
 	// globally set each account which is logged in
 	foreach(PsiAccount* account, d->contactList->enabledAccounts())
-		if (allOffline || account->isActive())
+		if ((allOffline || account->isActive()) && (!account->userAccount().ignore_global_actions || s.type() == Status::Offline))
 			account->setStatus(s, withPriority, isManualStatus);
 
 	emit statusMessageChanged(s.status());
--- psi.orig/src/psi_profiles.cpp
+++ psi/src/psi_profiles.cpp
@@ -134,6 +134,7 @@ void UserAccount::reset()
 	ibbOnly = false;
 	opt_automatic_resource = false;
 	priority_dep_on_status = true;
+	ignore_global_actions = false;
 	resource = "Psi+";
 	priority = 55;
 	opt_keepAlive = true;
@@ -184,6 +185,7 @@ void UserAccount::fromOptions(OptionsTre
 	legacy_ssl_probe = o->getOption(base + ".legacy-ssl-probe").toBool();
 	opt_automatic_resource = o->getOption(base + ".automatic-resource").toBool();
 	priority_dep_on_status = o->getOption(base + ".priority-depends-on-status").toBool();
+	ignore_global_actions = o->getOption(base + ".ignore-global-actions").toBool();
 	opt_log = o->getOption(base + ".log").toBool();
 	opt_reconn = o->getOption(base + ".reconn").toBool();
 	opt_ignoreSSLWarnings = o->getOption(base + ".ignore-SSL-warnings").toBool();
@@ -346,6 +348,7 @@ void UserAccount::toOptions(OptionsTree
 	o->setOption(base + ".legacy-ssl-probe", legacy_ssl_probe);
 	o->setOption(base + ".automatic-resource", opt_automatic_resource);
 	o->setOption(base + ".priority-depends-on-status", priority_dep_on_status);
+	o->setOption(base + ".ignore-global-actions", ignore_global_actions);
 	o->setOption(base + ".log", opt_log);
 	o->setOption(base + ".reconn", opt_reconn);
 	o->setOption(base + ".connect-after-sleep", opt_connectAfterSleep);
@@ -494,7 +497,8 @@ void UserAccount::fromXml(const QDomElem
 	//readBoolAttribute(a, "gpg", &opt_gpg);
 	readBoolAttribute(a, "automatic-resource", &opt_automatic_resource);
 	readBoolAttribute(a, "priority-depends-on-status", &priority_dep_on_status);
-	
+	readBoolAttribute(a, "ignore-global-actions", &ignore_global_actions);
+
 	// Will be overwritten if there is a new option
 	bool opt_plain = false;
 	readBoolAttribute(a, "plain", &opt_plain);
