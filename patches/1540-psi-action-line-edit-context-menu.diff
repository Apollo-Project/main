--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -54,6 +54,7 @@
 #include <QDialogButtonBox>
 #include <QFormLayout>
 #include <QDesktopWidget>
+#include <QClipboard>
 
 #include "psicon.h"
 #include "psiaccount.h"
@@ -214,6 +214,7 @@ public:
 	QString topic;
 	bool nonAnonymous;		 // got status code 100 ?
 	IconAction *act_find, *act_clear, *act_icon, *act_configure, *act_ps, *act_templates, *act_bookmark, *act_html_text;
+	QAction *act_copy_muc_jid;
 	TypeAheadFindBar *typeahead;
 //#ifdef WHITEBOARDING
 //	IconAction *act_whiteboard;
@@ -733,6 +734,11 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	d->act_bookmark = new IconAction(this);
 	connect(d->act_bookmark, SIGNAL(triggered()), SLOT(doBookmark()));
 	ui_.le_topic->addAction(d->act_bookmark);
+
+	d->act_copy_muc_jid = new QAction(tr("Copy MUC JID"), this);
+	connect(d->act_copy_muc_jid, SIGNAL(triggered()), SLOT(copyMucJid()));
+	ui_.le_topic->addAction(d->act_copy_muc_jid);
+
 	BookmarkManager *bm = account()->bookmarkManager();
 	d->act_bookmark->setVisible(bm->isAvailable());
 	if (bm->isAvailable()) {
@@ -2158,6 +2163,11 @@ void GCMainDlg::doBookmark()
 	delete dlg;
 }
 
+void GCMainDlg::copyMucJid()
+{
+	QApplication::clipboard()->setText(jid().bare());
+}
+
 void GCMainDlg::doRemoveBookmark()
 {
 	BookmarkManager *bm = account()->bookmarkManager();
--- a/src/groupchatdlg.h
+++ b/src/groupchatdlg.h
@@ -141,6 +141,7 @@ private slots:
 	void editTemplates();
 	void doPasteAndSend();
 	void doBookmark();
+	void copyMucJid();
 	void doRemoveBookmark();
 	void sendTemp(const QString &);
 	void psButtonEnabled();
--- a/src/infodlg.cpp
+++ b/src/infodlg.cpp
@@ -159,7 +159,8 @@ InfoDlg::InfoDlg(int type, const Jid &j, const VCard &vcard, PsiAccount *pa, QWi
 	d->namesDlg->setLayout(fl);
 	// end names editing dialog
 
-	QAction *editnames = new QAction(IconsetFactory::icon(d->type == Self?"psi/options":"psi/info").icon(), "", this);
+	QAction *editnames = new QAction(IconsetFactory::icon(d->type == Self ? "psi/options" : "psi/info").icon(),
+									 d->type == Self ? tr("Edit names") : tr("View names") , this);
 	ui_.le_fullname->addAction(editnames);
 	ui_.le_fullname->widgetForAction(editnames)->setPopup(d->namesDlg);
 	d->homepageAction = new QAction(IconsetFactory::icon("psi/arrowRight").icon(), "", this);
--- a/src/widgets/actionlineedit.cpp
+++ b/src/widgets/actionlineedit.cpp
@@ -25,6 +25,8 @@
 #include <QAction>
 #include <QActionEvent>
 #include <QIcon>
+#include <QMenu>
+
 #include "actionlineedit.h"
 
 ActionLineEditButton::ActionLineEditButton( QWidget *parent )
@@ -63,7 +63,7 @@ void ActionLineEditButton::setPopup(QWidget *widget)
 	if (widget) {
 		popup_ = widget;
 		popup_->setWindowFlags(Qt::Popup);
-		connect(this, SIGNAL(clicked()), this, SLOT(showPopup()));
+		connect(action_, SIGNAL(triggered()), this, SLOT(showPopup()));
 		popup_->adjustSize();
 	}
 }
@@ -155,5 +155,6 @@ ActionLineEdit::ActionLineEdit(QWidget *parent)
 	layout->setMargin(0);
 	layout->insertStretch(0);
+	menu_ = new QMenu(this);
 }
 
 ActionLineEditButton * ActionLineEdit::widgetForAction ( QAction * action )
@@ -182,7 +180,8 @@ void ActionLineEdit::actionEvent ( QActionEvent * event )
 		btn = new ActionLineEditButton(this);
 		QAction *before = event->before();
 		int beforeInd;
+		menu_->addAction(act);
-		if (before && (beforeInd = actions().indexOf(before)) >= 0) { //TODO test it
+		if (before && (beforeInd = actions().indexOf(before)) >= 0 && !act->icon().isNull()) { //TODO test it
 			lo->insertWidget(beforeInd + 1, btn); //1 - first item is spacer. skip it
 		}
 		else {
@@ -217,2 +216,14 @@ void ActionLineEdit::actionEvent ( QActionEvent * event )
 #endif
 }
+ 
+void ActionLineEdit::contextMenuEvent(QContextMenuEvent *e)
+{
+	QMenu *menu;
+ 	if (isReadOnly()) {
+		menu_->exec(e->globalPos());
+		e->accept();
+ 	}
+ 	else {
+		QLineEdit::contextMenuEvent(e);
+ 	}
+}

--- a/src/widgets/actionlineedit.h
+++ b/src/widgets/actionlineedit.h
@@ -27,6 +27,8 @@
 #include <QList>
 #include <QAction>
 
+class QMenu;
+
 class ActionLineEditButton : public QAbstractButton
 {
 	Q_OBJECT
@@ -62,9 +64,14 @@ public:
 	void actionEvent ( QActionEvent * event );
 	Qt::ToolButtonStyle toolButtonStyle() const { return toolButtonStyle_; }
 	void setToolButtonStyle(const Qt::ToolButtonStyle newStyle) { toolButtonStyle_ = newStyle; }
 
+ protected:
+ 	// reimplemented
+	void contextMenuEvent(QContextMenuEvent *e);
+
 private:
 	Qt::ToolButtonStyle toolButtonStyle_;
+	QMenu *menu_;
 };
 
 #endif // ACTIONLINEEDIT_H
