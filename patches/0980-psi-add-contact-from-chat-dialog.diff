--- git.orig/src/chatdlg.cpp
+++ git/src/chatdlg.cpp
@@ -110,6 +110,7 @@ ChatDlg::ChatDlg(const Jid& jid, PsiAcco
 	isComposing_ = false;
 	composingTimer_ = 0;
 	connect(URLObject::getInstance(), SIGNAL(vcardsig(QString)), SLOT(vcard(QString)));
+	updateRealJid();
 }
 
 void ChatDlg::vcard(const QString& string)
@@ -389,6 +390,7 @@ void ChatDlg::setJid(const Jid &j)
 	if (!j.compare(jid())) {
 		account()->dialogUnregister(this);
 		TabbableWidget::setJid(j);
+		updateRealJid();
 		account()->dialogRegister(this, jid());
 		updateContact(jid(), false);
 	}
@@ -670,6 +672,16 @@ void ChatDlg::invalidateTab()
 	TabbableWidget::invalidateTab();
 }
 
+void ChatDlg::updateRealJid()
+{
+	realJid_ = account()->realJid(jid());
+}
+
+Jid ChatDlg::realJid() const
+{
+	return realJid_;
+}
+
 bool ChatDlg::isEncryptionEnabled() const
 {
 	return false;
--- git.orig/src/chatdlg.h
+++ git/src/chatdlg.h
@@ -75,6 +75,7 @@ public:
 public:
 	PsiAccount* account() const;
 	void setText(const QString& );
+	Jid realJid() const;
 
 signals:
 	void aInfo(const Jid &);
@@ -145,6 +146,7 @@ protected:
 	// reimplemented
 	virtual void invalidateTab();
 
+	void updateRealJid();
 	void resetComposing();
 	void doneSend();
 	virtual void setLooks();
@@ -188,6 +190,7 @@ private:
 	int transid_;
 	Message m_;
 	bool lastWasEncrypted_;
+	Jid realJid_;
 
 	// Message Events & Chat States
 	QTimer* composingTimer_;
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -3540,6 +3540,20 @@ void PsiAccount::itemPublished(const Jid
 	}*/
 }
 
+Jid PsiAccount::realJid(const Jid &j) const
+{
+	GCContact *c = findGCContact(j);
+	if (c) {
+		if (c->status.hasMUCItem()) {
+			return c->status.mucItem().jid();
+		} else {
+			return Jid();
+		}
+	} else {
+		return j;
+	}
+}
+
 QList<UserListItem*> PsiAccount::findRelevant(const Jid &j) const
 {
 	QList<UserListItem*> list;
--- git.orig/src/psiaccount.h
+++ git/src/psiaccount.h
@@ -193,6 +193,7 @@ public:
 	void groupChatChangeNick(const QString &host, const QString &room, const QString& nick, const Status &);
 	void groupChatLeave(const QString &host, const QString &room);
 
+	Jid realJid(const Jid &j) const;
 	PsiContact* selfContact() const;
 	const QList<PsiContact*>& contactList() const;
 	int onlineContactsCount() const;
--- git.orig/src/psichatdlg.cpp
+++ git/src/psichatdlg.cpp
@@ -40,6 +40,7 @@
 #include "capsmanager.h"
 #include "psicontactlist.h"
 #include "userlist.h"
+#include "psicontact.h"
 #include "jidutil.h"
 #include "xmpp_tasks.h"
 #include "lastactivitytask.h"
@@ -170,6 +171,9 @@ PsiChatDlg::PsiChatDlg(const Jid& jid, P
 		: ChatDlg(jid, pa, tabManager), mCmdManager_(&mCmdSite_), tabCompletion(&mCmdManager_)
 {
 	connect(account()->psi(), SIGNAL(accountCountChanged()), this, SLOT(updateIdentityVisibility()));
+	connect(account(), SIGNAL(addedContact(PsiContact*)), SLOT(updateContactAdding(PsiContact*)));
+	connect(account(), SIGNAL(removedContact(PsiContact*)), SLOT(updateContactAdding(PsiContact*)));
+	connect(account(), SIGNAL(updateContact(const Jid &)), SLOT(updateContactAdding(const Jid &)));
 	mCmdManager_.registerProvider(new ChatDlgMCmdProvider(this));
 
 	SendButtonTemplatesMenu* menu = getTemplateMenu();
@@ -309,6 +313,7 @@ void PsiChatDlg::setLooks()
 
 	updateIdentityVisibility();
 	updateCountVisibility();
+	updateContactAdding();
 
 	// toolbuttons
 	QIcon i;
@@ -352,6 +357,26 @@ void PsiChatDlg::updateIdentityVisibilit
 	}
 }
 
+void PsiChatDlg::updateContactAdding(PsiContact* c)
+{
+	if (!c || realJid().compare(c->jid(), false)) {
+		Jid rj = realJid();
+		UserListItem *uli;
+		if (rj.isNull() || ((uli = account()->findFirstRelevant(rj)) && (uli->inList() || uli->isSelf()))) {
+			act_add_contact->setVisible(false);
+		} else {
+			act_add_contact->setVisible(true);
+		}
+	}
+}
+
+void PsiChatDlg::updateContactAdding(const Jid &j)
+{
+	if (realJid().compare(j, false)) {
+		updateContactAdding();
+	}
+}
+
 void PsiChatDlg::initToolButtons()
 {
 // typeahead find
@@ -372,6 +397,9 @@ void PsiChatDlg::initToolButtons()
 	act_html_text = new IconAction(tr("Set Text Format"), "psi/text", tr("Set Text Format"), 0, this);
 	connect(act_html_text, SIGNAL(triggered()), chatEdit(), SLOT(doHTMLTextMenu()));
 
+	act_add_contact = new IconAction(tr("Add Contact To Roster"), "psi/addContact", tr("Add Contact"), 0, this);
+	connect(act_add_contact, SIGNAL(triggered()), SLOT(addContact()));
+
 	connect(account()->psi()->iconSelectPopup(), SIGNAL(textSelected(QString)), this, SLOT(addEmoticon(QString)));
 	act_icon_ = new IconAction(tr("Select Icon"), "psi/smile", tr("Select Icon"), 0, this);
 	act_icon_->setMenu(account()->psi()->iconSelectPopup());
@@ -430,6 +458,7 @@ void PsiChatDlg::initToolBar()
 	if (AvCallManager::isSupported()) {
 		ui_.toolbar->addAction(act_voice_);
 	}
+	ui_.toolbar->addAction(act_add_contact);
 }
 
 void PsiChatDlg::contextMenuEvent(QContextMenuEvent *)
@@ -687,6 +716,14 @@ void PsiChatDlg::doMiniCmd()
 	mCmdManager_.open(new MCmdSimpleState(MCMDCHAT, tr("Command>")), QStringList() );
 }
 
+void PsiChatDlg::addContact()
+{
+	Jid j(realJid());
+	UserListItem *uli = account()->findFirstRelevant(jid());
+	QString name = uli && !uli->name().isEmpty()? uli->name() : j.node();
+	account()->openAddUserDlg(j.withResource(""), name.isEmpty()?j.node():name, "");
+}
+
 void PsiChatDlg::doMinimize()
 {
 	window()->showMinimized();
--- git.orig/src/psichatdlg.h
+++ git/src/psichatdlg.h
@@ -11,6 +11,7 @@
 #include "typeaheadfind.h"
 
 class IconAction;
+class PsiContact;
 
 class PsiChatDlg : public ChatDlg
 {
@@ -33,11 +34,14 @@ private slots:
 	void toggleSmallChat();
 	void doClearButton();
 	void doMiniCmd();
+	void addContact();
 	void doMinimize();
 	void buildMenu();
 	void updateCounter();
 	void updateIdentityVisibility();
 	void updateCountVisibility();
+	void updateContactAdding(PsiContact* c = 0);
+	void updateContactAdding(const Jid &j);
 
 	// reimplemented
 	void chatEditCreated();
@@ -85,6 +89,7 @@ private:
 	IconAction* act_ps_;
 	IconAction* act_templates_;
 	IconAction* act_html_text;
+	IconAction* act_add_contact;
 	QAction *act_mini_cmd_, *act_minimize_;
 
 	MCmdManager mCmdManager_;
