--- psi.orig/options/default.xml
+++ psi/options/default.xml
@@ -166,12 +166,16 @@
 				<disable-scrollbar type="bool">true</disable-scrollbar>
 				<avatars>
 					<show type="bool">true</show>
+					<avatars-at-left type="bool">false</avatars-at-left>
+					<use-default-avatar type="bool">true</use-default-avatar>
 					<size type="int">24</size>
 					<radius type="int">5</radius>
 				</avatars>
 				<show-mood-icons type="bool">true</show-mood-icons>
 				<show-activity-icons type="bool">true</show-activity-icons>
 				<show-geolocation-icons type="bool">true</show-geolocation-icons>
+				<show-status-icons type="bool">true</show-status-icons>
+				<status-icon-over-avatar type="bool">false</status-icon-over-avatar>
 				<show-tune-icons type="bool">true</show-tune-icons>
 				<show-client-icons type="bool">true</show-client-icons>
 				<show-all-client-icons type="bool">false</show-all-client-icons>
--- psi.orig/src/contactlistmodel.cpp
+++ psi/src/contactlistmodel.cpp
@@ -38,6 +38,7 @@
 #include "contactlistmodelupdater.h"
 #include "contactlistspecialgroup.h"
 #include "userlist.h"
+#include "avatars.h"
 #ifdef YAPSI
 #include "yacommon.h"
 #endif
@@ -517,6 +518,36 @@ QVariant ContactListModel::contactData(c
 	else if (role == PhaseRole) {
 		return QVariant(false);
 	}
+	else if (role == MoodRole) {
+		if(contact->userListItem().mood().isNull())
+			return QVariant();
+		return QVariant(contact->userListItem().mood().typeValue());
+	}
+	else if (role == ActivityRole) {
+		if (contact->userListItem().activity().isNull())
+			return QVariant();
+		QString act = contact->userListItem().activity().typeValue();
+		if (contact->userListItem().activity().specificType() != Activity::UnknownSpecific
+			&& contact->userListItem().activity().specificType() != Activity::Other
+			&& !contact->userListItem().activity().specificTypeValue().isEmpty())
+		{
+			act += "_" + contact->userListItem().activity().specificTypeValue();
+		}
+		return QVariant(act);
+	}
+	else if (role == GeolocationRole) {
+		return QVariant(!contact->userListItem().geoLocation().isNull());
+	}
+	else if (role == TuneRole) {
+		return QVariant(!contact->userListItem().tune().isEmpty());
+	}
+	else if (role == ClientRole) {
+		return QVariant(contact->userListItem().clients());
+	}
+	else if (role == AvatarRole) {
+		QPixmap pix = contact->account()->avatarFactory()->getAvatar(contact->jid());
+		return QVariant(pix);
+	}
 #ifdef YAPSI
 	else if (role == Qt::ForegroundRole) {
 		return QVariant(Ya::statusColor(contact->status().type()));
--- psi.orig/src/contactlistmodel.h
+++ psi/src/contactlistmodel.h
@@ -78,6 +78,12 @@ public:
 		AlertPictureRole = Qt::UserRole + 11,
 		IsAnimRole = Qt::UserRole + 21,
 		PhaseRole = Qt::UserRole + 22,
+		MoodRole = Qt::UserRole + 23,
+		ActivityRole = Qt::UserRole + 24,
+		GeolocationRole = Qt::UserRole + 25,
+		ClientRole = Qt::UserRole + 26,
+		TuneRole = Qt::UserRole + 27,
+		AvatarRole = Qt::UserRole + 28,
 
 		// groups
 		ExpandedRole = Qt::UserRole + 12,
--- psi.orig/src/contactlistviewdelegate.cpp
+++ psi/src/contactlistviewdelegate.cpp
@@ -197,7 +197,9 @@ void ContactListViewDelegate::drawText(Q
 		txt = option.fontMetrics.elidedText(text, option.textElideMode, rect.width());
 #endif
 		painter->save();
-		painter->setClipRect(rect);
+		QRect txtRect(rect);
+		txtRect.setHeight(option.fontMetrics.height());
+		painter->setClipRect(txtRect);
 	}
 
 	// painter->save();
--- psi.orig/src/psicontactlistviewdelegate.cpp
+++ psi/src/psicontactlistviewdelegate.cpp
@@ -34,6 +34,18 @@ static const QString slimGroupsOptionPat
 static const QString contactListBackgroundOptionPath = "options.ui.look.colors.contactlist.background";
 static const QString showStatusMessagesOptionPath = "options.ui.contactlist.status-messages.show";
 static const QString statusSingleOptionPath = "options.ui.contactlist.status-messages.single-line";
+static const QString showClientIconsPath = "options.ui.contactlist.show-client-icons";
+static const QString showMoodIconsPath = "options.ui.contactlist.show-mood-icons";
+static const QString showGeolocIconsPath = "options.ui.contactlist.show-geolocation-icons";
+static const QString showActivityIconsPath = "options.ui.contactlist.show-activity-icons";
+static const QString showTuneIconsPath = "options.ui.contactlist.show-tune-icons";
+static const QString avatarSizeOptionPath = "options.ui.contactlist.avatars.size";
+static const QString avatarRadiusOptionPath = "options.ui.contactlist.avatars.radius";
+static const QString showAvatarsPath = "options.ui.contactlist.avatars.show";
+static const QString useDefaultAvatarPath = "options.ui.contactlist.avatars.use-default-avatar";
+static const QString avatarAtLeftOptionPath = "options.ui.contactlist.avatars.avatars-at-left";
+static const QString showStatusIconsPath = "options.ui.contactlist.show-status-icons";
+static const QString statusIconsOverAvatarsPath = "options.ui.contactlist.status-icon-over-avatar";
 
 PsiContactListViewDelegate::PsiContactListViewDelegate(ContactListView* parent)
 	: ContactListViewDelegate(parent)
@@ -51,6 +64,18 @@ PsiContactListViewDelegate::PsiContactLi
 	optionChanged(contactListBackgroundOptionPath);
 	optionChanged(showStatusMessagesOptionPath);
 	optionChanged(statusSingleOptionPath);
+	optionChanged(showClientIconsPath);
+	optionChanged(showMoodIconsPath);
+	optionChanged(showGeolocIconsPath);
+	optionChanged(showActivityIconsPath);
+	optionChanged(showTuneIconsPath);
+	optionChanged(avatarSizeOptionPath);
+	optionChanged(avatarRadiusOptionPath);
+	optionChanged(showAvatarsPath);
+	optionChanged(useDefaultAvatarPath);
+	optionChanged(avatarAtLeftOptionPath);
+	optionChanged(showStatusIconsPath);
+	optionChanged(statusIconsOverAvatarsPath);
 }
 
 PsiContactListViewDelegate::~PsiContactListViewDelegate()
@@ -61,7 +87,8 @@ PsiContactListViewDelegate::~PsiContactL
 
 int PsiContactListViewDelegate::avatarSize() const
 {
-	return rowHeight_;
+	return showAvatars_ ?
+		qMax(avatarSize_ + 2, rowHeight_) : rowHeight_;
 }
 
 QPixmap PsiContactListViewDelegate::statusPixmap(const QModelIndex& index) const
@@ -89,6 +116,9 @@ QPixmap PsiContactListViewDelegate::stat
 		}
 	}
 
+	if (!showStatusIcons_)
+		return QPixmap();
+
 	if (type == ContactListModel::ContactType) {
 		if (!index.data(ContactListModel::PresenceErrorRole).toString().isEmpty())
 			s = STATUS_ERROR;
@@ -103,6 +133,57 @@ QPixmap PsiContactListViewDelegate::stat
 	return PsiIconset::instance()->statusPtr(index.data(ContactListModel::JidRole).toString(), s)->pixmap();
 }
 
+QList<QPixmap> PsiContactListViewDelegate::clientPixmap(const QModelIndex& index) const
+{
+	QList<QPixmap> pixList;
+	ContactListModel::Type type = ContactListModel::indexType(index);
+	if (type != ContactListModel::ContactType)
+		return pixList;
+
+	QStringList vList = index.data(ContactListModel::ClientRole).toStringList();
+	if(vList.isEmpty())
+		return pixList;
+
+	foreach(QString client, vList) {
+		const QPixmap &pix = IconsetFactory::iconPixmap("clients/" + client);
+		if(!pix.isNull())
+			pixList.push_back(pix);
+	}
+
+	return pixList;
+}
+
+QPixmap PsiContactListViewDelegate::avatarIcon(const QModelIndex& index) const
+{
+	QPixmap avatar_icon;
+	int avSize = showAvatars_ ? avatarSize_ : 0;
+	QPixmap av = qVariantValue<QPixmap>(index.data(ContactListModel::AvatarRole));
+	if(av.isNull() && useDefaultAvatar_)
+		av = IconsetFactory::iconPixmap("psi/default_avatar");
+	int radius;
+	if (avSize && !av.isNull()) {
+		if ( (radius = avatarRadius_) ) {
+			avSize = qMax(avSize, radius*2);
+			av = av.scaled(avSize, avSize, Qt::KeepAspectRatio, Qt::SmoothTransformation);
+			int w = av.width(), h = av.height();
+			QPainterPath pp;
+			pp.addRoundedRect(0, 0, w, h, radius, radius);
+			avatar_icon = QPixmap(w, h);
+			avatar_icon.fill(QColor(0,0,0,0));
+			QPainter mp(&avatar_icon);
+			mp.setBackgroundMode(Qt::TransparentMode);
+			mp.setRenderHints(QPainter::Antialiasing, true);
+			mp.fillPath(pp, QBrush(av));
+		} else {
+			avatar_icon = av.scaled(avSize, avSize, Qt::KeepAspectRatio, Qt::SmoothTransformation);
+		}
+	} else {
+		avatar_icon = QPixmap();
+	}
+
+	return avatar_icon;
+}
+
 QSize PsiContactListViewDelegate::sizeHint(const QStyleOptionViewItem& /*option*/, const QModelIndex& index) const
 {
 	if (index.isValid()) {
@@ -110,12 +207,51 @@ void PsiContactListViewDelegate::drawCon
 	QRect r = option.rect;
 
 	QRect avatarRect(r);
-	const QPixmap statusPixmap = this->statusPixmap(index);
-	avatarRect.translate(1, 1);
-	avatarRect.setSize(statusPixmap.size());
-	painter->drawPixmap(avatarRect.topLeft(), statusPixmap);
+	if(showAvatars_) {
+		const QPixmap avatarPixmap = avatarIcon(index);
+		int size = avatarSize_;
+		avatarRect.setSize(QSize(size,size));
+		if(avatarAtLeft_) {
+			avatarRect.translate(PsiOptions::instance()->getOption("options.ui.contactlist.enable-groups").toBool() ? -5:-1, 1);
+			r.setLeft(avatarRect.right() + 3);
+		}
+		else {
+			avatarRect.moveTopRight(r.topRight());
+			avatarRect.translate(-1,1);
+			r.setRight(avatarRect.left() - 3);
+		}
+		int row = (statusSingle_ && showStatusMessages_) ? rowHeight_*3/2 : rowHeight_;
+		int h = (size - row)/2;
+		if(h > 0) {
+			r.setTop(r.top() + h);
+			r.setHeight(row);
+		}
+		else {
+			avatarRect.setTop(avatarRect.top() - h);
+		}
 
-	r.setLeft(avatarRect.right() + 3);
+		if(!avatarPixmap.isNull()) {
+			painter->drawPixmap(avatarRect.topLeft(), avatarPixmap);
+		}
+	}
+
+	QRect statusRect(r);
+	QPixmap statusPixmap = this->statusPixmap(index);
+	if(!statusPixmap.isNull()) {
+		if(statusIconsOverAvatars_ && showAvatars_) {
+			statusPixmap = statusPixmap.scaled(12,12, Qt::KeepAspectRatio, Qt::SmoothTransformation);
+			statusRect.setSize(statusPixmap.size());
+			statusRect.moveBottomRight(avatarRect.bottomRight());
+			statusRect.translate(-1,-2);
+			r.setLeft(r.left() + 3);
+		} else {
+			statusRect.translate(1, 1);
+			statusRect.setSize(statusPixmap.size());
+			r.setLeft(statusRect.right() + 3);
+		}
+		painter->drawPixmap(statusRect.topLeft(), statusPixmap);		
+	} else
+		r.setLeft(r.left() + 3);
 
 	QColor textColor;
 	if(index.data(ContactListModel::IsAnimRole).toBool()) {
@@ -146,6 +282,74 @@ void PsiContactListViewDelegate::drawCon
 		drawText(painter, o, r, text, index);
 	}
 
+	QRect iconRect(r);
+	QList<QPixmap> rightPixs;
+	QList<int> rightWidths;
+	if (showClientIcons_) {
+		bool showAllClients = PsiOptions::instance()->getOption("options.ui.contactlist.show-all-client-icons").toBool();
+		const QList<QPixmap> pixList = this->clientPixmap(index);
+
+		for (QList<QPixmap>::ConstIterator it = pixList.begin(); it != pixList.end(); ++it) {
+			const QPixmap &pix = *it;
+			rightPixs.push_back(pix);
+			rightWidths.push_back(pix.width());
+			if(!showAllClients) break;
+		}
+	}
+
+	if (showMoodIcons_ && !index.data(ContactListModel::MoodRole).isNull()) {
+		const QPixmap &pix = IconsetFactory::iconPixmap(QString("mood/%1").arg(index.data(ContactListModel::MoodRole).toString()));
+		if(!pix.isNull()) {
+			rightPixs.push_back(pix);
+			rightWidths.push_back(pix.width());
+		}
+	}
+
+	if (showActivityIcons_ && !index.data(ContactListModel::ActivityRole).isNull()) {
+		const QPixmap &pix = IconsetFactory::iconPixmap(QString("activities/%1").arg(index.data(ContactListModel::ActivityRole).toString()));
+		if(!pix.isNull()) {
+			rightPixs.push_back(pix);
+			rightWidths.push_back(pix.width());
+		}
+	}
+
+	if (showTuneIcons_ && index.data(ContactListModel::TuneRole).toBool()) {
+		const QPixmap &pix = IconsetFactory::iconPixmap("psi/notification_roster_tune");
+		rightPixs.push_back(pix);
+		rightWidths.push_back(pix.width());
+	}
+
+        if (showGeolocIcons_ && index.data(ContactListModel::GeolocationRole).toBool()) {
+		const QPixmap &pix = IconsetFactory::iconPixmap("system/geolocation");
+		rightPixs.push_back(pix);
+		rightWidths.push_back(pix.width());
+	}
+
+	if(rightPixs.isEmpty())
+		return;
+
+	int sumWidth = 0;
+	foreach (int w, rightWidths) {
+		sumWidth += w;
+	}
+	QColor bgc = (option.state & QStyle::State_Selected) ? palette.color(QPalette::Highlight) : palette.color(QPalette::Base);
+	QColor tbgc = bgc;
+	tbgc.setAlpha(0);
+	sumWidth+=rightPixs.count();
+	QLinearGradient grad(r.right() - sumWidth - 20, 0, r.right() - sumWidth, 0);
+	grad.setColorAt(0, tbgc);
+	grad.setColorAt(1, bgc);
+	QBrush tbakBr(grad);
+	QRect gradRect(r);
+	gradRect.setLeft(gradRect.right() - sumWidth - 20);
+	painter->fillRect(gradRect, tbakBr);
+
+	for (int i=0; i<rightPixs.size(); i++) {
+		const QPixmap pix = rightPixs[i];
+		iconRect.setRight(iconRect.right() - pix.width() -1);
+		painter->drawPixmap(iconRect.topRight(), pix);
+	}
+
 #if 0
 	int x;
 	if (d->status_single)
@@ -307,6 +531,54 @@ void PsiContactListViewDelegate::optionC
 		showStatusMessages_ = PsiOptions::instance()->getOption(showStatusMessagesOptionPath).toBool();
 		contactList()->viewport()->update();
 	}
+	else if(option == showClientIconsPath) {
+		showClientIcons_ = PsiOptions::instance()->getOption(showClientIconsPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == showMoodIconsPath) {
+		showMoodIcons_ = PsiOptions::instance()->getOption(showMoodIconsPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == showActivityIconsPath) {
+		showActivityIcons_ = PsiOptions::instance()->getOption(showActivityIconsPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == showTuneIconsPath) {
+		showTuneIcons_ = PsiOptions::instance()->getOption(showTuneIconsPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == showGeolocIconsPath) {
+		showGeolocIcons_ = PsiOptions::instance()->getOption(showGeolocIconsPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == showAvatarsPath) {
+		showAvatars_ = PsiOptions::instance()->getOption(showAvatarsPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == useDefaultAvatarPath) {
+		useDefaultAvatar_ = PsiOptions::instance()->getOption(useDefaultAvatarPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == avatarAtLeftOptionPath) {
+		avatarAtLeft_ = PsiOptions::instance()->getOption(avatarAtLeftOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == avatarSizeOptionPath) {
+		avatarSize_ = PsiOptions::instance()->getOption(avatarSizeOptionPath).toInt();
+		contactList()->viewport()->update();
+	}
+	else if(option == avatarRadiusOptionPath) {
+		avatarRadius_ = PsiOptions::instance()->getOption(avatarRadiusOptionPath).toInt();
+		contactList()->viewport()->update();
+	}
+	else if(option == showStatusIconsPath) {
+		showStatusIcons_ = PsiOptions::instance()->getOption(showStatusIconsPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == statusIconsOverAvatarsPath) {
+		statusIconsOverAvatars_ = PsiOptions::instance()->getOption(statusIconsOverAvatarsPath).toBool();
+		contactList()->viewport()->update();
+	}
 	else if(option == slimGroupsOptionPath) {
 		slimGroup_ = PsiOptions::instance()->getOption(slimGroupsOptionPath).toBool();
 		contactList()->viewport()->update();
--- psi.orig/src/psicontactlistviewdelegate.h
+++ psi/src/psicontactlistviewdelegate.h
@@ -51,6 +52,8 @@ protected:
 	virtual QRect editorRect(const QRect& nameRect) const;
 
 	virtual QPixmap statusPixmap(const QModelIndex& index) const;
+	virtual QList<QPixmap> clientPixmap(const QModelIndex& index) const;
+	virtual QPixmap avatarIcon(const QModelIndex& index) const;
 
 private slots:
 	void optionChanged(const QString& option);
@@ -60,7 +63,9 @@ private:
 	QFontMetrics* fontMetrics_;
 	bool statusSingle_;
 	int rowHeight_;
-	bool showStatusMessages_, slimGroup_, outlinedGroup_;
+	bool showStatusMessages_, slimGroup_, outlinedGroup_, showClientIcons_, showMoodIcons_, showActivityIcons_, showGeolocIcons_, showTuneIcons_;
+	bool showAvatars_, useDefaultAvatar_, avatarAtLeft_, showStatusIcons_, statusIconsOverAvatars_;
+	int avatarSize_, avatarRadius_;
 	mutable QHash<QModelIndex, bool> alertingIndexes_;
 };
 
