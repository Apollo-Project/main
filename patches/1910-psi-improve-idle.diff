--- psi.orig/src/libpsi/tools/idle/idle.cpp
+++ psi/src/libpsi/tools/idle/idle.cpp
@@ -93,8 +93,8 @@ void Idle::start()
 		d->idleSince = QDateTime::currentDateTime();
 	}
 
-	// poll every second (use a lower value if you need more accuracy)
-	d->checkTimer.start(1000);
+	// poll every minute (use a lower value if you need more accuracy)
+	d->checkTimer.start(60000);
 }
 
 void Idle::stop()
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -527,6 +527,9 @@ public:
 	QList<PsiContact*> contacts;
 	int onlineContactsCount;
 
+	bool useOffline, useNotAvailable, useAway, menuXA;
+	int offlineAfter, notAvailableAfter, awayAfter;
+
 private:
 	bool doPopups_;
 
@@ -1143,8 +1146,6 @@ PsiAccount::PsiAccount(const UserAccount
 	d->client->setFileTransferEnabled(false);
 #endif
 
-	setSendChatState(PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool());
-	setReceipts(PsiOptions::instance()->getOption("options.ui.notifications.send-receipts").toBool());
 
 	//connect(d->client, SIGNAL(connected()), SLOT(client_connected()));
 	//connect(d->client, SIGNAL(handshaken()), SLOT(client_handshaken()));
@@ -1177,7 +1178,6 @@ PsiAccount::PsiAccount(const UserAccount
 
 	// Caps manager
 	d->capsManager = new CapsManager(d->client->jid(), capsRegistry, new IrisProtocol::DiscoInfoQuerier(d->client));
-	d->capsManager->setEnabled(PsiOptions::instance()->getOption("options.service-discovery.enable-entity-capabilities").toBool());
 
 	// Roster item exchange task
 	d->rosterItemExchangeTask = new RosterItemExchangeTask(d->client->rootTask());
@@ -1233,7 +1233,6 @@ PsiAccount::PsiAccount(const UserAccount
 	d->rcSetOptionsServer = 0;
 	d->rcForwardServer = 0;
 	d->rcLeaveMucServer =0;
-	setRCEnabled(PsiOptions::instance()->getOption("options.external-control.adhoc-remote-control.enable").toBool());
 
 	// Plugins
 #ifdef PSI_PLUGINS
@@ -1350,6 +1349,9 @@ PsiAccount::PsiAccount(const UserAccount
 	d->contactList->link(this);
 
 	d->updateContacts(); //update always visible contacts state
+
+	//init some settings
+	optionsUpdate();
 }
 
 PsiAccount::~PsiAccount()
@@ -3161,11 +3163,11 @@ void PsiAccount::secondsIdle(int seconds
 	d->lastIdle = seconds;
 	int minutes = seconds / 60;
 
-	if(PsiOptions::instance()->getOption("options.status.auto-away.use-offline").toBool() && PsiOptions::instance()->getOption("options.status.auto-away.offline-after").toInt() > 0 && minutes >= PsiOptions::instance()->getOption("options.status.auto-away.offline-after").toInt())
+	if(d->useOffline && d->offlineAfter > 0 && minutes >= d->offlineAfter)
 		d->setAutoAway(Private::AutoAway_Offline);
-	else if(PsiOptions::instance()->getOption("options.status.auto-away.use-not-availible").toBool() && PsiOptions::instance()->getOption("options.ui.menu.status.xa").toBool() && PsiOptions::instance()->getOption("options.status.auto-away.not-availible-after").toInt() > 0 && minutes >= PsiOptions::instance()->getOption("options.status.auto-away.not-availible-after").toInt())
+	else if(d->useNotAvailable && d->menuXA && d->notAvailableAfter > 0 && minutes >= d->notAvailableAfter)
 		d->setAutoAway(Private::AutoAway_XA);
-	else if(PsiOptions::instance()->getOption("options.status.auto-away.use-away").toBool() && PsiOptions::instance()->getOption("options.status.auto-away.away-after").toInt() > 0 && minutes >= PsiOptions::instance()->getOption("options.status.auto-away.away-after").toInt())
+	else if(d->useAway && d->awayAfter > 0 && minutes >= d->awayAfter)
 		d->setAutoAway(Private::AutoAway_Away);
 	else
 		d->setAutoAway(Private::AutoAway_None);
@@ -6208,6 +6210,14 @@ void PsiAccount::optionsUpdate()
 
 	// Caps manager
 	d->capsManager->setEnabled(PsiOptions::instance()->getOption("options.service-discovery.enable-entity-capabilities").toBool());
+
+	d->useOffline = PsiOptions::instance()->getOption("options.status.auto-away.use-offline").toBool();
+	d->useNotAvailable = PsiOptions::instance()->getOption("options.status.auto-away.use-not-availible").toBool();
+	d->useAway = PsiOptions::instance()->getOption("options.status.auto-away.use-away").toBool();
+	d->offlineAfter = PsiOptions::instance()->getOption("options.status.auto-away.offline-after").toInt();
+	d->notAvailableAfter = PsiOptions::instance()->getOption("options.status.auto-away.not-availible-after").toInt();
+	d->awayAfter = PsiOptions::instance()->getOption("options.status.auto-away.away-after").toInt();
+	d->menuXA = PsiOptions::instance()->getOption("options.ui.menu.status.xa").toBool();
 }
 
 
