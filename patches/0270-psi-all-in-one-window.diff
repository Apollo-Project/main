Entering 'iris'
Entering 'src/libpsi'
Index: psi/options/default.xml
===================================================================
--- psi.orig/options/default.xml	2013-01-15 14:04:04.268826136 +0400
+++ psi/options/default.xml	2013-01-15 14:04:04.260826136 +0400
@@ -114,6 +114,11 @@
 				<scaled-message-icons type="bool">false</scaled-message-icons>
 				<warn-before-clear type="bool">true</warn-before-clear>
 			</chat>
+			<save>
+				<toolbars-state type="QByteArray"/>
+				<log-width type="int">500</log-width>
+				<roster-width type="int">180</roster-width>
+			</save>
 			<history comment="History dialog options">
 				<size comment="Remembered window size" type="QSize">
 					<width>640</width>
@@ -165,10 +170,10 @@
 				<show-client-icons type="bool">true</show-client-icons>
 				<show-all-client-icons type="bool">false</show-all-client-icons>
 				<toolbars/>
-				<toolbars-state type="QByteArray"/>
 				<use-left-click type="bool">false</use-left-click>
 				<use-single-click type="bool">false</use-single-click>
 				<use-status-change-animation type="bool">true</use-status-change-animation>
+				<roster-at-left-when-all-in-one-window type="bool">false</roster-at-left-when-all-in-one-window>
 				<use-transport-icons type="bool">true</use-transport-icons>
 				<saved-window-geometry type="QRect" >
 					<x>64</x>
@@ -367,7 +372,7 @@
 				<put-tabs-at-bottom type="bool">false</put-tabs-at-bottom>
 				<use-tabs type="bool">true</use-tabs>
 				<size type="QString"></size> <!-- will be invalid when converted to QSize so we can detect first load -->
-				<grouping type="QString" comment="A ':' seperated list of groups of kinds of tabs to keep in the same tabset. 'C' for chat and 'M' for mucs">CM</grouping>
+				<grouping type="QString" comment="A ':' seperated list of groups of kinds of tabs to keep in the same tabset. 'C' for chat and 'M' for mucs. 'A' means using all in one window patch.">CM</grouping>
 				<group-state comment="Saved state data of the tabsets defined by options.ui.tabs.grouping"/>
 				<tab-singles type="QString" comment="Tab types that would have been untabbed are given their own tabset. 'C' for chat and 'M' for mucs"/>
 				<use-tab-shortcuts type="bool">true</use-tab-shortcuts>
Index: psi/src/mainwin.cpp
===================================================================
--- psi.orig/src/mainwin.cpp	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/mainwin.cpp	2013-01-15 14:04:04.264826136 +0400
@@ -33,6 +33,7 @@
 #include <QKeyEvent>
 #include <QEvent>
 #include <QVBoxLayout>
+#include <QSplitter>
 #include <QMenu>
 #include <QtAlgorithms>
 #include <QShortcut>
@@ -41,6 +42,8 @@
 #include <windows.h>
 #endif
 
+#include "tabmanager.h"
+#include "tabdlg.h"
 #include "common.h"
 #include "showtextdlg.h"
 #include "psicon.h"
@@ -96,14 +99,20 @@
 	Private(PsiCon *, MainWin *);
 	~Private();
 
-	QVBoxLayout* vb_main;
 	bool onTop, asTool;
 	QMenu* mainMenu, *statusMenu, *optionsMenu, *toolsMenu;
 	int sbState;
 	QString nickname;
 	PsiTrayIcon* tray;
 	QMenu* trayMenu;
+	QVBoxLayout *vb_roster;
+	QSplitter *splitter;
+	TabDlg *mainTabs;
 	QString statusTip;
+	PsiToolBar *viewToolBar;
+	int tabsSize;
+	int rosterSize;
+	bool isLeftRoster;
 
 	PopupAction* optionsButton, *statusButton;
 	IconActionGroup* statusGroup;
@@ -135,7 +144,7 @@
 	void updateMenu(QStringList actions, QMenu* menu);
 };
 
-MainWin::Private::Private(PsiCon* _psi, MainWin* _mainWin) : psi(_psi), mainWin(_mainWin)
+MainWin::Private::Private(PsiCon* _psi, MainWin* _mainWin) : splitter(0), mainTabs(0), viewToolBar(0), isLeftRoster(false), psi(_psi), mainWin(_mainWin)
 {
 
 	statusGroup   = (IconActionGroup *)getAction("status_all");
@@ -256,6 +265,10 @@
 #define TOOLW_FLAGS ((Qt::WindowFlags) 0)
 #endif
 
+const QString toolbarsStateOptionPath = "options.ui.save.toolbars-state";
+const QString rosterGeometryPath      = "options.ui.save.roster-width";
+const QString tabsGeometryPath        = "options.ui.save.log-width";
+
 MainWin::MainWin(bool _onTop, bool _asTool, PsiCon* psi)
 :AdvancedWidget<QMainWindow>(0, (_onTop ? Qt::WindowStaysOnTopHint : Qt::Widget) | (_asTool ? (Qt::Tool |TOOLW_FLAGS) : Qt::Widget))
 {
@@ -281,14 +294,43 @@
 	d->statusTip = "";
 	d->nickname = "";
 
-	QWidget* center = new QWidget (this);
-	setCentralWidget ( center );
+	QWidget *rosterBar = new QWidget(this);
+	bool allInOne = false;
+
+	if ( PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool() && PsiOptions::instance()->getOption("options.ui.tabs.grouping").toString().contains('A')) {
+		d->splitter = new QSplitter(this);
+		d->splitter->setObjectName("onewindowsplitter");
+		connect(d->splitter, SIGNAL(splitterMoved(int,int)), this, SLOT(splitterMoved()));
+		setCentralWidget(d->splitter);
+		allInOne = true;
+
+		d->mainTabs = d->psi->tabManager()->newTabs(0);
+		d->psi->tabManager()->setPreferredTabsForKind('C', d->mainTabs);
+		d->psi->tabManager()->setPreferredTabsForKind('M', d->mainTabs);
+
+		QList<int> sizes;
+		d->rosterSize = PsiOptions::instance()->getOption(rosterGeometryPath).toInt();
+		d->tabsSize = PsiOptions::instance()->getOption(tabsGeometryPath).toInt();
+		d->isLeftRoster = PsiOptions::instance()->getOption("options.ui.contactlist.roster-at-left-when-all-in-one-window").toBool();
+		if (d->isLeftRoster) {
+			d->splitter->addWidget(rosterBar);
+			d->splitter->addWidget(d->mainTabs);
+			sizes << d->rosterSize << d->tabsSize;
+		} else {
+			d->splitter->addWidget(d->mainTabs);
+			d->splitter->addWidget(rosterBar);
+			sizes << d->tabsSize << d->rosterSize;
+		}
+
+		d->splitter->setSizes(sizes);
+	} else
+		setCentralWidget(rosterBar);
 
-	d->vb_main = new QVBoxLayout(center);
+	d->vb_roster = new QVBoxLayout(rosterBar);
 #ifndef NEWCONTACTLIST
-	cvlist = new ContactView(center);
+	cvlist = new ContactView(rosterBar);
 #else
-	d->rosterWidget_ = new PsiRosterWidget(center);
+	d->rosterWidget_ = new PsiRosterWidget(rosterBar);
 	d->rosterWidget_->setContactList(psi->contactList());
 #endif
 
@@ -302,13 +344,31 @@
 	// d->contactListView_->setFrameShape(QFrame::NoFrame);
 #endif
 #endif
-	d->vb_main->setMargin(layoutMargin);
-	d->vb_main->setSpacing(layoutMargin);
+	QMenu* viewMenu = new QMenu(tr("View"), this);
+
+
+	d->vb_roster->setMargin(layoutMargin);
+	d->vb_roster->setSpacing(layoutMargin);
+
+	if (allInOne) {
+		QString toolOpt = "options.ui.contactlist.toolbars";
+		foreach(QString base, PsiOptions::instance()->getChildOptionNames(toolOpt, true, true)) {
+			// toolbar "Show contacts" is second, so check m1
+			if (base == toolOpt + ".m1") {
+				d->viewToolBar = new PsiToolBar(base, rosterBar, d->psi->actionList());
+				d->viewToolBar->initialize();
+				connect(d->viewToolBar, SIGNAL(customize()), d->psi, SLOT(doToolbars()));
+				d->vb_roster->addWidget(d->viewToolBar);
+				break;
+			}
+		}
+	}
+
 
 #ifndef NEWCONTACTLIST
 	// create search bar
-	d->searchWidget = new QWidget(centralWidget());
-	d->vb_main->addWidget(d->searchWidget);
+	d->searchWidget = new QWidget(rosterBar);
+	d->vb_roster->addWidget(d->searchWidget);
 	QHBoxLayout* searchLayout = new QHBoxLayout(d->searchWidget);
 	searchLayout->setMargin(0);
 	searchLayout->setSpacing(0);
@@ -325,15 +385,15 @@
 
 	//add contact view
 #ifndef NEWCONTACTLIST
-	d->vb_main->addWidget(cvlist);
+	d->vb_roster->addWidget(cvlist);
 # ifdef Q_OS_MAC
 	// Disable the empty vertical scrollbar:
 	// it's here because of weird code in q3scrollview.cpp
 	// Q3ScrollView::updateScrollBars() around line 877
-	d->vb_main->addSpacing(4);
+	d->vb_roster->addSpacing(4);
 # endif
 #else
-	d->vb_main->addWidget(d->rosterWidget_);
+	d->vb_roster->addWidget(d->rosterWidget_);
 #endif
 
 	d->statusMenu = new QMenu(tr("Status"), this);
@@ -390,7 +450,6 @@
 
 	mainMenuBar()->addMenu(d->statusMenu);
 
-	QMenu* viewMenu = new QMenu(tr("View"), this);
 	mainMenuBar()->addMenu(viewMenu);
 	d->getAction("show_offline")->addTo(viewMenu);
 	// if (PsiOptions::instance()->getOption("options.ui.menu.view.show-away").toBool()) {
@@ -457,9 +516,22 @@
 	}
 
 	saveToolbarsState();
+
+	if(d->splitter) {
+		PsiOptions::instance()->setOption(rosterGeometryPath, d->rosterSize);
+		PsiOptions::instance()->setOption(tabsGeometryPath, d->tabsSize);
+	}
+
 	delete d;
 }
 
+void MainWin::splitterMoved()
+{
+	QList<int> list = d->splitter->sizes();
+	d->rosterSize = !d->isLeftRoster ? list.last() : list.first();
+	d->tabsSize = d->isLeftRoster ? list.last() : list.first();
+}
+
 void MainWin::registerAction( IconAction* action )
 {
 	const char *activated  = SIGNAL( triggered() );
@@ -691,8 +763,6 @@
 	return menuBar();
 }
 
-const QString toolbarsStateOptionPath = "options.ui.contactlist.toolbars-state";
-
 void MainWin::saveToolbarsState()
 {
 	PsiOptions::instance()->setOption(toolbarsStateOptionPath, saveState());
@@ -713,8 +783,21 @@
 	qDeleteAll(toolbars_);
 	toolbars_.clear();
 
+	bool allInOne = PsiOptions::instance()->getOption("options.ui.tabs.grouping").toString().contains('A');
 	foreach(QString base, PsiOptions::instance()->getChildOptionNames("options.ui.contactlist.toolbars", true, true)) {
-		PsiToolBar* tb = new PsiToolBar(base, this, d->psi->actionList());
+		PsiToolBar* tb;
+		if (allInOne) {
+			if (d && d->viewToolBar && (d->viewToolBar->base() == base))
+				continue;
+			tb = new PsiToolBar(base, this, d->psi->actionList());
+			d->vb_roster->addWidget(tb);
+		} else {
+			if (d && d->viewToolBar) {
+				delete d->viewToolBar;
+				d->viewToolBar = 0;
+			}
+			tb = new PsiToolBar(base, this, d->psi->actionList());
+		}
 		tb->initialize();
 		connect(tb, SIGNAL(customize()), d->psi, SLOT(doToolbars()));
 		toolbars_ << tb;
@@ -736,6 +819,11 @@
 	foreach(PsiToolBar* tb, toolbars_) {
 		tb->setUpdatesEnabled(true);
 	}
+
+	if (allInOne && d && d->viewToolBar) {
+		d->viewToolBar->updateVisibility();
+		d->viewToolBar->setUpdatesEnabled(true);
+	}
 }
 
 bool MainWin::showDockMenu(const QPoint &)
@@ -1089,6 +1177,17 @@
 #endif
 }
 
+void MainWin::changeEvent(QEvent *event)
+{
+    if (event->type() == QEvent::ActivationChange ||
+	    event->type() == QEvent::WindowStateChange)
+	{
+		if (d->mainTabs) {
+			QCoreApplication::sendEvent(d->mainTabs, event);
+		}
+	}
+}
+
 void MainWin::keyPressEvent(QKeyEvent* e)
 {
 #ifdef Q_OS_MAC
@@ -1527,4 +1626,26 @@
 		AvCallManager::config();
 }
 
+void MainWin::resizeEvent(QResizeEvent *e)
+{
+	AdvancedWidget<QMainWindow>::resizeEvent(e);
+
+	if(d->splitter && isVisible()) {
+		QList<int> sizes = d->splitter->sizes();
+		int tabsWidth = !d->isLeftRoster ? sizes.first() : sizes.last();
+		int rosterWidth = d->isLeftRoster ? sizes.first() : sizes.last();
+		int dw = rosterWidth - d->rosterSize;
+		sizes.clear();
+		sizes.append(tabsWidth + dw);
+		if(d->isLeftRoster) {
+			sizes.prepend(d->rosterSize);
+		}
+		else {
+			sizes.append(d->rosterSize);
+		}
+		d->splitter->setSizes(sizes);
+		d->tabsSize = tabsWidth + dw;
+	}
+}
+
 //#endif
Index: psi/src/mainwin.h
===================================================================
--- psi.orig/src/mainwin.h	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/mainwin.h	2013-01-15 14:04:04.264826136 +0400
@@ -72,7 +72,9 @@
 
 protected:
 	// reimplemented
+	void resizeEvent(QResizeEvent *e);
 	void closeEvent(QCloseEvent *);
+	void changeEvent(QEvent *event);
 	void keyPressEvent(QKeyEvent *);
 	QMenuBar* mainMenuBar() const;
 #ifdef Q_OS_WIN
@@ -141,6 +143,7 @@
 	void searchTextStarted(QString const &text);
 
 	void registerAction( IconAction * );
+	void splitterMoved();
 
 public slots:
 	void setWindowIcon(const QPixmap&);
Index: psi/src/options/opt_chat.cpp
===================================================================
--- psi.orig/src/options/opt_chat.cpp	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/options/opt_chat.cpp	2013-01-15 14:04:04.264826136 +0400
@@ -136,12 +136,15 @@
 		case 3:
 			tabGrouping = "CM";
 			break;
+		case 4:
+			tabGrouping = "ACM";
+			break;
 	}
 	if (!tabGrouping.isEmpty()) {
 		PsiOptions::instance()->setOption("options.ui.tabs.grouping", tabGrouping);
 	} else {
-		if (d->cb_tabGrouping->count() == 5) {
-			d->cb_tabGrouping->removeItem(4);
+		if (d->cb_tabGrouping->count() == 6) {
+			d->cb_tabGrouping->removeItem(5);
 		}
 	}
 	
@@ -188,16 +191,18 @@
 		d->cb_tabGrouping->setCurrentIndex(2);
 	} else if (tabGrouping == "CM") {
 		d->cb_tabGrouping->setCurrentIndex(3);
+	} else if (tabGrouping == "ACM") {
+		d->cb_tabGrouping->setCurrentIndex(4);
 	} else {
-		if (d->cb_tabGrouping->count() == 5) {
-			d->cb_tabGrouping->setCurrentIndex(4);
+		if (d->cb_tabGrouping->count() == 6) {
+			d->cb_tabGrouping->setCurrentIndex(5);
 		} else {
 			d->cb_tabGrouping->setCurrentIndex(-1);
 		}
 		custom = true;
 	}
-	if (!custom && d->cb_tabGrouping->count() == 5) {
-		d->cb_tabGrouping->removeItem(4);
+	if (!custom && d->cb_tabGrouping->count() == 6) {
+		d->cb_tabGrouping->removeItem(5);
 	}
 	d->ck_autoResize->setChecked( PsiOptions::instance()->getOption("options.ui.chat.use-expanding-line-edit").toBool() );
 	d->ck_tabShortcuts->setChecked( PsiOptions::instance()->getOption("options.ui.tabs.use-tab-shortcuts").toBool() );
Index: psi/src/options/opt_chat.ui
===================================================================
--- psi.orig/src/options/opt_chat.ui	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/options/opt_chat.ui	2013-01-15 14:04:04.264826136 +0400
@@ -92,6 +92,11 @@
          <string>for mucs and chats in one window</string>
         </property>
        </item>
+	   <item>
+		<property name="text" >
+		 <string>for mucs, chats and roster in one window</string>
+		</property>
+	   </item>
        <item>
         <property name="text" >
          <string>[customized]</string>
Index: psi/src/psicon.cpp
===================================================================
--- psi.orig/src/psicon.cpp	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/psicon.cpp	2013-01-15 14:04:04.264826136 +0400
@@ -1317,7 +1317,8 @@
 		alertIconUpdateAlertStyle();
 	}
 
-	if (option == "options.ui.tabs.use-tabs") {
+	if (option == "options.ui.tabs.use-tabs" || 
+		option == "options.ui.tabs.grouping") {
 		QMessageBox::information(0, tr("Information"), tr("Some of the options you changed will only have full effect upon restart."));
 		//notifyRestart = false;
 	}
Index: psi/src/psicon.h
===================================================================
--- psi.orig/src/psicon.h	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/psicon.h	2013-01-15 14:04:04.264826136 +0400
@@ -48,6 +48,7 @@
 class PsiActionList;
 class PsiToolBar;
 class TabDlg;
+class TabManager;
 class AccountsComboBox;
 class ChatDlg;
 class AlertManager;
Index: psi/src/psitoolbar.cpp
===================================================================
--- psi.orig/src/psitoolbar.cpp	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/psitoolbar.cpp	2013-01-15 14:04:04.264826136 +0400
@@ -54,7 +54,7 @@
 	return Qt::NoToolBarArea;
 }
 
-PsiToolBar::PsiToolBar(const QString& base, QMainWindow* mainWindow, MetaActionList* actionList)
+PsiToolBar::PsiToolBar(const QString& base, QWidget* mainWindow, MetaActionList* actionList)
 	: QToolBar(mainWindow)
 	, actionList_(actionList)
 	, base_(base)
@@ -81,6 +81,11 @@
 	menu.exec(e->globalPos());
 }
 
+QString PsiToolBar::base() const
+{
+	return base_;
+}
+
 void PsiToolBar::initialize()
 {
 	PsiOptions* o = PsiOptions::instance();
@@ -108,11 +113,13 @@
 		}
 	}
 
-	QMainWindow* mainWindow = dynamic_cast<QMainWindow*>(parentWidget());
-	mainWindow->addToolBar(dockPositionToToolBarArea((Qt3Dock)o->getOption(base_ + ".dock.position").toInt()),
-	                       this);
-	if (mainWindow && o->getOption(base_ + ".dock.nl").toBool()) {
-		mainWindow->insertToolBarBreak(this);
+	if (!PsiOptions::instance()->getOption("options.ui.tabs.grouping").toString().contains('A')) {
+		QMainWindow* mainWindow = dynamic_cast<QMainWindow*>(parentWidget());
+		if (mainWindow) {
+			mainWindow->addToolBar(dockPositionToToolBarArea((Qt3Dock)o->getOption(base_ + ".dock.position").toInt()), this);
+			if (o->getOption(base_ + ".dock.nl").toBool())
+				mainWindow->insertToolBarBreak(this);
+		}
 	}
 
 	updateVisibility();
Index: psi/src/psitoolbar.h
===================================================================
--- psi.orig/src/psitoolbar.h	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/psitoolbar.h	2013-01-15 14:04:04.264826136 +0400
@@ -35,11 +35,12 @@
 	Q_OBJECT
 
 public:
-	PsiToolBar(const QString& base, QMainWindow* mainWindow, MetaActionList* actionList);
+	PsiToolBar(const QString& base, QWidget* mainWindow, MetaActionList* actionList);
 	~PsiToolBar();
 
 	void initialize();
 	void updateVisibility();
+	QString base() const;
 
 	static void structToOptions(PsiOptions* options, const ToolbarPrefs& s);
 
Index: psi/src/tabs/tabdlg.cpp
===================================================================
--- psi.orig/src/tabs/tabdlg.cpp	2013-01-15 14:04:04.268826136 +0400
+++ psi/src/tabs/tabdlg.cpp	2013-01-15 14:04:04.264826136 +0400
@@ -186,7 +186,8 @@
 
 	setShortcuts();
 
-	setGeometryOptionPath(geometryOption);
+	if(!PsiOptions::instance()->getOption("options.ui.tabs.grouping").toString().contains('A'))
+		setGeometryOptionPath(geometryOption);
 }
 
 TabDlg::~TabDlg()
@@ -487,7 +488,7 @@
 
 void TabDlg::checkHasChats()
 {
-	if (tabWidget_->count() > 0)
+	if (tabWidget_->count() > 0 || this != window())
 		return;
 	deleteLater();
 }
