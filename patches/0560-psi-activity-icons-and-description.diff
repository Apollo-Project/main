--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -169,6 +169,7 @@
 					<radius type="int">5</radius>
 				</avatars>
 				<show-mood-icons type="bool">true</show-mood-icons>
+				<show-activity-icons type="bool">true</show-activity-icons>
 				<show-tune-icons type="bool">true</show-tune-icons>
 				<show-client-icons type="bool">true</show-client-icons>
 				<show-all-client-icons type="bool">false</show-all-client-icons>
--- git.orig/src/activity.cpp
+++ git/src/activity.cpp
@@ -67,6 +67,16 @@ const QString& Activity::text() const
 	return text_;
 }
 
+QString Activity::typeValue() const
+{
+	return ActivityCatalog::instance()->findEntryByType(type_).value();
+}
+
+QString Activity::specificTypeValue() const
+{
+	return ActivityCatalog::instance()->findEntryByType(specificType_).value();
+}
+
 bool Activity::isNull() const
 {
 	return type_ == Unknown && text().isEmpty();
--- git.orig/src/activitydlg.cpp
+++ git/src/activitydlg.cpp
@@ -25,6 +25,7 @@
 #include "activitycatalog.h"
 #include "psiaccount.h"
 #include "pepmanager.h"
+#include "psiiconset.h"
 
 ActivityDlg::ActivityDlg(PsiAccount* pa) : QDialog(0), pa_(pa)
 {
@@ -36,12 +37,20 @@ ActivityDlg::ActivityDlg(PsiAccount* pa)
 	connect(ui_.pb_ok, SIGNAL(clicked()), SLOT(setActivity()));
 
 	ui_.cb_general_type->addItem(tr("<unset>"));
+	Activity::Type at = pa->activity().type();
+	int i=1;
 	foreach(ActivityCatalog::Entry e, ActivityCatalog::instance()->entries()) {
 		if (e.specificType() == Activity::UnknownSpecific) {
 			// The entry e is for a 'general' type.
-			ui_.cb_general_type->addItem(e.text());
+			ui_.cb_general_type->addItem(IconsetFactory::icon("activities/"+e.value()).icon(), e.text());
+			if (e.type() == at) {
+				ui_.cb_general_type->setCurrentIndex(i);
+				loadSpecificActivities(ui_.cb_general_type->currentText());
+			}
+			i++;
 		}
 	}
+	ui_.le_description->setText(pa->activity().text());
 }
 
 void ActivityDlg::loadSpecificActivities(const QString& generalActivityStr)
@@ -53,13 +62,19 @@ void ActivityDlg::loadSpecificActivities
 	}
 	else {
 		ui_.cb_specific_type->addItem(tr("<unset>"));
+		Activity::SpecificType at = pa_->activity().specificType();
+		int i=1;
 		ActivityCatalog* ac = ActivityCatalog::instance();
 		foreach(ActivityCatalog::Entry e, ac->entries()) {
 			if (e.specificType() != Activity::UnknownSpecific) {
 				// The entry e is for a 'specific' type.
 				ActivityCatalog::Entry ge = ac->findEntryByText(generalActivityStr);
 				if (e.type() == ge.type()) {
-					ui_.cb_specific_type->addItem(e.text());
+					ui_.cb_specific_type->addItem(IconsetFactory::icon("activities/"+ge.value()+"_"+e.value()).icon(), e.text());
+					if (e.specificType() == at) {
+						ui_.cb_specific_type->setCurrentIndex(i);
+					}
+					i++;
 				}
 			}
 		}
--- git.orig/src/activity.h
+++ git/src/activity.h
@@ -75,6 +75,8 @@ public:
 
 	Type type() const;
 	QString typeText() const;
+	QString typeValue() const;
+	QString specificTypeValue() const;
 	SpecificType specificType() const;
 	QString specificTypeText() const;
 	const QString& text() const;
--- git.orig/src/options/opt_appearance.cpp
+++ git/src/options/opt_appearance.cpp
@@ -95,6 +95,7 @@ OptionsTabIconset::OptionsTabIconset(QOb
 {
 	addTab( new OptionsTabIconsetEmoticons(this) );
 	addTab( new OptionsTabIconsetMoods(this) );
+	addTab( new OptionsTabIconsetActivity(this) );
 	addTab( new OptionsTabIconsetClients(this) );
 	addTab( new OptionsTabIconsetRoster(this) );
 	addTab( new OptionsTabIconsetSystem(this) );
--- /dev/null
+++ git/src/options/opt_iconset_activity.ui
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>IconsetActivity</class>
+ <widget class="QWidget" name="IconsetActivity">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>256</width>
+    <height>195</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>IconsetActivityUI</string>
+  </property>
+  <layout class="QVBoxLayout">
+   <property name="spacing">
+    <number>6</number>
+   </property>
+   <property name="margin">
+    <number>9</number>
+   </property>
+   <item>
+    <widget class="QGroupBox" name="groupBox9">
+     <property name="title">
+      <string>Activity iconsets</string>
+     </property>
+     <layout class="QGridLayout">
+      <property name="margin">
+       <number>8</number>
+      </property>
+      <property name="spacing">
+       <number>6</number>
+      </property>
+      <item row="1" column="2">
+       <spacer>
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+        <property name="sizeType">
+         <enum>QSizePolicy::Expanding</enum>
+        </property>
+        <property name="sizeHint" stdset="0">
+         <size>
+          <width>204</width>
+          <height>20</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+      <item row="1" column="3">
+       <widget class="IconButton" name="pb_activityDetails" native="true">
+        <property name="text" stdset="0">
+         <string>&amp;Show Details</string>
+        </property>
+       </widget>
+      </item>
+      <item row="0" column="0" colspan="4">
+       <widget class="IconsetSelect" name="iss_activity" native="true"/>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item>
+    <widget class="QProgressBar" name="progress">
+     <property name="orientation">
+      <enum>Qt::Horizontal</enum>
+     </property>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <layoutdefault spacing="6" margin="11"/>
+ <customwidgets>
+  <customwidget>
+   <class>IconButton</class>
+   <extends></extends>
+   <header>iconbutton.h</header>
+  </customwidget>
+  <customwidget>
+   <class>IconsetSelect</class>
+   <extends></extends>
+   <header>iconsetselect.h</header>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
--- git.orig/src/options/opt_iconset.cpp
+++ git/src/options/opt_iconset.cpp
@@ -24,6 +24,7 @@
 
 #include "ui_opt_iconset_emo.h"
 #include "ui_opt_iconset_mood.h"
+#include "ui_opt_iconset_activity.h"
 #include "ui_opt_iconset_client.h"
 #include "ui_opt_iconset_system.h"
 #include "ui_opt_iconset_roster.h"
@@ -47,6 +48,12 @@ public:
 	IconsetClientUI() : QWidget() { setupUi(this); }
 };
 
+class IconsetActivityUI : public QWidget, public Ui::IconsetActivity
+{
+public:
+	IconsetActivityUI() : QWidget() { setupUi(this); }
+};
+
 class IconsetSystemUI : public QWidget, public Ui::IconsetSystem
 {
 public:
@@ -850,6 +857,153 @@ void OptionsTabIconsetMoods::cancelThrea
 		thread = 0;
 	}
 }
+//----------------------------------------------------------------------------
+// OptionsTabIconsetActivity
+//----------------------------------------------------------------------------
+
+OptionsTabIconsetActivity::OptionsTabIconsetActivity(QObject *parent)
+	: OptionsTab(parent, "iconset_activities", "", tr("Activity"), tr("Select your activity iconset"))
+	, w(0)
+	, thread(0)
+{
+}
+
+OptionsTabIconsetActivity::~OptionsTabIconsetActivity()
+{
+	cancelThread();
+}
+
+QWidget *OptionsTabIconsetActivity::widget()
+{
+	if ( w )
+		return 0;
+
+	w = new IconsetActivityUI;
+	IconsetActivityUI *d = (IconsetActivityUI *)w;
+
+	connect(d->pb_activityDetails, SIGNAL(clicked()), SLOT(previewIconset()));
+
+	return w;
+}
+
+void OptionsTabIconsetActivity::applyOptions()
+{
+	if ( !w || thread )
+		return;
+
+	IconsetActivityUI *d = (IconsetActivityUI *)w;
+
+	const Iconset *is = d->iss_activity->iconset();
+	if ( is ) {
+		QFileInfo fi( is->fileName() );
+		PsiOptions::instance()->setOption("options.iconsets.activities", fi.fileName());
+	}
+}
+
+void OptionsTabIconsetActivity::restoreOptions()
+{
+	if ( !w || thread )
+		return;
+
+	IconsetActivityUI *d = (IconsetActivityUI *)w;
+
+	d->iss_activity->clear();
+	QStringList loaded;
+
+	d->setCursor(Qt::WaitCursor);
+
+	QPalette customPal = d->palette();
+	customPal.setCurrentColorGroup(QPalette::Inactive);
+	d->iss_activity->setEnabled(false);
+	d->iss_activity->setPalette(customPal);
+
+	d->pb_activityDetails->setEnabled(false);
+	d->pb_activityDetails->setPalette(customPal);
+
+	d->progress->show();
+	d->progress->setValue( 0 );
+
+	numIconsets = countIconsets("/activities", loaded);
+	iconsetsLoaded = 0;
+
+	cancelThread();
+
+	thread = new IconsetLoadThread(this, "/activities");
+	thread->start();
+}
+
+bool OptionsTabIconsetActivity::event(QEvent *e)
+{
+	IconsetActivityUI *d = (IconsetActivityUI *)w;
+	if ( e->type() == QEvent::User ) { // iconset load event
+		IconsetLoadEvent *le = (IconsetLoadEvent *)e;
+
+		if ( thread != le->thread() )
+			return false;
+
+		if ( !numIconsets )
+			numIconsets = 1;
+		d->progress->setValue( (int)((float)100 * ++iconsetsLoaded / numIconsets) );
+
+		Iconset *i = le->iconset();
+		if ( i ) {
+			PsiIconset::instance()->stripFirstAnimFrame(i);
+			d->iss_activity->insert(*i);
+
+			QFileInfo fi( i->fileName() );
+			if ( fi.fileName() == PsiOptions::instance()->getOption("options.iconsets.activities").toString() )
+				d->iss_activity->setItemSelected(d->iss_activity->lastItem(), true);
+
+			delete i;
+		}
+
+		return true;
+	}
+	else if ( e->type() == QEvent::User + 1 ) { // finish event
+		d->iss_activity->setEnabled(true);
+		d->iss_activity->setPalette(QPalette());
+
+		d->pb_activityDetails->setEnabled(true);
+		d->pb_activityDetails->setPalette(QPalette());
+
+		connect(d->iss_activity, SIGNAL(currentItemChanged(QListWidgetItem*, QListWidgetItem*)), SIGNAL(dataChanged()));
+
+		d->progress->hide();
+
+		d->unsetCursor();
+		thread = 0;
+
+		return true;
+	}
+
+	return false;
+}
+
+void OptionsTabIconsetActivity::previewIconset()
+{
+	IconsetActivityUI *d = (IconsetActivityUI *)w;
+	const Iconset *is = d->iss_activity->iconset();
+	if (is) {
+		isDetails(*is, parentWidget->parentWidget(), psi);
+	}
+}
+
+void OptionsTabIconsetActivity::setData(PsiCon *psicon, QWidget *p)
+{
+	psi = psicon;
+	parentWidget = p;
+}
+
+void OptionsTabIconsetActivity::cancelThread()
+{
+	if ( thread ) {
+		threadCancelled.lock();
+		thread->cancelled = true;
+		threadCancelled.unlock();
+
+		thread = 0;
+	}
+}
 
 //----------------------------------------------------------------------------
 // OptionsTabIconsetClients
--- git.orig/src/options/opt_iconset.h
+++ git/src/options/opt_iconset.h
@@ -93,6 +93,34 @@ private:
 	IconsetLoadThread *thread;
 };
 
+class OptionsTabIconsetActivity : public OptionsTab
+{
+	Q_OBJECT
+public:
+	OptionsTabIconsetActivity(QObject *parent);
+	~OptionsTabIconsetActivity();
+
+	QWidget *widget();
+	void applyOptions();
+	void restoreOptions();
+	bool stretchable() const { return true; }
+
+private slots:
+	void setData(PsiCon *, QWidget *);
+	void previewIconset();
+
+protected:
+	bool event(QEvent *);
+	void cancelThread();
+
+private:
+	QWidget *w, *parentWidget;
+	PsiCon *psi;
+
+	int numIconsets, iconsetsLoaded;
+	IconsetLoadThread *thread;
+};
+
 class OptionsTabIconsetClients : public OptionsTab
 {
 	Q_OBJECT
--- git.orig/src/options/options.pri
+++ git/src/options/options.pri
@@ -62,6 +62,7 @@ FORMS += \
 	$$PWD/ui_isdetails.ui \
 	$$PWD/opt_iconset_emo.ui \
 	$$PWD/opt_iconset_mood.ui \
+	$$PWD/opt_iconset_activity.ui \
 	$$PWD/opt_iconset_client.ui \
 	$$PWD/opt_iconset_system.ui \
 	$$PWD/opt_iconset_roster.ui \
--- git.orig/src/options/opt_roster.cpp
+++ git/src/options/opt_roster.cpp
@@ -69,6 +69,7 @@ void OptionsTabRoster::applyOptions()
 	//enabled icons
 	PsiOptions::instance()->setOption("options.ui.contactlist.avatars.show", d->ck_showAvatarIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-mood-icons", d->ck_showMoodIcons->isChecked());
+	PsiOptions::instance()->setOption("options.ui.contactlist.show-activity-icons", d->ck_showActivityIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-tune-icons", d->ck_showTuneIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-client-icons", d->ck_showClientIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-all-client-icons", (d->cb_showAllClientIcons->currentIndex() == 0)?true:false);
@@ -94,6 +95,7 @@ void OptionsTabRoster::restoreOptions()
 	//enabled icons
 	d->ck_showAvatarIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.avatars.show").toBool() );
 	d->ck_showMoodIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-mood-icons").toBool() );
+	d->ck_showActivityIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-activity-icons").toBool() );
 	d->ck_showTuneIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-tune-icons").toBool() );
 	d->ck_showClientIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-client-icons").toBool() );
 	d->cb_showAllClientIcons->setEnabled(PsiOptions::instance()->getOption("options.ui.contactlist.show-client-icons").toBool());
--- git.orig/src/options/opt_roster.ui
+++ git/src/options/opt_roster.ui
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <ui version="4.0">
  <class>OptRoster</class>
  <widget class="QWidget" name="OptRoster">
@@ -5,8 +6,8 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>343</width>
-    <height>401</height>
+    <width>357</width>
+    <height>452</height>
    </rect>
   </property>
   <property name="windowTitle">
@@ -65,13 +66,7 @@
      <property name="title">
       <string>Icons</string>
      </property>
-     <layout class="QVBoxLayout">
-      <property name="spacing">
-       <number>6</number>
-      </property>
-      <property name="margin">
-       <number>10</number>
-      </property>
+     <layout class="QVBoxLayout" name="verticalLayout_2">
       <item>
        <widget class="QCheckBox" name="ck_showAvatarIcons">
         <property name="whatsThis">
@@ -93,30 +88,40 @@
        </widget>
       </item>
       <item>
-       <widget class="QCheckBox" name="ck_showTuneIcons">
+       <widget class="QCheckBox" name="ck_showActivityIcons">
         <property name="whatsThis">
-         <string>Show icon when contact is listening to music</string>
+         <string>Show activities in roster</string>
         </property>
         <property name="text">
-         <string>Now playing</string>
+         <string>Activities</string>
         </property>
        </widget>
       </item>
       <item>
-       <layout class="QHBoxLayout" >
-        <property name="spacing" >
-         <number>5</number>
-        </property>
-        <item>
-       <widget class="QCheckBox" name="ck_showClientIcons">
+       <widget class="QCheckBox" name="ck_showTuneIcons">
         <property name="whatsThis">
-         <string>Show icon of user client</string>
+         <string>Show icon when contact is listening to music</string>
         </property>
         <property name="text">
-         <string>Clients</string>
+         <string>Now playing</string>
         </property>
        </widget>
       </item>
+      <item>
+       <layout class="QHBoxLayout">
+        <property name="spacing">
+         <number>5</number>
+        </property>
+        <item>
+         <widget class="QCheckBox" name="ck_showClientIcons">
+          <property name="whatsThis">
+           <string>Show icon of user client</string>
+          </property>
+          <property name="text">
+           <string>Clients</string>
+          </property>
+         </widget>
+        </item>
         <item>
          <widget class="QComboBox" name="cb_showAllClientIcons" >
           <item>
@@ -224,4 +229,5 @@
   <tabstop>ck_showTuneIcons</tabstop>
  </tabstops>
  <resources/>
+ <connections/>
 </ui>
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -5501,6 +5501,11 @@ QString PsiAccount::nick() const
 	return d->self.name();
 }
 
+const Activity &PsiAccount::activity() const
+{
+	return d->self.activity();
+}
+
 const Mood &PsiAccount::mood() const
 {
 	return d->self.mood();
--- git.orig/src/psiaccount.h
+++ git/src/psiaccount.h
@@ -33,6 +33,7 @@
 #include "xmpp_status.h"
 #include "psiactions.h"
 #include "mood.h"
+#include "activity.h"
 
 namespace XMPP
 {
@@ -140,6 +141,7 @@ public:
 	void setNick(const QString &);
 	QString nick() const;
 	const Mood &mood() const;
+	const Activity &activity() const;
 	void forceDisconnect(bool fast, const XMPP::Status &s);
 	bool hasPGP() const;
 	QHostAddress *localAddress() const;
--- git.orig/src/psiiconset.cpp
+++ git/src/psiiconset.cpp
@@ -42,8 +42,8 @@ class PsiIconset::Private
 private:
 	PsiIconset *psi;
 public:
-	Iconset system, moods, clients;
-	QString cur_system, cur_status, cur_moods, cur_clients;
+	Iconset system, moods, clients, activities;
+	QString cur_system, cur_status, cur_moods, cur_clients, cur_activity;
 	QStringList cur_emoticons;
 	QMap<QString, QString> cur_service_status;
 	QMap<QString, QString> cur_custom_status;
@@ -245,6 +245,23 @@ public:
 		return def;
 	}
 
+	Iconset activityIconset(bool *ok)
+	{
+		Iconset def;
+		*ok = def.load( iconsetPath("activities/default") );
+
+		if ( PsiOptions::instance()->getOption("options.iconsets.activities").toString() != "default" ) {
+			Iconset is;
+			is.load ( iconsetPath("activities/" + PsiOptions::instance()->getOption("options.iconsets.activities").toString()) );
+
+			loadIconset(&def, &is);
+		}
+
+		stripFirstAnimFrame( def );
+
+		return def;
+	}
+
 	Iconset clientsIconset(bool *ok)
 	{
 		Iconset def;
@@ -401,6 +418,21 @@ bool PsiIconset::loadMoods()
 	return ok;
 }
 
+bool PsiIconset::loadActivity()
+{
+	bool ok = true;
+	QString cur_activity = PsiOptions::instance()->getOption("options.iconsets.activities").toString();
+	if (d->cur_activity != cur_activity) {
+		Iconset activities = d->activityIconset(&ok);
+		d->loadIconset(&d->activities, &activities);
+		d->activities.addToFactory();
+
+		d->cur_activity = cur_activity;
+	}
+
+	return ok;
+}
+
 bool PsiIconset::loadClients()
 {
 	bool ok = true;
@@ -423,6 +455,7 @@ bool PsiIconset::loadAll()
 
 	loadEmoticons();
 	loadMoods();
+	loadActivity();
 	loadClients();
 	return true;
 }
@@ -438,6 +471,9 @@ void PsiIconset::optionChanged(const QSt
 	else if (option == "options.iconsets.moods") {
 		loadMoods();
 	}
+	else if (option == "options.iconsets.activities") {
+		loadActivity();
+	}
 	else if (option == "options.iconsets.clients") {
 		loadClients();
 	}
--- git.orig/src/psiiconset.h
+++ git/src/psiiconset.h
@@ -45,6 +45,7 @@ public:
 	QHash<QString, Iconset*> roster;
 	QList<Iconset*> emoticons;
 	Iconset moods;
+	Iconset activities;
 	Iconset clients;
 	const Iconset &system() const;
 	void stripFirstAnimFrame(Iconset *);
@@ -98,6 +99,7 @@ private:
 	bool loadRoster();
 	void loadEmoticons();
 	bool loadMoods();
+	bool loadActivity();
 	bool loadClients();
 };
 
--- git.orig/src/userlist.cpp
+++ git/src/userlist.cpp
@@ -751,12 +751,17 @@ QString UserListItem::makeBareTip(bool t
 
 	// User Activity
 	if (!activity().isNull()) {
-		str += QString("<div style='white-space:pre'>") + QObject::tr("Activity") + ": " + activity().typeText();
+		QString act = activity().typeValue();
+		if (activity().specificType() != Activity::UnknownSpecific && activity().specificType() != Activity::Other && !activity().specificTypeValue().isEmpty()) {
+			act += "_" + activity().specificTypeValue();
+		}
+		str += QString("<div style='white-space:pre'>") + QObject::tr("Activity") + ": " +
+			QString("<%1=\"activities/%2\"> ").arg(imgTag).arg(act) + activity().typeText();
 		if (activity().specificType() != Activity::UnknownSpecific) {
 			str += QString(" - ") + activity().specificTypeText();
 		}
 		if (!activity().text().isEmpty())
-			str += QString(" (") + activity().text() + QString(")");
+			str += QString(" (") + Qt::escape(activity().text()) + QString(")");
 		str += "</div>";
 	}
 
