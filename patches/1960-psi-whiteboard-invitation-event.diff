diff --git a/src/psiaccount.cpp b/src/psiaccount.cpp
--- a/src/psiaccount.cpp
+++ b/src/psiaccount.cpp
@@ -1217,6 +1217,7 @@ PsiAccount::PsiAccount(const UserAccount &acc, PsiContactList *parent, CapsRegis
 	d->sxeManager = new SxeManager(d->client, this);
 	 // Initialize Whiteboard manager
 	d->wbManager = new WbManager(d->client, this, d->sxeManager);
+	connect(d->wbManager, SIGNAL(wbRequest(Jid,int)),SLOT(wbRequest(Jid,int)));
 #endif
 
 	// Avatars
@@ -1557,7 +1558,12 @@ VoiceCaller* PsiAccount::voiceCaller() const
 {
 	return d->voiceCaller;
 }
-
+#ifdef WHITEBOARDING
+WbManager* PsiAccount::wbManager() const
+{
+	return d->wbManager;
+}
+#endif
 PrivacyManager* PsiAccount::privacyManager() const
 {
 	return d->privacyManager;
@@ -2751,6 +2757,19 @@ void PsiAccount::client_messageReceived(const Message &m)
 	}
 }
 
+#ifdef WHITEBOARDING
+void PsiAccount::wbRequest(const Jid &j, int id)
+{
+	SxeEvent *se = new SxeEvent(id, this);
+	XMPP::Message m;
+	m.setSubject(tr("Whiteboard invitation"));
+	m.setFrom(j);
+	se->setFrom(j);
+	se->setMessage(m);
+	handleEvent(se, IncomingStanza);
+}
+#endif
+
 /**
  * Handles the passed Message \param m. Also message's type could be modified
  * here, if certain options are set.
@@ -5173,6 +5192,13 @@ void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 	else if(e->type() == PsiEvent::HttpAuth) {
 		soundType = eSystem;
 	}
+#ifdef WHITEBOARDING
+	else if(e->type() == PsiEvent::Sxe) {
+		soundType = eHeadline;
+		doPopup = true;
+		popupType = PopupManager::AlertHeadline;
+	}
+#endif
 	else if(e->type() == PsiEvent::File) {
 		soundType = eIncomingFT;
 		doPopup = true;
diff --git a/src/psiaccount.h b/src/psiaccount.h
--- a/src/psiaccount.h
+++ b/src/psiaccount.h
@@ -91,6 +91,9 @@ class GoogleFileTransfer;
 #endif
 class PsiIcon;
 class QIcon;
+#ifdef WHITEBOARDING
+class WbManager;
+#endif
 
 // sick sick remove this someday please!
 struct GCContact;
@@ -135,6 +138,9 @@ public:
 	PrivacyManager* privacyManager() const;
 	CapsManager* capsManager() const;
 	VoiceCaller* voiceCaller() const;
+#ifdef WHITEBOARDING
+	WbManager* wbManager() const;
+#endif
 	Status status() const;
 	static Status loggedOutStatus();
 	int defaultPriority(const XMPP::Status &);
@@ -437,6 +443,10 @@ private slots:
 	void disconnect();
 	void enableNotifyOnline();
 
+#ifdef WHITEBOARDING
+	void wbRequest(const Jid& j, int id);
+#endif
+
 	void itemPublished(const Jid&, const QString&, const PubSubItem&);
 	void itemRetracted(const Jid&, const QString&, const PubSubRetraction&);
 
diff --git a/src/psicon.cpp b/src/psicon.cpp
--- a/src/psicon.cpp
+++ b/src/psicon.cpp
@@ -112,6 +112,9 @@
 #include "alertmanager.h"
 #include "bosskey.h"
 #include "popupmanager.h"
+#ifdef WHITEBOARDING
+#include "whiteboarding/wbmanager.h"
+#endif
 
 #include "AutoUpdater/AutoUpdater.h"
 #ifdef HAVE_SPARKLE
@@ -1772,6 +1775,16 @@ void PsiCon::processEvent(PsiEvent *e, ActivationType activationType)
 		// as the event could be deleted just above, we're using cached account and from values
 		account->openChat(from, activationType);
 	}
+#ifdef WHITEBOARDING
+	else if (e->type() == PsiEvent::Sxe) {
+		e->account()->eventQueue()->dequeue(e);
+		e->account()->queueChanged();
+		e->account()->cpUpdate(*u);
+		e->account()->wbManager()->requestActivated(((SxeEvent*)e)->id());
+		delete e;
+		return;
+	}
+#endif
 	else {
 		// search for an already opened eventdlg
 		EventDlg *w = e->account()->findDialog<EventDlg*>(u->jid());
diff --git a/src/psievent.h b/src/psievent.h
--- a/src/psievent.h
+++ b/src/psievent.h
@@ -53,6 +53,9 @@ public:
 
 	enum {
 		Message,
+#ifdef WHITEBOARDING
+		Sxe,
+#endif
 		Auth,
 		PGP,
 		File,
@@ -174,6 +177,26 @@ private:
 	QString v_at;
 };
 
+#ifdef WHITEBOARDING
+class SxeEvent : public MessageEvent
+{
+	Q_OBJECT
+public:
+	SxeEvent(int id, PsiAccount *acc)
+		: MessageEvent(acc), id_(id) {}
+	SxeEvent(const SxeEvent &from)
+		: MessageEvent(from), id_(from.id()) {}
+	~SxeEvent() {}
+	int type() const { return Sxe; }
+//	XMPP::Jid from() const { return jid(); }
+//	void setFrom(const XMPP::Jid &) {  }
+	int id() const { return id_; }
+
+private:
+	int id_;
+};
+#endif
+
 // request pgp passphrase
 class PGPEvent : public PsiEvent
 {
diff --git a/src/sxe/sxemanager.cpp b/src/sxe/sxemanager.cpp
--- a/src/sxe/sxemanager.cpp
+++ b/src/sxe/sxemanager.cpp
@@ -50,9 +50,9 @@ SxeManager::SxeManager(Client* client, PsiAccount* pa) : client_(client) {
 	connect(&negotiationTimer_, SIGNAL(timeout()), SLOT(negotiationTimeout()));
 }
 
-void SxeManager::addInvitationCallback(bool (*callback)(const Jid &peer, const QList<QString> &features)) {
-	invitationCallbacks_ += callback;
-}
+//void SxeManager::addInvitationCallback(bool (*callback)(const Jid &peer, const QList<QString> &features)) {
+//	invitationCallbacks_ += callback;
+//}
 
 void SxeManager::messageReceived(const Message &message) {
 	// only process messages that contain a <sxe/> with a nonempty
@@ -269,8 +269,9 @@ bool SxeManager::processNegotiationAsJoiner(const QDomNode &negotiationElement,
 
 		// check if one of the invitation callbacks accepts the invitation.
 		const QString sessionId = negotiation->sessionId;
-		foreach(bool (*callback)(const Jid &peer, const QList<QString> &features), invitationCallbacks_) {
-			bool result = callback(negotiation->peer, negotiation->features);
+//		foreach(bool (*callback)(const Jid &peer, const QList<QString> &features), invitationCallbacks_) {
+			bool result = false; //callback(negotiation->peer, negotiation->features);
+			emit invitationCallback(negotiation->peer, negotiation->features, &result);
 			if (!negotiations_.contains(sessionId, negotiation)) { //FIXME that's wrong. negotiation can be replaced with new one with the same address
 				return false;
 			}
@@ -279,7 +280,8 @@ bool SxeManager::processNegotiationAsJoiner(const QDomNode &negotiationElement,
 				negotiation->state = SxeNegotiation::InvitationAccepted;
 				return true;
 			}
-		}
+			return false;
+//		}
 		// othewise abort negotiation
 		abortNegotiation(negotiation);
 		return false;
diff --git a/src/sxe/sxemanager.h b/src/sxe/sxemanager.h
--- a/src/sxe/sxemanager.h
+++ b/src/sxe/sxemanager.h
@@ -101,8 +101,8 @@ public:
 	 *  If such session doesn't exits, returns 0.
 	 */
 	QPointer<SxeSession> findSession(const QString &session);
-	/*! \brief Add a callback for invitations.*/
-	void addInvitationCallback(bool (*callback)(const Jid &peer, const QList<QString> &features));
+//	/*! \brief Add a callback for invitations.*/
+//	void addInvitationCallback(bool (*callback)(const Jid &peer, const QList<QString> &features));
 	/*! \brief Starts a new session negotiation to the specified contact with given list of features.*/
 	void startNewSession(const Jid &target, const Jid &ownJid, bool groupChat, const QDomDocument &initialDoc, QList<QString> features = QList<QString>());
 	/*! \brief Join an existing session.*/
@@ -118,6 +118,8 @@ signals:
 	/*! \brief Emitted when \a an invitation to \a jid was declined and joining an alternative session \a session was suggested.*/
 	void alternativeSession(const Jid &jid, const QString &session);
 
+	void invitationCallback(const Jid &peer, const QList<QString> &features, bool* result);
+
 private:
 	/*! \brief Process a message that contains a negotiation element.
 	 *  Returns a pointer to the new session if negotiation finished.
@@ -163,8 +165,8 @@ private:
 	QList<DetectedSession> DetectedSessions_;
 	/*! \brief A list of Jids corresponding to self.*/
 	QList<QString> ownJids_;
-	/*! \brief A list of callbacks used to determine whether an invitation should be accepted.*/
-	QList<bool (*)(const Jid &peer, const QList<QString> &features)> invitationCallbacks_;
+//	/*! \brief A list of callbacks used to determine whether an invitation should be accepted.*/
+//	QList<bool (*)(const Jid &peer, const QList<QString> &features)> invitationCallbacks_;
 	/*! \brief A counter used for including a unique id in each sent sxe element.*/
 	int sxeId_;
 	/*! \brief A list of messages waiting to be sent out.*/
diff --git a/src/whiteboarding/wbmanager.cpp b/src/whiteboarding/wbmanager.cpp
--- a/src/whiteboarding/wbmanager.cpp
+++ b/src/whiteboarding/wbmanager.cpp
@@ -32,8 +32,45 @@
 
 using namespace XMPP;
 
-// -----------------------------------------------------------------------------
 
+class WbRequest
+{
+public:
+	WbRequest() : loop_(new QEventLoop), id_(lastRequetsId++)
+	{}
+
+	~WbRequest()
+	{
+		if(loop_->isRunning())
+			loop_->exit();
+		delete loop_;
+	}
+
+	void startLoop()
+	{
+		loop_->exec();
+	}
+
+	void stopLoop()
+	{
+		loop_->exit();
+	}
+
+	int id() const
+	{
+		return id_;
+	}
+
+private:
+	QEventLoop *loop_;
+	int id_;
+
+	static int lastRequetsId;
+};
+
+int WbRequest::lastRequetsId = 0;
+
+// -----------------------------------------------------------------------------
 WbManager::WbManager(XMPP::Client* client, PsiAccount* pa, SxeManager* sxemanager) {
 	pa_ = pa;
 	sxemanager_ = sxemanager;
@@ -41,12 +78,14 @@ WbManager::WbManager(XMPP::Client* client, PsiAccount* pa, SxeManager* sxemanage
 	client->addExtension("whiteboard", Features(WBNS));
 
 	connect(sxemanager_, SIGNAL(sessionNegotiated(SxeSession*)), SLOT(createWbDlg(SxeSession*)));
-	sxemanager_->addInvitationCallback(WbManager::checkInvitation);
+	//sxemanager_->addInvitationCallback(WbManager::checkInvitation);
+	connect(sxemanager, SIGNAL(invitationCallback(Jid,QList<QString>,bool*)), this, SLOT(checkInvitation(Jid,QList<QString>,bool*)));
 }
 
 WbManager::~WbManager()
 {
 	qDeleteAll(dialogs_);
+	qDeleteAll(requests_);
 }
 
 void WbManager::openWhiteboard(const Jid &target, const Jid &ownJid, bool groupChat, bool promptInitialDoc) {
@@ -143,13 +182,33 @@ void WbManager::createWbDlg(SxeSession* session) {
 	}
 }
 
-bool WbManager::checkInvitation(const Jid &peer, const QList<QString> &features) {
-	if(!features.contains(WBNS))
-		return false;
+void WbManager::checkInvitation(const Jid &peer, const QList<QString> &features, bool* result) {
+	if(*result)
+		return;
 
-	return (QMessageBox::Yes == QMessageBox::question(NULL,
+	if(!features.contains(WBNS)) {
+		*result = false;
+		return;
+	}
+
+	WbRequest* wr = new WbRequest();
+	requests_.append(wr);
+	emit wbRequest(peer, wr->id());
+	wr->startLoop();
+	requests_.removeAll(wr);
+	delete wr;
+	*result = (QMessageBox::Yes == QMessageBox::question(NULL,
 									tr("Whiteboarding Invitation?"),
 									tr("%1 has invited you to a whiteboarding session. Would you like to join?").arg(peer.full()),
 									QMessageBox::Yes | QMessageBox::No,
 									QMessageBox::No));
 }
+
+void WbManager::requestActivated(int id) {
+	foreach(WbRequest* wr, requests_) {
+		if(wr->id() == id) {
+			wr->stopLoop();
+			return;
+		}
+	}
+}
diff --git a/src/whiteboarding/wbmanager.h b/src/whiteboarding/wbmanager.h
--- a/src/whiteboarding/wbmanager.h
+++ b/src/whiteboarding/wbmanager.h
@@ -37,6 +37,7 @@ namespace XMPP {
 }
 
 using namespace XMPP;
+class WbRequest;
 
 /*! \brief The manager for whiteboard dialogs.
  *  The manager listen to SxeManager to pick up any new sessions negotiated by
@@ -58,7 +59,8 @@ public:
 	WbManager(XMPP::Client* client, PsiAccount* pa, SxeManager* sxemanager);
 	~WbManager();
 	/*! \brief Returns true if features contains WBNS and the user wishes to accept the invitation. */
-    static bool checkInvitation(const Jid &peer, const QList<QString> &features);
+	//static bool checkInvitation(const Jid &peer, const QList<QString> &features);
+	void requestActivated(int id);
 
 public slots:
 	/*! \brief Opens the existing dialog to the specified contact or starts a new session negotiation if necessary.*/
@@ -75,13 +77,20 @@ private:
 	/*! \brief A list of dialogs of established sessions.*/
 	QList<WbDlg*> dialogs_;
 	/*! \brief A pointer to the SxeManager used for negotiating sessions.*/
-    SxeManager* sxemanager_;
+	SxeManager* sxemanager_;
+
+	QList<WbRequest*> requests_;
+
+signals:
+	void wbRequest(const Jid &peer, int id);
 
 private slots:
 	/*! \brief Removes and deletes the dialog for the given session.*/
 	void removeDialog(WbDlg* dialog);
 	/*! \brief Returns a pointer to a new dialog to with given contact and session set.*/
 	void createWbDlg(SxeSession* session);
+
+	void  checkInvitation(const Jid &peer, const QList<QString> &features, bool* result);
 };
 
 #endif
