--- git.temp.orig/src/contactlistgroupmenu.cpp
+++ git.temp/src/contactlistgroupmenu.cpp
@@ -32,6 +32,8 @@
 #include "iconaction.h"
 #include "psicontact.h"
 #include "psiaccount.h"
+#include "statusdlg.h"
+#include "xmpp_tasks.h"
 
 class ContactListGroupMenu::Private : public QObject
 {
@@ -45,6 +47,11 @@ class ContactListGroupMenu::Private : pu
 #endif
 	QAction* sendMessageAction_;
 	QAction* removeGroupWithoutContactsAction_;
+	QMenu* authMenu_;
+	QAction* actionAuth_;
+	QAction* actionAuthRequest_;
+	QAction* actionAuthRemove_;
+	QAction* actionCustomStatus_;
 
 public:
 	Private(ContactListGroupMenu* menu, ContactListGroup* _group)
@@ -57,6 +64,18 @@ public:
 		renameAction_ = new IconAction("", tr("Re&name"), menu->shortcuts("contactlist.rename"), this, "act_rename");
 		connect(renameAction_, SIGNAL(triggered()), this, SLOT(rename()));
 
+		actionAuth_ = new QAction(tr("Resend Authorization to Group"), this);
+		connect(actionAuth_, SIGNAL(triggered()), this, SLOT(authResend()));
+
+		actionAuthRequest_ = new QAction(tr("Request Authorization from Group"), this);
+		connect(actionAuthRequest_, SIGNAL(triggered()), this, SLOT(authRequest()));
+
+		actionAuthRemove_ = new QAction(tr("Remove Authorization from Group"), this);
+		connect(actionAuthRemove_, SIGNAL(triggered()), this, SLOT(authRemove()));
+
+		actionCustomStatus_ = new IconAction(tr("Send Status to Group"), this, "psi/action_direct_presence");
+		connect(actionCustomStatus_, SIGNAL(triggered()), this, SLOT(customStatus()));
+
 		removeGroupAndContactsAction_ = new IconAction(tr("Remove Group and Contacts"), this, "psi/remove");
 #ifdef YAPSI
 		removeGroupAndContactsAction_->setText(tr("&Remove"));
@@ -84,7 +103,12 @@ public:
 #else
 		menu->addAction(renameAction_);
 		menu->addAction(sendMessageAction_);
+		menu->addAction(actionCustomStatus_);
 		menu->addSeparator();
+		authMenu_ = menu->addMenu(tr("Authorization"));
+		authMenu_->addAction(actionAuth_);
+		authMenu_->addAction(actionAuthRequest_);
+		authMenu_->addAction(actionAuthRemove_);
 		menu->addAction(removeGroupWithoutContactsAction_);
 		menu->addAction(removeGroupAndContactsAction_);
 #endif
@@ -121,6 +145,73 @@ private slots:
 		emit menu_->removeSelection();
 	}
 
+	void authResend()
+	{
+		if (!group)
+			return;
+
+		QList<PsiContact*> contacts = group->contacts();
+		if (!contacts.isEmpty()) {
+			foreach(PsiContact* contact, contacts) {
+				contact->account()->actionAuth(contact->jid());
+			}
+		}
+	}
+
+	void authRequest()
+	{
+		if (!group)
+		return;
+
+		QList<PsiContact*> contacts = group->contacts();
+		if (!contacts.isEmpty()) {
+			foreach(PsiContact* contact, contacts) {
+				contact->account()->actionAuthRequest(contact->jid());
+			}
+		}
+	}
+
+	void authRemove()
+	{
+		if (!group)
+			return;
+
+		QList<PsiContact*> contacts = group->contacts();
+		if (!contacts.isEmpty()) {
+			foreach(PsiContact* contact, contacts) {
+				contact->account()->actionAuthRemove(contact->jid());
+			}
+		}
+	}
+
+	void customStatus()
+	{
+		if (!group)
+			return;
+
+		PsiAccount *pa = group->contacts().first()->account();
+		StatusSetDlg *w = new StatusSetDlg(pa->psi(), pa->status());
+		QList<XMPP::Jid> list;
+		foreach(PsiContact* contact, group->contacts()) {
+			if(contact->isPrivate()) continue;
+			list << contact->jid();
+		}
+		w->setJidList(list);
+		connect(w, SIGNAL(setJidList(const QList<XMPP::Jid> &, const Status &)), SLOT(setStatusFromDialog(const QList<XMPP::Jid> &, const Status &)));
+		w->show();
+	}
+
+	void setStatusFromDialog(const QList<XMPP::Jid> &j, const Status &s)
+	{
+		PsiAccount *pa = group->contacts().first()->account();
+		for(QList<Jid>::const_iterator it = j.begin(); it != j.end(); ++it)
+		{
+			JT_Presence *p = new JT_Presence(pa->client()->rootTask());
+			p->pres(*it,s);
+			p->go(true);
+		}
+	}
+
 	void removeGroupWithoutContacts()
 	{
 		if (!group)
--- git.temp.orig/src/psicontactmenu.cpp
+++ git.temp/src/psicontactmenu.cpp
@@ -36,6 +36,8 @@
 #include "psicon.h"
 #include "avatars.h"
 #include "userlist.h"
+#include "statusdlg.h"
+#include "xmpp_tasks.h"
 #ifdef HAVE_PGPUTIL
 #include "pgputil.h"
 #endif
@@ -230,6 +232,7 @@ public:
 	ResourceMenu* activeChatsMenu_;
 	QAction* voiceCallAction_;
 	QAction* sendFileAction_;
+	QAction* customStatusAction_;
 	InviteToGroupChatMenu* inviteToGroupchatMenu_;
 	QMenu* mngMenu_;
 	GroupMenu* groupMenu_;
@@ -349,6 +352,9 @@ public:
 		authRemoveAction_ = new IconAction(tr("Remove Authorization From"), this, "");
 		connect(authRemoveAction_, SIGNAL(triggered()), SLOT(authRemove()));
 
+		customStatusAction_ = new IconAction(tr("Sen&d Status"), this, "psi/action_direct_presence");
+		connect(customStatusAction_, SIGNAL(triggered()), SLOT(customStatus()));
+
 		pictureAssignAction_ = new IconAction(tr("&Assign Custom Picture"), this, "");
 		connect(pictureAssignAction_, SIGNAL(triggered()), SLOT(pictureAssign()));
 		pictureAssignAction_->setShortcuts(ShortcutManager::instance()->shortcuts("contactlist.assign-custom-avatar"));
@@ -421,6 +427,7 @@ public:
 		authMenu_->addAction(authRerequestAction_);
 		authMenu_->addAction(authRemoveAction_);
 		mngMenu_->addAction(removeAction_);
+		menu_->addAction(customStatusAction_);
 		menu_->addSeparator();
 		pictureMenu_ = mngMenu_->addMenu(tr("&Picture"));
 		pictureMenu_->addAction(pictureAssignAction_);
@@ -473,6 +480,7 @@ private slots:
 
 		addAuthAction_->setVisible(!contact_->isSelf() && !contact_->inList() && !PsiOptions::instance()->getOption("options.ui.contactlist.lockdown-roster").toBool());
 		addAuthAction_->setEnabled(contact_->account()->isAvailable());
+		customStatusAction_->setEnabled(contact_->account()->isAvailable() && !contact_->isPrivate());
 		receiveIncomingEventAction_->setVisible(contact_->alerting());
 		if (!PsiOptions::instance()->getOption("options.ui.message.enabled").toBool()) {
 			sendMessageAction_->setVisible(false);
@@ -667,6 +675,24 @@ private slots:
 			contact_->account()->actionAuthRemove(contact_->jid());
 	}
 
+	void customStatus()
+	{
+		if (!contact_)
+			return;
+
+		StatusSetDlg *w = new StatusSetDlg(contact_->account()->psi(), contact_->account()->status());
+		w->setJid(contact_->jid());
+		connect(w, SIGNAL(setJid(const Jid &, const Status &)), SLOT(setStatusFromDialog(const Jid &, const Status &)));
+		w->show();
+	}
+
+	void setStatusFromDialog(const Jid &j, const Status &s)
+	{
+		JT_Presence *p = new JT_Presence(contact_->account()->client()->rootTask());
+		p->pres(j,s);
+		p->go(true);
+	}
+
 	void pictureAssign()
 	{
 		if (!contact_)
--- git.temp.orig/src/statusdlg.cpp
+++ git.temp/src/statusdlg.cpp
@@ -93,6 +93,9 @@ public:
 	QComboBox *cb_preset;
 	QLineEdit *le_priority;
 	QCheckBox *save;
+	Jid j;
+	QList<XMPP::Jid> jl;
+	setStatusEnum setStatusMode;
 };
 
 StatusSetDlg::StatusSetDlg(PsiCon *psi, const Status &s)
@@ -106,6 +109,7 @@ StatusSetDlg::StatusSetDlg(PsiCon *psi,
 	d->s = s;
 
 	setWindowTitle(CAP(tr("Set Status: All accounts")));
+	d->setStatusMode = setStatusForAccount;
 	init();
 }
 
@@ -120,9 +124,24 @@ StatusSetDlg::StatusSetDlg(PsiAccount *p
 	d->s = s;
 
 	setWindowTitle(CAP(tr("Set Status: %1").arg(d->pa->name())));
+	d->setStatusMode = setStatusForAccount;
 	init();
 }
 
+void StatusSetDlg::setJid(const Jid &j)
+{
+	d->j = j;
+	setWindowTitle(CAP(tr("Set Status for %1").arg(j.full())));
+	d->setStatusMode = setStatusForJid;
+}
+
+void StatusSetDlg::setJidList(const QList<XMPP::Jid> &jl)
+{
+	d->jl = jl;
+	setWindowTitle(CAP(tr("Set Status for group")));
+	d->setStatusMode = setStatusForJidList;
+}
+
 void StatusSetDlg::init()
 {
 	int type = makeSTATUS(d->s);
@@ -248,9 +267,31 @@ void StatusSetDlg::doButton()
 	QString str = d->te->getPlainText();
 
  	if (d->le_priority->text().isEmpty())
- 		emit set(makeStatus(type, str), false, true);
+ 		//emit set(makeStatus(type, str), false, true);
+		switch(d->setStatusMode) {
+			case setStatusForAccount:
+                                emit set(makeStatus(type,str), false, true);
+				break;
+			case setStatusForJid:
+				emit setJid(d->j, makeStatus(type,str));
+				break;
+			case setStatusForJidList:
+				emit setJidList(d->jl, makeStatus(type,str));
+				break;
+		}
  	else
- 		emit set(makeStatus(type, str, d->le_priority->text().toInt()), true, true);
+ 		//emit set(makeStatus(type, str, d->le_priority->text().toInt()), true, true);
+		switch(d->setStatusMode) {
+			case setStatusForAccount:
+                                emit set(makeStatus(type,str, d->le_priority->text().toInt()), true, true);
+				break;
+			case setStatusForJid:
+				emit setJid(d->j, makeStatus(type,str, d->le_priority->text().toInt()));
+				break;
+			case setStatusForJidList:
+				emit setJidList(d->jl, makeStatus(type,str, d->le_priority->text().toInt()));
+				break;
+		}
 
 	close();
 }
--- git.temp.orig/src/statusdlg.h
+++ git.temp/src/statusdlg.h
@@ -23,6 +23,9 @@
 
 #include <QDialog>
 
+#include <QList>
+#include "xmpp_jid.h"
+
 class PsiCon;
 class PsiAccount;
 class UserListItem;
@@ -33,6 +36,8 @@ namespace XMPP {
 
 using namespace XMPP;
 
+enum setStatusEnum{setStatusForAccount = 0, setStatusForJid, setStatusForJidList};
+
 class StatusShowDlg : public QDialog
 {
 	Q_OBJECT
@@ -48,9 +53,14 @@ public:
 	StatusSetDlg(PsiAccount *, const Status &);
 	~StatusSetDlg();
 
+	void setJid(const Jid &);
+	void setJidList(const QList<XMPP::Jid> &);
+
 signals:
 	void set(const XMPP::Status &, bool withPriority, bool isManualStatus);
 	void cancelled();
+	void setJid(const Jid &, const Status &);
+	void setJidList(const QList<XMPP::Jid> &, const Status &);
 
 private slots:
 	void doButton();
