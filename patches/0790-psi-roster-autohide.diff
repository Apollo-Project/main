--- psi.orig/options/default.xml
+++ psi/options/default.xml
@@ -592,6 +592,8 @@ QLineEdit#le_status_text {
 			<hide-on-start type="bool">false</hide-on-start>
 			<resolve-nicks-on-contact-add type="bool">true</resolve-nicks-on-contact-add>
 			<use-toolwindow type="bool">false</use-toolwindow>
+			<use-autohide type="bool">false</use-autohide>
+			<autohide-interval type="int">600</autohide-interval>
 		</contactlist>
 		<external-control>
 			<adhoc-remote-control>
--- psi.orig/src/mainwin.cpp
+++ psi/src/mainwin.cpp
@@ -135,6 +135,10 @@ public:
 	QToolButton* searchPb;
 	QWidget* searchWidget;
 
+	QTimer *hideTimer;
+	int hideTimerInterval; //interval in sec
+	bool useAutohide;
+
 	QSignalMapper* statusMapper;
 
 	PsiIcon* nextAnim;
@@ -180,10 +184,13 @@ MainWin::Private::Private(PsiCon* _psi, 
 
 	char* squishStr = getenv("SQUISH_ENABLED");
 	squishEnabled = squishStr != 0;
+
+	hideTimer = new QTimer();
 }
 
 MainWin::Private::~Private()
 {
+	delete(hideTimer);
 }
 
 void MainWin::Private::registerActions()
@@ -528,6 +535,7 @@ MainWin::MainWin(bool _onTop, bool _asTo
 	// setUnifiedTitleAndToolBarOnMac(true);
 
 	connect(qApp, SIGNAL(dockActivated()), SLOT(dockActivated()));
+	qApp->installEventFilter(this);
 
 	connect(psi, SIGNAL(emitOptionsUpdate()), SLOT(optionsUpdate()));
 	optionsUpdate();
@@ -536,6 +544,11 @@ MainWin::MainWin(bool _onTop, bool _asTo
         connect(sp_ss, SIGNAL(triggered()), SLOT(avcallConfig()));*/
 
 	optionChanged("options.ui.contactlist.css");
+
+	connect(d->hideTimer, SIGNAL(timeout()), SLOT(hideTimerTimeout()));
+	d->hideTimerInterval = PsiOptions::instance()->getOption("options.contactlist.autohide-interval").toInt();
+	d->hideTimer->setInterval(d->hideTimerInterval*1000);
+	optionChanged("options.contactlist.use-autohide");
 }
 
 MainWin::~MainWin()
@@ -585,6 +598,28 @@ void MainWin::optionChanged(const QStrin
 	else if (option == "options.ui.contactlist.show-roster-avatar-frame") {
 		d->rosterAvatar->setVisible(PsiOptions::instance()->getOption("options.ui.contactlist.show-roster-avatar-frame").toBool());
 	}
+	else if (option == "options.contactlist.use-autohide") {
+		d->useAutohide = PsiOptions::instance()->getOption("options.contactlist.use-autohide").toBool();
+		if(d->useAutohide)
+			d->hideTimer->start();
+		else
+			d->hideTimer->stop();
+	}
+	else if (option == "options.contactlist.autohide-interval") {
+		d->hideTimerInterval = PsiOptions::instance()->getOption("options.contactlist.autohide-interval").toInt();
+		d->hideTimer->setInterval(d->hideTimerInterval*1000);
+		if(d->useAutohide)
+			d->hideTimer->start();
+	}
+}
+
+void MainWin::hideTimerTimeout()
+{
+	d->hideTimer->stop();
+	if(d->tray)
+		trayHide();
+	else
+		setWindowState(Qt::WindowMinimized);
 }
 
 void MainWin::registerAction( IconAction* action )
@@ -1424,6 +1459,31 @@ void MainWin::keyPressEvent(QKeyEvent* e
 	QWidget::keyPressEvent(e);
 }
 
+void MainWin::enterEvent(QEvent *e)
+{
+	if(d->useAutohide)
+		d->hideTimer->stop();
+	QMainWindow::enterEvent(e);
+}
+
+void MainWin::leaveEvent(QEvent *e)
+{
+	if(d->useAutohide)
+		d->hideTimer->start();
+	QMainWindow::leaveEvent(e);
+}
+
+bool MainWin::eventFilter(QObject *o, QEvent *e)
+{
+	if(e->type() == QEvent::KeyPress
+	   && o->isWidgetType()
+	   && isAncestorOf( (QWidget*)o ) ) {
+		if(d->hideTimer->isActive())
+			d->hideTimer->start();
+	}
+	return false;
+}
+
 #ifdef Q_WS_WIN
 #include <windows.h>
 bool MainWin::winEvent(MSG* msg, long* result)
@@ -1543,6 +1603,8 @@ void MainWin::trayDoubleClicked()
 void MainWin::trayShow()
 {
 	bringToFront(this);
+	if(d->useAutohide)
+		d->hideTimer->start();
 }
 
 void MainWin::trayHide()
@@ -1842,6 +1904,8 @@ void MainWin::showNoFocus()
 void MainWin::showNoFocus()
 {
 	bringToFront(this);
+	if(d->useAutohide)
+		d->hideTimer->start();
 }
 
 void MainWin::avcallConfig()
--- psi.orig/src/mainwin.h
+++ psi/src/mainwin.h
@@ -72,9 +72,12 @@ public:
 
 protected:
 	// reimplemented
+	bool eventFilter(QObject* o, QEvent* e);
 	void closeEvent(QCloseEvent *);
 	void changeEvent(QEvent *event);
 	void keyPressEvent(QKeyEvent *);
+	void enterEvent(QEvent *e);
+	void leaveEvent(QEvent *e);
 	QMenuBar* mainMenuBar() const;
 #ifdef Q_WS_WIN
 	bool winEvent(MSG *, long *);
@@ -156,6 +159,8 @@ private slots:
 	void nickChanged();
 	void avatarChanged();
 
+	void hideTimerTimeout();
+
 public slots:
 	void setWindowIcon(const QPixmap&);
 	void showNoFocus();
--- psi.orig/src/options/opt_roster.cpp
+++ psi/src/options/opt_roster.cpp
@@ -66,6 +66,8 @@ void OptionsTabRoster::applyOptions()
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-menubar", d->ck_showMenubar->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.disable-scrollbar", d->ck_disableScrollbar->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-roster-avatar-frame", d->ck_roster_avatar->isChecked());
+	PsiOptions::instance()->setOption("options.contactlist.use-autohide", d->cb_autohide->isChecked());
+	PsiOptions::instance()->setOption("options.contactlist.autohide-interval", d->sb_hideInterval->value());
 
 	//enabled icons
 	PsiOptions::instance()->setOption("options.ui.contactlist.avatars.show", d->ck_showAvatarIcons->isChecked());
@@ -94,6 +96,9 @@ void OptionsTabRoster::restoreOptions()
 	d->ck_showMenubar->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-menubar").toBool() );
 	d->ck_disableScrollbar->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.disable-scrollbar").toBool() );
 	d->ck_roster_avatar->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-roster-avatar-frame").toBool() );
+	d->cb_autohide->setChecked( PsiOptions::instance()->getOption("options.contactlist.use-autohide").toBool() );
+	d->sb_hideInterval->setValue( PsiOptions::instance()->getOption("options.contactlist.autohide-interval").toInt() );
+	d->sb_hideInterval->setEnabled(d->cb_autohide->isChecked());
 
 	//enabled icons
 	d->ck_showAvatarIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.avatars.show").toBool() );
--- psi.orig/src/options/opt_roster.ui
+++ psi/src/options/opt_roster.ui
@@ -72,6 +72,47 @@
     </widget>
    </item>
    <item>
+    <layout class="QHBoxLayout" name="horizontalLayout_3">
+     <item>
+      <widget class="QCheckBox" name="cb_autohide">
+       <property name="text">
+        <string>Autohide roster after</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QSpinBox" name="sb_hideInterval">
+       <property name="minimum">
+        <number>1</number>
+       </property>
+       <property name="maximum">
+        <number>9999</number>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLabel" name="label_2">
+       <property name="text">
+        <string>seconds</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer name="horizontalSpacer">
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>0</width>
+         <height>0</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+    </layout>
+   </item>
+   <item>
     <widget class="QGroupBox" name="gb_docklet">
      <property name="title">
       <string>Icons</string>
@@ -249,5 +290,22 @@
   <tabstop>ck_showTuneIcons</tabstop>
  </tabstops>
  <resources/>
- <connections/>
+ <connections>
+  <connection>
+   <sender>cb_autohide</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>sb_hideInterval</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>92</x>
+     <y>190</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>208</x>
+     <y>191</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
 </ui>
