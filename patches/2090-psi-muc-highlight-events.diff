--- psi.orig/options/default.xml
+++ psi/options/default.xml
@@ -329,6 +329,7 @@ QLineEdit#le_status_text {
 					<height>420</height>
 				</size>
 				<use-highlighting type="bool">true</use-highlighting><use-nick-coloring type="bool">true</use-nick-coloring><use-hash-nick-coloring type="bool">true</use-hash-nick-coloring><colored-history type="bool">true</colored-history>
+				<allow-highlight-events type="bool">false</allow-highlight-events>
 			</muc>
 			<show-deprecated comment="Deprecated functionality or protocols">
 				<service-discovery comment="Service discovery dialog">
--- psi.orig/src/groupchatdlg.cpp
+++ psi/src/groupchatdlg.cpp
@@ -202,6 +202,7 @@ public:
 		dlg = d;
 		nickSeparator = ":";
 		nonAnonymous = false;
+		alert = false;
 
 		trackBar = false;
 		mCmdManager.registerProvider(this);
@@ -240,6 +241,7 @@ public:
 	int pending;
 	int hPending; // highlight pending
 	bool connecting;
+	bool alert;
 
 	QStringList hist;
 	int histAt;
@@ -1073,6 +1075,7 @@ void GCMainDlg::activated()
 			u->setPending(d->pending, d->hPending);
 			account()->updateEntry(*u);
 		}
+		messagesRead(jid());
 		invalidateTab();
 	}
 	doFlash(false);
@@ -1706,7 +1709,7 @@ void GCMainDlg::message(const Message &_
 {
 	Message m = _m;
 	QString from = m.from().resource();
-	bool alert = false;
+	d->alert = false;
 
 	if (m.getMUCStatuses().contains(100)) {
 		d->nonAnonymous = true;
@@ -1756,7 +1759,7 @@ void GCMainDlg::message(const Message &_
 
 	// code to determine if the speaker was addressing this client in chat
 	if(m.body().contains(d->self))
-		alert = true;
+		d->alert = true;
 
 	if (m.body().left(d->self.length()) == d->self)
 		d->lastReferrer = m.from().resource();
@@ -1765,7 +1768,7 @@ void GCMainDlg::message(const Message &_
 		QStringList highlightWords = options->getOption("options.ui.muc.highlight-words").toStringList();
 		foreach (QString word, highlightWords) {
 			if(m.body().contains((word), Qt::CaseInsensitive)) {
-				alert = true;
+				d->alert = true;
 			}
 		}
 	}
@@ -1776,10 +1779,10 @@ void GCMainDlg::message(const Message &_
 			account()->playSound(PsiAccount::eSend);
 	}
 	else {
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
+		if(d->alert || (PsiOptions::instance()->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
 			account()->playSound(PsiAccount::eGroupChat);
 
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
+		if(d->alert || (PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
 			if (!m.spooled() && !isActiveTab() && !m.from().resource().isEmpty()) {
 				XMPP::Jid jid = m.from()/*.withDomain("")*/;
 				MessageEvent *e = new MessageEvent(m, account());
@@ -1792,9 +1795,9 @@ void GCMainDlg::message(const Message &_
 	}
 
 	if(from.isEmpty())
-		appendSysMsg(m.body(), alert, m.timeStamp());
+		appendSysMsg(m.body(), d->alert, m.timeStamp());
 	else
-		appendMessage(m, alert);
+		appendMessage(m, d->alert);
 }
 
 void GCMainDlg::joined()
@@ -1831,6 +1834,11 @@ const QDateTime & GCMainDlg::lastMsgTime
 	return d->te_log()->lastMsgTime();
 }
 
+bool GCMainDlg::isLastMessageAlert() const
+{
+	return d->alert;
+}
+
 void GCMainDlg::appendSysMsg(const QString &str, bool alert, const QDateTime &ts)
 {
 	MessageView mv = MessageView::fromPlainText(str, MessageView::System);
--- psi.orig/src/groupchatdlg.h
+++ psi/src/groupchatdlg.h
@@ -76,6 +76,7 @@ public:
 	const QString& nick() const;
 	const QString& topic() const;
 	const QDateTime& lastMsgTime() const;
+	bool isLastMessageAlert() const;
 
 	bool isInactive() const;
 	void reactivate();
@@ -100,6 +101,7 @@ protected:
 
 signals:
 	void aSend(const Message &);
+	void messagesRead(const Jid &);
 
 public slots:
 	// reimplemented
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -2789,9 +2789,9 @@ void PsiAccount::processIncomingMessage(
 
 #ifdef GROUPCHAT
 	if(_m.type() == "groupchat") {
-		GCMainDlg *w = findDialog<GCMainDlg*>(Jid(_m.from().bare()));
-		if(w)
-			w->message(_m);
+		MessageEvent *me = new MessageEvent(_m, this);
+		me->setOriginLocal(false);
+		handleEvent(me, IncomingStanza);
 		return;
 	}
 #endif
@@ -5088,7 +5088,19 @@ void PsiAccount::handleEvent(PsiEvent* e
 				!(e->type() == PsiEvent::Message &&
 				  ((MessageEvent *)e)->message().body().isEmpty()))
 			{
-				logEvent(e->from(), e);
+#ifdef GROUPCHAT
+				bool isMuc = false;
+				if(e->type() == PsiEvent::Message) {
+					MessageEvent *me = (MessageEvent *)e;
+					if (me->message().type() == "groupchat")
+						isMuc = true;
+				}
+				if (!isMuc) {
+#endif
+					logEvent(e->from(), e);
+#ifdef GROUPCHAT
+				}
+#endif
 			}
 		}
 	}
@@ -5197,6 +5209,18 @@ void PsiAccount::handleEvent(PsiEvent* e
 			doPopup = true;
 			popupType = PopupManager::AlertHeadline;
 		} // /headline
+#ifdef GROUPCHAT
+		else if (m.type() == "groupchat") {
+			putToQueue = false;
+			GCMainDlg *c = findDialog<GCMainDlg*>(e->from());
+			if (c) {
+				c->message(m);
+				if (!c->isActiveTab() && c->isLastMessageAlert()
+					&& o->getOption("options.ui.muc.allow-highlight-events").toBool())
+					putToQueue = true;
+			}
+		} // /groupchat
+#endif
 		else if (m.type().isEmpty()) {
 			soundType = eMessage;
 			doPopup = true;
@@ -5636,11 +5660,18 @@ void PsiAccount::processReadNext(const U
 		return;
 
 	bool isChat = false;
+#ifdef GROUPCHAT
+	bool isMuc = false;
+#endif
 	if(e->type() == PsiEvent::Message) {
 		MessageEvent *me = (MessageEvent *)e;
 		const Message &m = me->message();
 		if(m.type() == "chat" && m.getForm().fields().empty())
 			isChat = true;
+#ifdef GROUPCHAT
+		else if (m.type() == "groupchat")
+			isMuc = true;
+#endif
 	}
 
 	// if it's a chat message, just open the chat window.  there is no need to do
@@ -5651,6 +5682,17 @@ void PsiAccount::processReadNext(const U
 		return;
 	}
 
+#ifdef GROUPCHAT
+	if (isMuc) {
+		GCMainDlg *c = findDialog<GCMainDlg*>(e->from());
+		if (c)
+		{
+			c->bringToFront(true);
+			return;
+		}
+	}
+#endif
+
 	// remove from queue
 	e = d->eventQueue->dequeue(u.jid());
 
@@ -5754,6 +5796,19 @@ void PsiAccount::chatMessagesRead(const
 //	}
 }
 
+#ifdef GROUPCHAT
+void PsiAccount::groupChatMessagesRead(const Jid &j)
+{
+	d->eventQueue->clear(j);
+
+	QList<UserListItem*> ul = findRelevant(j);
+	if(!ul.isEmpty()) {
+		UserListItem *u = ul.first();
+		cpUpdate(*u);
+	}
+}
+#endif
+
 void PsiAccount::logEvent(const Jid &j, PsiEvent *e)
 {
 	if (!d->acc.opt_log)
@@ -5778,6 +5833,7 @@ void PsiAccount::openGroupChat(const Jid
 	GCMainDlg *w = new GCMainDlg(this, j, d->tabManager);
 	w->setPassword(d->client->groupChatPassword(j.domain(), j.node()));
 	connect(w, SIGNAL(aSend(const Message &)), SLOT(dj_sendMessage(const Message &)));
+	connect(w, SIGNAL(messagesRead(const Jid &)), SLOT(groupChatMessagesRead(const Jid &)));
 	connect(d->psi, SIGNAL(emitOptionsUpdate()), w, SLOT(optionsUpdate()));
 	if(reason != MUCJoinDlg::MucAutoJoin || !PsiOptions::instance()->getOption("options.ui.muc.hide-on-autojoin").toBool()) {
 		w->ensureTabbedCorrectly();
--- psi.orig/src/psiaccount.h
+++ psi/src/psiaccount.h
@@ -455,6 +455,9 @@ private slots:
 	void itemRetracted(const Jid&, const QString&, const PubSubRetraction&);
 
 	void chatMessagesRead(const Jid &);
+#ifdef GROUPCHAT
+	void groupChatMessagesRead(const Jid &);
+#endif
 
 	void slotCheckVCard();
 	void edb_finished();
--- psi.orig/src/psicon.cpp
+++ psi/src/psicon.cpp
@@ -81,6 +81,9 @@
 #include "accountscombobox.h"
 #include "tabdlg.h"
 #include "chatdlg.h"
+#ifdef GROUPCHAT
+#include "groupchatdlg.h"
+#endif
 #include "spellchecker/aspellchecker.h"
 #ifdef WEBKIT
 #include "avatars.h"
@@ -1752,17 +1755,29 @@ void PsiCon::processEvent(PsiEvent *e, A
 	}
 
 	bool isChat = false;
+#ifdef GROUPCHAT
+	bool isMuc = false;
+#endif
 	bool sentToChatWindow = false;
 	if ( e->type() == PsiEvent::Message ) {
 		MessageEvent *me = (MessageEvent *)e;
 		const Message &m = me->message();
-		bool emptyForm = m.getForm().fields().empty();
-		// FIXME: Refactor this, PsiAccount and PsiEvent out
-		if ((m.type() == "chat" && emptyForm)
-			|| !EventDlg::messagingEnabled()) {
-			isChat = true;
-			sentToChatWindow = me->sentToChatWindow();
+#ifdef GROUPCHAT
+		if (m.type() == "groupchat") {
+			isMuc = true;
 		}
+		else {
+#endif
+			bool emptyForm = m.getForm().fields().empty();
+			// FIXME: Refactor this, PsiAccount and PsiEvent out
+			if ((m.type() == "chat" && emptyForm)
+					|| !EventDlg::messagingEnabled()) {
+				isChat = true;
+				sentToChatWindow = me->sentToChatWindow();
+			}
+#ifdef GROUPCHAT
+		}
+#endif
 	}
 
 	if (e->type() == PsiEvent::Auth && !EventDlg::messagingEnabled()) {
@@ -1809,6 +1824,17 @@ void PsiCon::processEvent(PsiEvent *e, A
 	}
 #endif
 	else {
+#ifdef GROUPCHAT
+		if (isMuc) {
+			PsiAccount *account = e->account();
+			GCMainDlg *c = account->findDialog<GCMainDlg*>(e->from());
+			if (c) {
+				c->ensureTabbedCorrectly();
+				c->bringToFront(true);
+				return;
+			}
+		}
+#endif
 		// search for an already opened eventdlg
 		EventDlg *w = e->account()->findDialog<EventDlg*>(u->jid());
 
--- psi.orig/src/psievent.cpp
+++ psi/src/psievent.cpp
@@ -284,6 +284,10 @@ int MessageEvent::type() const
 
 Jid MessageEvent::from() const
 {
+#ifdef GROUPCHAT
+	if (v_m.type() == "groupchat")
+		return v_m.from().bare();
+#endif
 	return v_m.from();
 }
 
