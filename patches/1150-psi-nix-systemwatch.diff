--- git.temp.orig/src/libpsi/tools/systemwatch/systemwatch_unix.cpp
+++ git.temp/src/libpsi/tools/systemwatch/systemwatch_unix.cpp
@@ -19,7 +19,42 @@
  */
 
 #include "systemwatch_unix.h"
+#ifdef USE_DBUS
+# include <QDBusConnection>
+#endif
 
 UnixSystemWatch::UnixSystemWatch()
 {
+#ifdef USE_DBUS
+	// TODO: check which service we should listen to
+	QDBusConnection conn = QDBusConnection::systemBus();
+	// listen to systemd's logind
+	// TODO: use delaying Inhibitor locks
+	conn.connect("org.freedesktop.login1", "/org/freedesktop/login1", "org.freedesktop.login1.Manager", "PrepareForSleep", this, SLOT(prepareForSleep(bool)));
+	// listen to UPower
+	conn.connect("org.freedesktop.UPower", "/org/freedesktop/UPower", "org.freedesktop.UPower", "Sleeping", this, SLOT(sleeping()));
+	conn.connect("org.freedesktop.UPower", "/org/freedesktop/UPower", "org.freedesktop.UPower", "Resuming", this, SLOT(resuming()));
+#endif
+}
+
+void UnixSystemWatch::prepareForSleep(bool beforeSleep)
+{
+	if (beforeSleep)
+	{
+		emit sleep();
+	}
+	else
+	{
+		emit wakeup();
+	}
+}
+
+void UnixSystemWatch::sleeping()
+{
+	emit sleep();
+}
+
+void UnixSystemWatch::resuming()
+{
+	emit wakeup();
 }
--- git.temp.orig/src/libpsi/tools/systemwatch/systemwatch_unix.h
+++ git.temp/src/libpsi/tools/systemwatch/systemwatch_unix.h
@@ -25,8 +25,14 @@
 
 class UnixSystemWatch : public SystemWatch
 {
+	Q_OBJECT
 public:
 	UnixSystemWatch();
+
+private slots:
+	void prepareForSleep(bool beforeSleep);
+	void sleeping();
+	void resuming();
 };
 
 
