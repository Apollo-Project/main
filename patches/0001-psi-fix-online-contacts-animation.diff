--- psi.orig/src/contactlistmodel.cpp
+++ psi/src/contactlistmodel.cpp
@@ -62,6 +62,7 @@ ContactListModel::ContactListModel(PsiCo
 	connect(updater_, SIGNAL(addedContact(PsiContact*)), SLOT(addContact(PsiContact*)));
 	connect(updater_, SIGNAL(removedContact(PsiContact*)), SLOT(removeContact(PsiContact*)));
 	connect(updater_, SIGNAL(contactAlert(PsiContact*)), SLOT(contactAlert(PsiContact*)));
+	connect(updater_, SIGNAL(contactAnim(PsiContact*)), SLOT(contactAnim(PsiContact*)));
 	connect(updater_, SIGNAL(contactUpdated(PsiContact*)), SLOT(contactUpdated(PsiContact*)));
 	connect(updater_, SIGNAL(contactGroupsChanged(PsiContact*)), SLOT(contactGroupsChanged(PsiContact*)));
 	connect(updater_, SIGNAL(beginBulkContactUpdate()), SLOT(beginBulkUpdate()));
@@ -305,6 +306,10 @@ void ContactListModel::contactAlert(PsiC
 	}
 }
 
+void ContactListModel::contactAnim(PsiContact* /*contact*/)
+{
+}
+
 void ContactListModel::contactUpdated(PsiContact* contact)
 {
 	Q_ASSERT(rootGroup_);
@@ -503,6 +508,12 @@ QVariant ContactListModel::contactData(c
 	else if (role == AlertPictureRole) {
 		return QVariant(contact->alertPicture());
 	}
+	else if (role == IsAnimRole) {
+		return QVariant(contact->isAnimated());
+	}
+	else if (role == PhaseRole) {
+		return QVariant(false);
+	}
 #ifdef YAPSI
 	else if (role == Qt::ForegroundRole) {
 		return QVariant(Ya::statusColor(contact->status().type()));
--- psi.orig/src/contactlistmodel.h
+++ psi/src/contactlistmodel.h
@@ -76,6 +76,8 @@ public:
 		AskingForAuthRole = Qt::UserRole + 9,
 		IsAlertingRole = Qt::UserRole + 10,
 		AlertPictureRole = Qt::UserRole + 11,
+		IsAnimRole = Qt::UserRole + 21,
+		PhaseRole = Qt::UserRole + 22,
 
 		// groups
 		ExpandedRole = Qt::UserRole + 12,
@@ -188,6 +190,7 @@ protected slots:
 	void removeContact(PsiContact*);
 
 	void contactAlert(PsiContact*);
+	virtual void contactAnim(PsiContact*);
 	void contactUpdated(PsiContact*);
 	void contactGroupsChanged(PsiContact*);
 
--- psi.orig/src/contactlistmodelupdater.cpp
+++ psi/src/contactlistmodelupdater.cpp
@@ -88,6 +88,8 @@ void ContactListModelUpdater::commit()
 			emit contactUpdated(it.key());
 		if (operations & ContactGroupsChanged)
 			emit contactGroupsChanged(it.key());
+		if (operations & AnimateContact)
+			emit contactAnim(it.key());
 	}
 
 	if (doBulkUpdate)
@@ -109,6 +111,7 @@ void ContactListModelUpdater::addContact
 	connect(contact, SIGNAL(updated()), SLOT(contactUpdated()));
 	connect(contact, SIGNAL(groupsChanged()), SLOT(contactGroupsChanged()));
 	connect(contact, SIGNAL(alert()), SLOT(contactAlert()));
+	connect(contact, SIGNAL(anim()), SLOT(contactAnim()));
 }
 
 /*!
@@ -133,6 +136,14 @@ void ContactListModelUpdater::contactAle
 	emit contactAlert(contact);
 }
 
+void ContactListModelUpdater::contactAnim()
+{
+	PsiContact* contact = static_cast<PsiContact*>(sender());
+	if (!monitoredContacts_.contains(contact))
+		return;
+	addOperation(contact, AnimateContact);
+}
+
 void ContactListModelUpdater::contactUpdated()
 {
 	PsiContact* contact = static_cast<PsiContact*>(sender());
--- psi.orig/src/contactlistmodelupdater.h
+++ psi/src/contactlistmodelupdater.h
@@ -48,6 +48,7 @@ signals:
 	void addedContact(PsiContact*);
 	void removedContact(PsiContact*);
 	void contactAlert(PsiContact*);
+	void contactAnim(PsiContact*);
 	void contactUpdated(PsiContact*);
 	void contactGroupsChanged(PsiContact*);
 
@@ -61,6 +62,7 @@ private slots:
 	void removeContact(PsiContact*);
 
 	void contactAlert();
+	void contactAnim();
 	void contactUpdated();
 	void contactGroupsChanged();
 
@@ -78,7 +80,8 @@ private:
 		AddContact           = 1 << 0,
 		RemoveContact        = 1 << 1,
 		UpdateContact        = 1 << 2,
-		ContactGroupsChanged = 1 << 3
+		ContactGroupsChanged = 1 << 3,
+		AnimateContact	     = 1 << 4
 	};
 	QHash<PsiContact*, int> operationQueue_;
 
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -635,8 +635,9 @@ public:
 
 	void animateNick(const Jid& jid)
 	{
-		// TODO
-		Q_UNUSED(jid);
+		PsiContact* contact = findContact(jid);
+		if (contact)
+			contact->startAnim();
 	}
 
 public slots:
--- psi.orig/src/psicontact.cpp
+++ psi/src/psicontact.cpp
@@ -64,6 +64,7 @@ public:
 		: account_(0)
 		, statusTimer_(0)
 		, isValid_(true)
+		, isAnimated_(false)
 		, contact_(contact)
 #ifdef YAPSI
 		, gender_(XMPP::VCard::UnknownGender)
@@ -85,6 +86,11 @@ public:
 		statusTimer_->setInterval(statusTimerInterval);
 		statusTimer_->setSingleShot(true);
 		connect(statusTimer_, SIGNAL(timeout()), SLOT(updateStatus()));
+
+		animTimer_ = new QTimer(this);
+		animTimer_->setInterval(5000);
+		animTimer_->setSingleShot(true);
+		connect(animTimer_, SIGNAL(timeout()), contact, SLOT(stopAnim()));
 	}
 
 	~Private()
@@ -93,11 +99,13 @@ public:
 
 	PsiAccount* account_;
 	QTimer* statusTimer_;
+	QTimer* animTimer_;
 	UserListItem u_;
 	QString name_;
 	Status status_;
 	Status oldStatus_;
 	bool isValid_;
+	bool isAnimated_;
 #ifdef YAPSI
 	bool showOnlineTemporarily_;
 	bool reconnecting_;
@@ -507,6 +515,25 @@ void PsiContact::setAlert(const PsiIcon*
 	emit alert();
 }
 
+void PsiContact::startAnim()
+{
+	d->isAnimated_ = true;
+	d->animTimer_->start();
+
+	anim();
+}
+
+void PsiContact::stopAnim()
+{
+	d->isAnimated_ = false;
+	emit anim();
+}
+
+bool PsiContact::isAnimated() const
+{
+	return d->isAnimated_;
+}
+
 /**
  * Contact should always be visible if it's alerting.
  */
--- psi.orig/src/psicontact.h
+++ psi/src/psicontact.h
@@ -63,6 +63,8 @@ public:
 	virtual bool isHidden() const;
 	virtual bool isValid() const;
 
+	virtual bool isAnimated() const;
+
 	void activate();
 
 	virtual void setEditing(bool editing);
@@ -115,6 +117,7 @@ public:
 	virtual void setGroups(QStringList);
 	bool alerting() const;
 	void setAlert(const PsiIcon* icon);
+	void startAnim();
 	bool find(const Jid& jid) const;
 	// PsiContactList* contactList() const;
 
@@ -158,6 +161,8 @@ public slots:
 	void moodUpdate();
 #endif
 
+	void stopAnim();
+
 private slots:
 	void avatarChanged(const Jid&);
 	void vcardChanged(const Jid&);
@@ -167,6 +172,7 @@ private slots:
 
 signals:
 	void alert();
+	void anim();
 	void updated();
 	void groupsChanged();
 #ifdef YAPSI
--- psi.orig/src/psicontactlistmodel.cpp
+++ psi/src/psicontactlistmodel.cpp
@@ -18,6 +18,8 @@
  *
  */
 
+#include <QTimer>
+
 #include "psicontactlistmodel.h"
 
 #include "psicontact.h"
@@ -28,7 +30,11 @@
 
 PsiContactListModel::PsiContactListModel(PsiContactList* contactList)
 	: ContactListDragModel(contactList)
+	, secondPhase_(false)
 {
+	animTimer_ = new QTimer(this);
+	animTimer_->setInterval(300);
+	connect(animTimer_, SIGNAL(timeout()), SLOT(updateAnim()));
 }
 
 QVariant PsiContactListModel::data(const QModelIndex &index, int role) const
@@ -46,6 +52,9 @@ QVariant PsiContactListModel::contactDat
 	if (role == Qt::ToolTipRole) {
 		return QVariant(contact->userListItem().makeTip(true, false));
 	}
+	else if (role == ContactListModel::PhaseRole) {
+		return QVariant(secondPhase_);
+	}
 
 	return ContactListDragModel::contactData(contact, role);
 }
@@ -71,3 +80,34 @@ QVariant PsiContactListModel::accountDat
 
 	return ContactListDragModel::accountData(account, role);
 }
+
+void PsiContactListModel::contactAnim(PsiContact* contact)
+{
+	QModelIndexList indexes = ContactListModel::indexesFor(contact);
+	if(!indexes.isEmpty()) {
+		foreach(const QModelIndex& i, indexes) {
+			bool anim = data(i, ContactListModel::IsAnimRole).toBool();
+			if (anim) {
+				animIndexes_.insert(i, true);
+			}
+			else {
+				animIndexes_.remove(i);
+			}
+		}
+	}
+
+	if (animIndexes_.isEmpty()) {
+		animTimer_->stop();
+	}
+	else if(!animTimer_->isActive()) {
+		animTimer_->start();
+	}
+}
+
+void PsiContactListModel::updateAnim()
+{
+	secondPhase_ = !secondPhase_;
+	foreach(const QModelIndex& index, animIndexes_.keys()) {
+		dataChanged(index, index);
+	}
+}
--- psi.orig/src/psicontactlistmodel.h
+++ psi/src/psicontactlistmodel.h
@@ -24,6 +24,7 @@
 #include "contactlistdragmodel.h"
 
 class PsiContactList;
+class QTimer;
 
 class PsiContactListModel : public ContactListDragModel
 {
@@ -37,6 +38,17 @@ public:
 	virtual QVariant contactData(const PsiContact* contact, int role) const;
 	virtual QVariant contactGroupData(const ContactListGroup* group, int role) const;
 	virtual QVariant accountData(const ContactListAccountGroup* account, int role) const;
+
+protected slots:
+	virtual void contactAnim(PsiContact*);
+
+private slots:
+	void updateAnim();
+
+private:
+	QTimer* animTimer_;
+	QHash<QModelIndex, bool> animIndexes_;
+	bool secondPhase_;
 };
 
 #endif
--- psi.orig/src/psicontactlistviewdelegate.cpp
+++ psi/src/psicontactlistviewdelegate.cpp
@@ -117,20 +117,25 @@ void PsiContactListViewDelegate::drawCon
 
 	r.setLeft(avatarRect.right() + 3);
 
-	QColor textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.online");
-	if (statusType(index) == XMPP::Status::Away || statusType(index) == XMPP::Status::XA)
-		textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.away");
-	else if (statusType(index) == XMPP::Status::DND)
-		textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.do-not-disturb");
-	else if (statusType(index) == XMPP::Status::Offline)
-		textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.offline");
-
-#if 0
-	if (d->animatingNick) {
-		textColor = d->animateNickColor ? ColorOpt::instance()->color("options.ui.look.colors.contactlist.status-change-animation1") : ColorOpt::instance()->color("options.ui.look.colors.contactlist.status-change-animation2");
-		xcg.setColor(QColorGroup::HighlightedText, d->animateNickColor ? ColorOpt::instance()->color("options.ui.look.colors.contactlist.status-change-animation1") : ColorOpt::instance()->color("options.ui.look.colors.contactlist.status-change-animation2"));
+	QColor textColor;
+	if(index.data(ContactListModel::IsAnimRole).toBool()) {
+		if(index.data(ContactListModel::PhaseRole).toBool()) {
+			textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status-change-animation2");
+		}
+		else {
+			textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status-change-animation1");
+		}
+	}
+	else {
+		if (statusType(index) == XMPP::Status::Away || statusType(index) == XMPP::Status::XA)
+			textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.away");
+		else if (statusType(index) == XMPP::Status::DND)
+			textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.do-not-disturb");
+		else if (statusType(index) == XMPP::Status::Offline)
+			textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.offline");
+		else
+			textColor = ColorOpt::instance()->color("options.ui.look.colors.contactlist.status.online");
 	}
-#endif
 
 	QStyleOptionViewItemV2 o = option;
 	o.font = *font_;
