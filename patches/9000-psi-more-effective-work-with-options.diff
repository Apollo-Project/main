--- psi.orig/src/chatdlg.cpp
+++ psi/src/chatdlg.cpp
@@ -270,14 +270,15 @@ bool ChatDlg::readyToHide()
 	keepOpen_ = false; // tabdlg calls readyToHide twice on tabdlg close, only display message once.
 
 	// destroy the dialog if delChats is dcClose
-	if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "instant") {
+	QString del = PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString();
+	if (del == "instant") {
 		setAttribute(Qt::WA_DeleteOnClose);
 	}
 	else {
-		if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "hour") {
+		if (del == "hour") {
 			setSelfDestruct(60);
 		}
-		else if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "day") {
+		else if (del == "day") {
 			setSelfDestruct(60 * 24);
 		}
 	}
@@ -574,15 +575,16 @@ void ChatDlg::optionsUpdate()
 	setShortcuts();
 
 	if (!isTabbed() && isHidden()) {
-		if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "instant") {
+		QString del = PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString();
+		if (del == "instant") {
 			deleteLater();
 			return;
 		}
 		else {
-			if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "hour") {
+			if (del == "hour") {
 				setSelfDestruct(60);
 			}
-			else if (PsiOptions::instance()->getOption("options.ui.chat.delete-contents-after").toString() == "day") {
+			else if (del == "day") {
 				setSelfDestruct(60 * 24);
 			}
 			else {
--- psi.orig/src/gcuserview.cpp
+++ psi/src/gcuserview.cpp
@@ -60,25 +60,26 @@ public:
 
 	void updateSettings()
 	{
+		PsiOptions *o = PsiOptions::instance();
 		colorForeground_ = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-foreground");
 		colorBackground_ = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-background");
-		colorModerator_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-moderator").value<QColor>();
-		colorParticipant_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-participant").value<QColor>();
-		colorVisitor_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-visitor").value<QColor>();
-		colorNoRole_ = PsiOptions::instance()->getOption("options.ui.look.colors.muc.role-norole").value<QColor>();
-		showGroups_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-groups").toBool();
-		slimGroups_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.use-slim-group-headings").toBool();
-		nickColoring_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.nick-coloring").toBool();
-		showClients_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-client-icons").toBool();
-		showAffiliations_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-affiliation-icons").toBool();
-		showStatusIcons_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.show-status-icons").toBool();
-		showAvatar_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.show").toBool();
-		avatarSize_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.size").toInt();
-		avatarAtLeft_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.avatars-at-left").toBool();
-		avatarRadius_ = PsiOptions::instance()->getOption("options.ui.muc.userlist.avatars.radius").toInt();
+		colorModerator_ = o->getOption("options.ui.look.colors.muc.role-moderator").value<QColor>();
+		colorParticipant_ = o->getOption("options.ui.look.colors.muc.role-participant").value<QColor>();
+		colorVisitor_ = o->getOption("options.ui.look.colors.muc.role-visitor").value<QColor>();
+		colorNoRole_ = o->getOption("options.ui.look.colors.muc.role-norole").value<QColor>();
+		showGroups_ = o->getOption("options.ui.muc.userlist.show-groups").toBool();
+		slimGroups_ = o->getOption("options.ui.muc.userlist.use-slim-group-headings").toBool();
+		nickColoring_ = o->getOption("options.ui.muc.userlist.nick-coloring").toBool();
+		showClients_ = o->getOption("options.ui.muc.userlist.show-client-icons").toBool();
+		showAffiliations_ = o->getOption("options.ui.muc.userlist.show-affiliation-icons").toBool();
+		showStatusIcons_ = o->getOption("options.ui.muc.userlist.show-status-icons").toBool();
+		showAvatar_ = o->getOption("options.ui.muc.userlist.avatars.show").toBool();
+		avatarSize_ = o->getOption("options.ui.muc.userlist.avatars.size").toInt();
+		avatarAtLeft_ = o->getOption("options.ui.muc.userlist.avatars.avatars-at-left").toBool();
+		avatarRadius_ = o->getOption("options.ui.muc.userlist.avatars.radius").toInt();
 
 		QFont font;
-		font.fromString(PsiOptions::instance()->getOption("options.ui.look.font.contactlist").toString());
+		font.fromString(o->getOption("options.ui.look.font.contactlist").toString());
 		fontHeight_ = QFontMetrics(font).height()+2;
 	}
 
--- psi.orig/src/groupchatdlg.cpp
+++ psi/src/groupchatdlg.cpp
@@ -654,8 +654,6 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	connect(account(), SIGNAL(updatedActivity()), SLOT(pa_updatedActivity()));
 	d->mucManager = new MUCManager(account()->client(), jid());
 
-	options_ = PsiOptions::instance();
-
 	d->pending = 0;
 	d->hPending = 0;
 	d->connecting = false;
@@ -1461,6 +1459,7 @@ void GCMainDlg::presence(const QString &
 		d->act_configure->setEnabled(s.mucItem().affiliation() >= MUCItem::Member);
 	}
 	
+	PsiOptions *options_ = PsiOptions::instance();
 
 	if(s.isAvailable()) {
 		// Available
@@ -1536,7 +1535,7 @@ void GCMainDlg::presence(const QString &
 				}
 			}
 			if ( !d->connecting && options_->getOption("options.muc.show-status-changes").toBool() ) {
-				bool statusWithPriority = PsiOptions::instance()->getOption("options.ui.muc.status-with-priority").toBool();
+				bool statusWithPriority = options_->getOption("options.ui.muc.status-with-priority").toBool();
 				if (s.status() != contact->s.status() || s.show() != contact->s.show() ||
 						(statusWithPriority && s.priority() != contact->s.priority())) {
 					ui_.log->dispatchMessage(MessageView::statusMessage(
@@ -1678,12 +1677,13 @@ void GCMainDlg::message(const Message &_
 		d->nonAnonymous = false;
 	}
 
+	PsiOptions *options = PsiOptions::instance();
 	if(!m.subject().isNull()) {
 		QString subject = m.subject();
 		d->topic = subject;
 		QString subjectTooltip = TextUtil::plain2rich(subject);
 		subjectTooltip = TextUtil::linkify(subjectTooltip);
-		if(PsiOptions::instance()->getOption("options.ui.emoticons.use-emoticons").toBool()) {
+		if(options->getOption("options.ui.emoticons.use-emoticons").toBool()) {
 			subjectTooltip = TextUtil::emoticonify(subjectTooltip);
 		}
 		ui_.le_topic->setText(subject.replace("\n\n", " || ").replace("\n", " | ").replace("\t", " ").replace(QRegExp("\\s{2,}"), " "));
@@ -1717,8 +1717,8 @@ void GCMainDlg::message(const Message &_
 	if (m.body().left(d->self.length()) == d->self)
 		d->lastReferrer = m.from().resource();
 
-	if(PsiOptions::instance()->getOption("options.ui.muc.use-highlighting").toBool()) {
-		QStringList highlightWords = PsiOptions::instance()->getOption("options.ui.muc.highlight-words").toStringList();
+	if(options->getOption("options.ui.muc.use-highlighting").toBool()) {
+		QStringList highlightWords = options->getOption("options.ui.muc.highlight-words").toStringList();
 		foreach (QString word, highlightWords) {
 			if(m.body().contains((word), Qt::CaseInsensitive)) {
 				alert = true;
@@ -1732,10 +1732,10 @@ void GCMainDlg::message(const Message &_
 			account()->playSound(PsiAccount::eSend);
 	}
 	else {
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
+		if(alert || (options->getOption("options.ui.notifications.sounds.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) )
 			account()->playSound(PsiAccount::eGroupChat);
 
-		if(alert || (PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
+		if(alert || (options->getOption("options.ui.notifications.passive-popups.notify-every-muc-message").toBool() && !m.spooled() && !from.isEmpty()) ) {
 			if (!m.spooled() && !isActiveTab() && !m.from().resource().isEmpty()) {
 				XMPP::Jid jid = m.from()/*.withDomain("")*/;
 				MessageEvent *e = new MessageEvent(m, account());
@@ -1809,9 +1809,8 @@ void GCMainDlg::appendSysMsg(const Messa
 void GCMainDlg::appendMessage(const Message &m, bool alert)
 {
 	MessageView mv(MessageView::Message);
-	if (m.containsHTML() && PsiOptions::instance()
-							->getOption("options.html.muc.render").toBool() &&
-							!m.html().text().isEmpty()) {
+	if (m.containsHTML() && PsiOptions::instance()->getOption("options.html.muc.render").toBool() &&
+					!m.html().text().isEmpty()) {
 		mv.setHtml(m.html().toString("span"));
 	} else {
 		mv.setPlainText(m.body());
--- psi.orig/src/groupchatdlg.h
+++ psi/src/groupchatdlg.h
@@ -171,7 +171,6 @@ private:
 
 	void contextMenuEvent(QContextMenuEvent *);
 
-	PsiOptions* options_;
 	QDateTime lastMsgTime_;
 
 	void setMargins();
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -395,7 +395,6 @@ public:
 		, selfContact(0)
 		, psi(0)
 		, account(parent)
-		, options(0)
 		, client(0)
 		, eventQueue(0)
 		, xmlConsole(0)
@@ -448,7 +447,6 @@ public:
 	PsiSelfContact* selfContact;
 	PsiCon *psi;
 	PsiAccount *account;
-	PsiOptions *options;
 	Client *client;
 	UserAccount acc;
 	Jid jid, nextJid;
@@ -1089,7 +1087,6 @@ PsiAccount::PsiAccount(const UserAccount
 	d->contactList = parent;
 	d->tabManager = tabManager;
 	d->psi = parent->psi();
-	d->options = PsiOptions::instance();
 	d->client = 0;
 	d->userCounter = 0;
 	d->avatarFactory = 0;
@@ -1347,7 +1344,7 @@ PsiAccount::PsiAccount(const UserAccount
 	}
 
 	// Extended presence
-	if (d->options->getOption("options.extended-presence.notify").toBool()) {
+	if (PsiOptions::instance()->getOption("options.extended-presence.notify").toBool()) {
 		QStringList pepNodes;
 		pepNodes += "http://jabber.org/protocol/mood+notify";
 		pepNodes += "http://jabber.org/protocol/activity+notify";
@@ -1807,7 +1804,7 @@ void PsiAccount::forceDisconnect(bool fa
 
 	if(loggedIn()) {
 		// Extended Presence
-		if (d->options->getOption("options.extended-presence.tune.publish").toBool() && !d->lastTune.isNull())
+		if (PsiOptions::instance()->getOption("options.extended-presence.tune.publish").toBool() && !d->lastTune.isNull())
 			publishTune(Tune());
 
 		d->client->removeExtension("ep");
@@ -2375,7 +2372,7 @@ void PsiAccount::setPEPAvailable(bool b)
 	}
 
 	// Publish current tune information
-	if (b && d->psi->tuneManager() && d->options->getOption("options.extended-presence.tune.publish").toBool()) {
+	if (b && d->psi->tuneManager() && PsiOptions::instance()->getOption("options.extended-presence.tune.publish").toBool()) {
 		Tune current = d->psi->tuneManager()->currentTune();
 		if (!current.isNull())
 			publishTune(current);
@@ -2808,11 +2805,12 @@ void PsiAccount::processIncomingMessage(
 		m.setType("chat");
 	}
 	else if (m.type() != "headline" && m.invite().isEmpty() && m.mucInvites().isEmpty()) {
-		if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "message")
+		const QString type = PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString();
+		if (type == "message")
 			m.setType("");
-		else if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "chat")
+		else if (type == "chat")
 			m.setType("chat");
-		else if (PsiOptions::instance()->getOption("options.messages.force-incoming-message-type").toString() == "current-open") {
+		else if (type == "current-open") {
 			c = NULL;
 			foreach (ChatDlg *cl, findChatDialogs(m.from(), false)) {
 				if (cl->autoSelectContact() || cl->jid().resource().isEmpty() || m.from().resource() == cl->jid().resource()) {
@@ -3141,7 +3139,7 @@ void PsiAccount::tuneStopped()
 
 void PsiAccount::tunePlaying(const Tune& tune)
 {
-	if (loggedIn() && d->options->getOption("options.extended-presence.tune.publish").toBool()) {
+	if (loggedIn() && PsiOptions::instance()->getOption("options.extended-presence.tune.publish").toBool()) {
 		publishTune(tune);
 	}
 }
@@ -4946,6 +4944,7 @@ void PsiAccount::createNewPluginEvent(co
 // handle an incoming event
 void PsiAccount::handleEvent(PsiEvent* e, ActivationType activationType)
 {
+	PsiOptions *o = PsiOptions::instance();
 	if (e && activationType != FromXml) {
 		setEnabled();
 	}
@@ -5045,7 +5044,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 
 		// Pass message events to chat window
 		if ((m.containsEvents() || m.chatState() != StateNone) && m.body().isEmpty()) {
-			if (PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool()) {
+			if (o->getOption("options.messages.send-composing-events").toBool()) {
 				ChatDlg *c = findChatDialogEx(e->from());
 				if (c) {
 					c->setJid(e->from());
@@ -5063,7 +5062,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 			}
 		}
 		else if (m.messageReceipt() == ReceiptReceived) {
-			if (PsiOptions::instance()->getOption("options.ui.notifications.request-receipts").toBool()) {
+			if (o->getOption("options.ui.notifications.request-receipts").toBool()) {
 				foreach (ChatDlg *c, findChatDialogs(e->from(), false)) {
 					if (c->autoSelectContact()  || c->jid().resource().isEmpty() || e->from().resource() == c->jid().resource()) {
 						if (c->autoSelectContact())
@@ -5094,7 +5093,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 #endif
 				c->incomingMessage(m);
 				soundType = eChat2;
-				if((PsiOptions::instance()->getOption("options.ui.chat.alert-for-already-open-chats").toBool() && !c->isActiveTab())
+				if((o->getOption("options.ui.chat.alert-for-already-open-chats").toBool() && !c->isActiveTab())
 					|| (c->isTabbed() && c->getManagingTabDlg()->isHidden()) ) {
 					// to alert the chat also, we put it in the queue
 					me->setSentToChatWindow(true);
@@ -5102,7 +5101,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 				else {
 					putToQueue = false;
 #ifdef YAPSI
-					if (!d->noPopup(activationType) && PsiOptions::instance()->getOption("options.ui.chat.auto-popup").toBool()) {
+					if (!d->noPopup(activationType) && o->getOption("options.ui.chat.auto-popup").toBool()) {
 						openChat(e->from(), activationType);
 					}
 #endif
@@ -5183,7 +5182,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 			}
 			else if (userListItem && userListItem->inList()) {
 #else
-			if(PsiOptions::instance()->getOption("options.subscriptions.automatically-allow-authorization").toBool()) {
+			if(o->getOption("options.subscriptions.automatically-allow-authorization").toBool()) {
 #endif
 				// Check if we want to request auth as well
 				UserListItem *u = d->userList.find(ae->from());
@@ -5197,7 +5196,7 @@ void PsiAccount::handleEvent(PsiEvent* e
 			}
 		}
 		else if(ae->authType() == "subscribed") {
-			if(!PsiOptions::instance()->getOption("options.ui.notifications.successful-subscription").toBool())
+			if(!o->getOption("options.ui.notifications.successful-subscription").toBool())
 				putToQueue = false;
 		}
 		else if(ae->authType() == "unsubscribe") {
@@ -5230,12 +5229,12 @@ void PsiAccount::handleEvent(PsiEvent* e
 			r = *(u->priority());
 		}
 
-		if ((popupType == PopupManager::AlertChat      && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-chat").toBool())     ||
-		    (popupType == PopupManager::AlertMessage   && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-message").toBool())  ||
-		    (popupType == PopupManager::AlertHeadline  && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-headline").toBool()) ||
-		    (popupType == PopupManager::AlertFile      && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-file-transfer").toBool()) ||
-		    (popupType == PopupManager::AlertAvCall    && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.incoming-message").toBool()) ||
-		    (popupType == PopupManager::AlertComposing && PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.composing").toBool()))
+		if ((popupType == PopupManager::AlertChat      && o->getOption("options.ui.notifications.passive-popups.incoming-chat").toBool())     ||
+		    (popupType == PopupManager::AlertMessage   && o->getOption("options.ui.notifications.passive-popups.incoming-message").toBool())  ||
+		    (popupType == PopupManager::AlertHeadline  && o->getOption("options.ui.notifications.passive-popups.incoming-headline").toBool()) ||
+		    (popupType == PopupManager::AlertFile      && o->getOption("options.ui.notifications.passive-popups.incoming-file-transfer").toBool()) ||
+		    (popupType == PopupManager::AlertAvCall    && o->getOption("options.ui.notifications.passive-popups.incoming-message").toBool()) ||
+		    (popupType == PopupManager::AlertComposing && o->getOption("options.ui.notifications.passive-popups.composing").toBool()))
 		{
 #ifdef PSI_PLUGINS
 			if(e->type() != PsiEvent::Plugin) {
@@ -5712,7 +5711,7 @@ bool PsiAccount::groupChatJoin(const QSt
 	else {
 		Status s = d->loginStatus;
 		s.setXSigned("");
-		return d->client->groupChatJoin(host, room, nick, pass, d->options->getOption("options.muc.context.maxchars").toInt(),d->options->getOption("options.muc.context.maxstanzas").toInt(),d->options->getOption("options.muc.context.seconds").toInt(),s);
+		return d->client->groupChatJoin(host, room, nick, pass, PsiOptions::instance()->getOption("options.muc.context.maxchars").toInt(),PsiOptions::instance()->getOption("options.muc.context.maxstanzas").toInt(),PsiOptions::instance()->getOption("options.muc.context.seconds").toInt(),s);
 	}
 }
 
@@ -6238,11 +6237,12 @@ void PsiAccount::processEncryptedMessage
 
 void PsiAccount::optionsUpdate()
 {
+	PsiOptions *o = PsiOptions::instance();
 	profileUpdateEntry(d->self);
 
 	// Tune
 #ifdef USE_PEP // Tune cleaning not working. It's implemented in psicon.cpp in PsiCon::optionChanged
-	bool publish = d->options->getOption("options.extended-presence.tune.publish").toBool();
+	bool publish = o->getOption("options.extended-presence.tune.publish").toBool();
 	if (!d->lastTune.isNull() && !publish) {
 		publishTune(Tune());
 	}
@@ -6254,19 +6254,19 @@ void PsiAccount::optionsUpdate()
 #endif
 
 	// Chat states
-	setSendChatState(PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool());
+	setSendChatState(o->getOption("options.messages.send-composing-events").toBool());
 
 	//Receipts
-	setReceipts(PsiOptions::instance()->getOption("options.ui.notifications.send-receipts").toBool()); //FIXME second presence?
+	setReceipts(o->getOption("options.ui.notifications.send-receipts").toBool()); //FIXME second presence?
 
 	// Remote Controlling
-	setRCEnabled(PsiOptions::instance()->getOption("options.external-control.adhoc-remote-control.enable").toBool());
+	setRCEnabled(o->getOption("options.external-control.adhoc-remote-control.enable").toBool());
 
 	// Roster item exchange
-	d->rosterItemExchangeTask->setIgnoreNonRoster(PsiOptions::instance()->getOption("options.messages.ignore-non-roster-contacts").toBool());
+	d->rosterItemExchangeTask->setIgnoreNonRoster(o->getOption("options.messages.ignore-non-roster-contacts").toBool());
 
 	// Caps manager
-	d->capsManager->setEnabled(PsiOptions::instance()->getOption("options.service-discovery.enable-entity-capabilities").toBool());
+	d->capsManager->setEnabled(o->getOption("options.service-discovery.enable-entity-capabilities").toBool());
 }
 
 
--- psi.orig/src/psicon.cpp
+++ psi/src/psicon.cpp
@@ -502,13 +502,13 @@ bool PsiCon::init()
 #elif defined(USE_QDCHECKER)
 	d->autoUpdater = new QDChecker();
 #endif
-	if (PsiOptions::instance()->getOption("options.auto-update.check-on-startup").toBool() && d->autoUpdater)
+	if (options->getOption("options.auto-update.check-on-startup").toBool() && d->autoUpdater)
 		d->autoUpdater->checkForUpdates();
 
 	d->iconSelect = new IconSelectPopup(0);
 	connect(PsiIconset::instance(), SIGNAL(emoticonsChanged()), d, SLOT(updateIconSelect()));
 
-	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	const QString css = options->getOption("options.ui.chat.css").toString();
 	if (!css.isEmpty())
 		d->iconSelect->setStyleSheet(css);
 
@@ -543,8 +543,8 @@ bool PsiCon::init()
 	Anim::setMainThread(QThread::currentThread());
 
 	// setup the main window
-	d->mainwin = new MainWin(PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool(), (PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() && PsiOptions::instance()->getOption("options.contactlist.use-toolwindow").toBool()), this);
-	d->mainwin->setUseDock(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool());
+	d->mainwin = new MainWin(options->getOption("options.ui.contactlist.always-on-top").toBool(), (options->getOption("options.ui.systemtray.enable").toBool() && options->getOption("options.contactlist.use-toolwindow").toBool()), this);
+	d->mainwin->setUseDock(options->getOption("options.ui.systemtray.enable").toBool());
 	d->bossKey = new BossKey(d->mainwin);
 
 	Q_UNUSED(psiConObject);
@@ -570,8 +570,8 @@ bool PsiCon::init()
 	d->mainwin->setGeometryOptionPath("options.ui.contactlist.saved-window-geometry");
 
 	if (result &&
-	    !(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() &&
-	      PsiOptions::instance()->getOption("options.contactlist.hide-on-start").toBool()))
+	    !(options->getOption("options.ui.systemtray.enable").toBool() &&
+	      options->getOption("options.contactlist.hide-on-start").toBool()))
 	{
 		d->mainwin->show();
 	}
@@ -671,15 +671,17 @@ bool PsiCon::init()
 		}
 		
 		// Disable accounts if necessary, and overwrite locked properties
-		if (PsiOptions::instance()->getOption("options.ui.account.single").toBool() || !PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty()) {
+		bool single = options->getOption("options.ui.account.single").toBool();
+		QString domain = options->getOption("options.account.domain").toString();
+		if (single || !domain.isEmpty()) {
 			bool haveEnabled = false;
 			for(UserAccountList::Iterator it = accs.begin(); it != accs.end(); ++it) {
 				// With single accounts, only modify the first account
-				if (PsiOptions::instance()->getOption("options.ui.account.single").toBool()) {
+				if (single) {
 					if (!haveEnabled) {
 						haveEnabled = it->opt_enabled;
 						if (it->opt_enabled) {
-							if (!PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty())
+							if (!domain.isEmpty())
 								it->jid = JIDUtil::accountFromString(Jid(it->jid).node()).bare();
 						}
 					}
@@ -688,7 +690,7 @@ bool PsiCon::init()
 				}
 				else {
 					// Overwirte locked properties
-					if (!PsiOptions::instance()->getOption("options.account.domain").toString().isEmpty())
+					if (!domain.isEmpty())
 						it->jid = JIDUtil::accountFromString(Jid(it->jid).node()).bare();
 				}
 			}
@@ -706,7 +708,7 @@ bool PsiCon::init()
 		emit statusMessageChanged(d->contactList->defaultAccount()->status().status());
 
 	// show tip of the day
-	if ( PsiOptions::instance()->getOption("options.ui.tip.show").toBool() ) {
+	if ( options->getOption("options.ui.tip.show").toBool() ) {
 		TipDlg::show(this);
 	}
 
@@ -724,11 +726,11 @@ bool PsiCon::init()
 
 	if(AvCallManager::isSupported()) {
 		options_avcall_update();
-		AvCallManager::setAudioOutDevice(PsiOptions::instance()->getOption("options.media.devices.audio-output").toString());
-		AvCallManager::setAudioInDevice(PsiOptions::instance()->getOption("options.media.devices.audio-input").toString());
-		AvCallManager::setVideoInDevice(PsiOptions::instance()->getOption("options.media.devices.video-input").toString());
-		AvCallManager::setBasePort(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt());
-		AvCallManager::setExternalAddress(PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString());
+		AvCallManager::setAudioOutDevice(options->getOption("options.media.devices.audio-output").toString());
+		AvCallManager::setAudioInDevice(options->getOption("options.media.devices.audio-input").toString());
+		AvCallManager::setVideoInDevice(options->getOption("options.media.devices.video-input").toString());
+		AvCallManager::setBasePort(options->getOption("options.p2p.bytestreams.listen-port").toInt());
+		AvCallManager::setExternalAddress(options->getOption("options.p2p.bytestreams.external-address").toString());
 	}
 
 
@@ -1463,10 +1465,10 @@ void PsiCon::optionChanged(const QString
 void PsiCon::slotApplyOptions()
 {
 	PsiIconset::instance()->reloadRoster();
+	PsiOptions *o = PsiOptions::instance();
 
 #ifndef Q_WS_MAC
-	PsiOptions *o = PsiOptions::instance();
-	if (!PsiOptions::instance()->getOption("options.ui.contactlist.show-menubar").toBool()) {
+	if (!o->getOption("options.ui.contactlist.show-menubar").toBool()) {
 		// check if all toolbars are disabled
 		bool toolbarsVisible = false;
 		foreach(QString base, o->getChildOptionNames("options.ui.contactlist.toolbars", true, true)) {
@@ -1481,7 +1483,7 @@ void PsiCon::slotApplyOptions()
 			QMessageBox::warning(0, tr("Warning"),
 				tr("You can not disable <i>all</i> toolbars <i>and</i> the menubar. If you do so, you will be unable to enable them back, when you'll change your mind."),
 				tr("I understand"));
-			PsiOptions::instance()->setOption("options.ui.contactlist.show-menubar", true);
+			o->setOption("options.ui.contactlist.show-menubar", true);
 		}
 	}
 #endif
@@ -1489,16 +1491,16 @@ void PsiCon::slotApplyOptions()
 	updateS5BServerAddresses();
 
 	if(AvCallManager::isSupported()) {
-		AvCallManager::setAudioOutDevice(PsiOptions::instance()->getOption("options.media.devices.audio-output").toString());
-		AvCallManager::setAudioInDevice(PsiOptions::instance()->getOption("options.media.devices.audio-input").toString());
-		AvCallManager::setVideoInDevice(PsiOptions::instance()->getOption("options.media.devices.video-input").toString());
-		AvCallManager::setBasePort(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt());
-		AvCallManager::setExternalAddress(PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString());
+		AvCallManager::setAudioOutDevice(o->getOption("options.media.devices.audio-output").toString());
+		AvCallManager::setAudioInDevice(o->getOption("options.media.devices.audio-input").toString());
+		AvCallManager::setVideoInDevice(o->getOption("options.media.devices.video-input").toString());
+		AvCallManager::setBasePort(o->getOption("options.p2p.bytestreams.listen-port").toInt());
+		AvCallManager::setExternalAddress(o->getOption("options.p2p.bytestreams.external-address").toString());
 	}
 
 	// mainwin stuff
-	d->mainwin->setWindowOpts(PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool(), (PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() && PsiOptions::instance()->getOption("options.contactlist.use-toolwindow").toBool()));
-	d->mainwin->setUseDock(PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool());
+	d->mainwin->setWindowOpts(o->getOption("options.ui.contactlist.always-on-top").toBool(), (o->getOption("options.ui.systemtray.enable").toBool() && o->getOption("options.contactlist.use-toolwindow").toBool()));
+	d->mainwin->setUseDock(o->getOption("options.ui.systemtray.enable").toBool());
 	d->mainwin->buildToolbars();
 
 	// notify about options change
@@ -1530,9 +1532,10 @@ void PsiCon::queueChanged()
 void PsiCon::startBounce()
 {
 #ifdef Q_WS_MAC
-	if (PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString() != "never") {
+	QString bounce = PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString();
+	if (bounce != "never") {
 		MacDock::startBounce();
-		if (PsiOptions::instance()->getOption("options.ui.notifications.bounce-dock").toString() == "once") {
+		if (bounce == "once") {
 			MacDock::stopBounce();
 		}
 	}
@@ -1590,7 +1593,8 @@ void PsiCon::recentGCAdd(const QString &
 	recentList.prepend(str);
 
 	// trim the list if bigger than 10
-	while(recentList.count() > PsiOptions::instance()->getOption("options.muc.recent-joins.maximum").toInt()) {
+	int max = PsiOptions::instance()->getOption("options.muc.recent-joins.maximum").toInt();
+	while(recentList.count() > max) {
 		recentList.takeLast();
 	}
 	
@@ -1828,17 +1832,18 @@ void PsiCon::updateS5BServerAddresses()
 		slist += (*hit).toString();
 
 	// add external
-	if(!PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString().isEmpty()) {
+	QString extAddr = PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString();
+	if(!extAddr.isEmpty()) {
 		bool found = false;
 		for(QStringList::ConstIterator sit = slist.begin(); sit != slist.end(); ++sit) {
 			const QString &s = *sit;
-			if(s == PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString()) {
+			if(s == extAddr) {
 				found = true;
 				break;
 			}
 		}
 		if(!found)
-			slist += PsiOptions::instance()->getOption("options.p2p.bytestreams.external-address").toString();
+			slist += extAddr;
 	}
 
 	// set up the server
@@ -1850,9 +1855,10 @@ void PsiCon::s5b_init()
 	if(d->s5bServer->isActive())
 		d->s5bServer->stop();
 
-	if (PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt()) {
-		if(!d->s5bServer->start(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt())) {
-			QMessageBox::warning(0, tr("Warning"), tr("Unable to bind to port %1 for Data Transfer.\nThis may mean you are already running another instance of Psi. You may experience problems sending and/or receiving files.").arg(PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt()));
+	int port = PsiOptions::instance()->getOption("options.p2p.bytestreams.listen-port").toInt();
+	if (port) {
+		if(!d->s5bServer->start(port)) {
+			QMessageBox::warning(0, tr("Warning"), tr("Unable to bind to port %1 for Data Transfer.\nThis may mean you are already running another instance of Psi. You may experience problems sending and/or receiving files.").arg(port));
 		}
 	}
 }
--- psi.orig/src/psicontactlistviewdelegate.cpp
+++ psi/src/psicontactlistviewdelegate.cpp
@@ -47,6 +47,10 @@ static const QString showStatusIconsPath
 static const QString statusIconsOverAvatarsPath = "options.ui.contactlist.status-icon-over-avatar";
 static const QString statusSingleOptionPath = "options.ui.contactlist.status-messages.single-line";
 static const QString statusIconsetOptionPath = "options.iconsets.status";
+static const QString allClientsOptionPath = "options.ui.contactlist.show-all-client-icons";
+static const QString slimGroupsOptionPath = "options.ui.look.contactlist.use-slim-group-headings";
+static const QString enableGroupsOptionPath = "options.ui.contactlist.enable-groups";
+static const QString outlinedGroupsOptionPath = "options.ui.look.contactlist.use-outlined-group-headings";
 
 PsiContactListViewDelegate::PsiContactListViewDelegate(ContactListView* parent)
 	: ContactListViewDelegate(parent)
@@ -77,6 +81,10 @@ PsiContactListViewDelegate::PsiContactLi
 	optionChanged(showStatusIconsPath);
 	optionChanged(statusIconsOverAvatarsPath);
 	optionChanged(statusSingleOptionPath);
+	optionChanged(allClientsOptionPath);
+	optionChanged(slimGroupsOptionPath);
+	optionChanged(enableGroupsOptionPath);
+	optionChanged(outlinedGroupsOptionPath);
 }
 
 PsiContactListViewDelegate::~PsiContactListViewDelegate()
@@ -191,7 +199,7 @@ void PsiContactListViewDelegate::drawCon
 		int size = avatarSize_;
 		avatarRect.setSize(QSize(size,size));
 		if(avatarAtLeft_) {
-			avatarRect.translate(PsiOptions::instance()->getOption("options.ui.contactlist.enable-groups").toBool() ? -5:-1, 1);
+			avatarRect.translate(enableGroups_ ? -5:-1, 1);
 			r.setLeft(avatarRect.right() + 3);
 		}
 		else {
@@ -298,14 +306,14 @@ void PsiContactListViewDelegate::drawCon
 	QList<int> rightWidths;
 	if(!isMuc) {
 	if (showClientIcons_) {
-		bool showAllClients = PsiOptions::instance()->getOption("options.ui.contactlist.show-all-client-icons").toBool();
 		const QList<QPixmap> pixList = this->clientPixmap(index);
 
 		for (QList<QPixmap>::ConstIterator it = pixList.begin(); it != pixList.end(); ++it) {
 			const QPixmap &pix = *it;
 			rightPixs.push_back(pix);
 			rightWidths.push_back(pix.width());
-			if(!showAllClients) break;
+			if(!allClients_)
+				break;
 		}
 	}
 
@@ -385,10 +393,9 @@ void PsiContactListViewDelegate::drawGro
 	o.font = *font_;
 	o.fontMetrics = *fontMetrics_;
 	QPalette palette = o.palette;
-	bool b = PsiOptions::instance()->getOption("options.ui.look.contactlist.use-slim-group-headings").toBool();
 	QColor background = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-background");
 	QColor foreground = ColorOpt::instance()->color("options.ui.look.colors.contactlist.grouping.header-foreground");
-	if (!b)
+	if (!slimGroup_)
 		palette.setColor(QPalette::Base, background);
 	palette.setColor(QPalette::Text, foreground);
 	o.palette = palette;
@@ -396,7 +403,7 @@ void PsiContactListViewDelegate::drawGro
 	drawBackground(painter, o, index);
 
 	QRect r = option.rect;
-	if (!b && PsiOptions::instance()->getOption("options.ui.look.contactlist.use-outlined-group-headings").toBool()) {
+	if (!slimGroup_ && outlinedGroup_) {
 		painter->setPen(QPen(foreground));
 		QRect gr(r);
 		gr.setLeft(contactList()->x());
@@ -417,7 +424,7 @@ void PsiContactListViewDelegate::drawGro
 	QString text = index.data(Qt::ToolTipRole).toString();
 	drawText(painter, o, r, text, index);
 
-	if(b && !(option.state & QStyle::State_Selected)) {
+	if(slimGroup_ && !(option.state & QStyle::State_Selected)) {
 		int h = r.y() + (r.height() / 2);
 		int x = r.left() + fontMetrics_->width(text) + 1;
 		painter->setPen(QPen(background,2));
@@ -439,7 +446,7 @@ void PsiContactListViewDelegate::drawAcc
 	drawBackground(painter, o, index);
 
 	QRect r = option.rect;
-	if (PsiOptions::instance()->getOption("options.ui.look.contactlist.use-outlined-group-headings").toBool()) {
+	if (outlinedGroup_) {
 		painter->setPen(QPen(foreground));
 		painter->drawRect(r);
 	}
@@ -565,6 +572,22 @@ void PsiContactListViewDelegate::optionC
 		statusSingle_ = !PsiOptions::instance()->getOption(statusSingleOptionPath).toBool();
 		contactList()->viewport()->update();
 	}
+	else if(option == allClientsOptionPath) {
+		allClients_= PsiOptions::instance()->getOption(allClientsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == slimGroupsOptionPath) {
+		slimGroup_ = PsiOptions::instance()->getOption(slimGroupsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == enableGroupsOptionPath) {
+		enableGroups_ = PsiOptions::instance()->getOption(enableGroupsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
+	else if(option == outlinedGroupsOptionPath) {
+		outlinedGroup_ = PsiOptions::instance()->getOption(outlinedGroupsOptionPath).toBool();
+		contactList()->viewport()->update();
+	}
 }
 
 void PsiContactListViewDelegate::rosterIconsSizeChanged(int size)
--- psi.orig/src/psicontactlistviewdelegate.h
+++ psi/src/psicontactlistviewdelegate.h
@@ -70,6 +70,7 @@ private:
 	bool statusSingle_;
 	mutable QHash<QModelIndex, bool> alertingIndexes_;
 	int statusIconSize_;
+	bool enableGroups_, slimGroup_, outlinedGroup_, allClients_;
 };
 
 #endif
