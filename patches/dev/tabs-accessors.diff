diff --git a/src/groupchatdlg.cpp b/src/groupchatdlg.cpp
index 4c221ac..5a6876c 100644
--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -891,6 +891,8 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	connect(ui_.log->textWidget(), SIGNAL(quote(const QString &)), ui_.mle->chatEdit(), SLOT(insertAsQuote(const QString &)));
 
 	connect(pa->avatarFactory(), SIGNAL(avatarChanged(Jid)), SLOT(avatarUpdated(Jid)));
+
+	PluginManager::instance()->setupGCTab(this, account(), jid().full());
 }
 
 void GCMainDlg::vcard(const QString& _str)
diff --git a/src/pluginhost.cpp b/src/pluginhost.cpp
index fcb8cec..2cf6974 100644
--- a/src/pluginhost.cpp
+++ b/src/pluginhost.cpp
@@ -51,6 +51,8 @@
 #include "contactinfoaccessor.h"
 #include "soundaccessor.h"
 #include "textutil.h"
+#include "chattabaccessor.h"
+#include "gctabaccessor.h"
 
 /**
  * \brief Constructs a host/wrapper for a plugin.
@@ -1216,6 +1218,22 @@ void PluginHost::addContactMenu(QMenu *menu, int account, const QString& jid)
 	}
 }
 
+void PluginHost::setupChatTab(QWidget* tab, int account, const QString& contact)
+{
+	ChatTabAccessor *cta = qobject_cast<ChatTabAccessor*>(plugin_);
+	if(cta) {
+		cta->setupTab(tab, account, contact);
+	}
+}
+
+void PluginHost::setupGCTab(QWidget* tab, int account, const QString& contact)
+{
+	GCTabAccessor *gcta = qobject_cast<GCTabAccessor*>(plugin_);
+	if(gcta) {
+		gcta->setupGCTab(tab, account, contact);
+	}
+}
+
 bool PluginHost::isSelf(int account, const QString& jid)
 {
 	return manager_->isSelf(account, jid);
diff --git a/src/pluginhost.h b/src/pluginhost.h
index 3f234b2..0452282 100644
--- a/src/pluginhost.h
+++ b/src/pluginhost.h
@@ -179,6 +179,12 @@ public:
 	void addAccountMenu(QMenu *menu, int account);
 	void addContactMenu(QMenu *menu, int account, const QString& jid);
 
+	//ChatTabAccessor
+	void setupChatTab(QWidget* tab, int account, const QString& contact);
+
+	// GCTabAccessor
+	void setupGCTab(QWidget* tab, int account, const QString& contact);
+
 	void applyOptions();
 	void restoreOptions();
 
diff --git a/src/pluginmanager.cpp b/src/pluginmanager.cpp
index 135494e..f9afe24 100644
--- a/src/pluginmanager.cpp
+++ b/src/pluginmanager.cpp
@@ -764,6 +764,22 @@ void PluginManager::addContactMenu(QMenu* menu, PsiAccount *account, QString jid
 	}
 }
 
+void PluginManager::setupChatTab(QWidget *tab, PsiAccount *account, const QString& contact)
+{
+	int i = accountIds_.value(account);
+	foreach (PluginHost* host, pluginsByPriority_) {
+		host->setupChatTab(tab, i, contact);
+	}
+}
+
+void PluginManager::setupGCTab(QWidget *tab, PsiAccount *account, const QString& contact)
+{
+	int i = accountIds_.value(account);
+	foreach (PluginHost* host, pluginsByPriority_) {
+		host->setupGCTab(tab, i, contact);
+	}
+}
+
 bool PluginManager::hasInfoProvider(const QString& plugin) const
 {
 	if (hosts_.contains(plugin))
diff --git a/src/pluginmanager.h b/src/pluginmanager.h
index 1c22a2e..da0ce1e 100644
--- a/src/pluginmanager.h
+++ b/src/pluginmanager.h
@@ -70,6 +70,9 @@ public:
 	void addAccountMenu(QMenu *menu, PsiAccount* account);
 	void addContactMenu(QMenu *menu, PsiAccount* account, QString jid);
 
+	void setupChatTab(QWidget *tab, PsiAccount* account, const QString& contact);
+	void setupGCTab(QWidget *tab, PsiAccount* account, const QString& contact);
+
 	QString pluginInfo(const QString& plugin) const;
 	bool hasInfoProvider(const QString& plugin) const;
 	QIcon icon(const QString& plugin) const;
diff --git a/src/plugins/include/chattabaccessor.h b/src/plugins/include/chattabaccessor.h
new file mode 100644
index 0000000..18be8ca
--- /dev/null
+++ b/src/plugins/include/chattabaccessor.h
@@ -0,0 +1,17 @@
+#ifndef CHATTABACCESSOR_H
+#define CHATTABACCESSOR_H
+
+class QWidget;
+class QString;
+
+class ChatTabAccessor
+{
+public:
+	virtual ~ChatTabAccessor() {}
+
+	virtual void setupTab(QWidget* tab, int account, const QString& contact) = 0;
+};
+
+Q_DECLARE_INTERFACE(ChatTabAccessor, "org.psi-im.ChatTabAccessor/0.1");
+
+#endif // CHATTABACCESSOR_H
diff --git a/src/plugins/include/gctabaccessor.h b/src/plugins/include/gctabaccessor.h
new file mode 100644
index 0000000..be2935f
--- /dev/null
+++ b/src/plugins/include/gctabaccessor.h
@@ -0,0 +1,17 @@
+#ifndef GCTABACCESSOR_H
+#define GCTABACCESSOR_H
+
+class QWidget;
+class QString;
+
+class GCTabAccessor
+{
+public:
+	virtual ~GCTabAccessor() {}
+
+	virtual void setupGCTab(QWidget* tab, int account, const QString& contact) = 0;
+};
+
+Q_DECLARE_INTERFACE(GCTabAccessor, "org.psi-im.GCTabAccessor/0.1");
+
+#endif // GCTABACCESSOR_H
diff --git a/src/psichatdlg.cpp b/src/psichatdlg.cpp
index f787ebe..e5cd664 100644
--- a/src/psichatdlg.cpp
+++ b/src/psichatdlg.cpp
@@ -299,6 +299,8 @@ void PsiChatDlg::initUi()
 	setMargins();
 
 	connect(ui_.log->textWidget(), SIGNAL(quote(const QString &)), ui_.mle->chatEdit(), SLOT(insertAsQuote(const QString &)));
+
+	PluginManager::instance()->setupChatTab(this, account(), jid().full());
 }
 
 void PsiChatDlg::verticalSplitterMoved(int, int)
