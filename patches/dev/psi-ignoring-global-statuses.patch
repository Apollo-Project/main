--- psi.orig/src/accountmodifydlg.cpp
+++ psi/src/accountmodifydlg.cpp
@@ -135,6 +135,7 @@ void AccountModifyDlg::init()
 	cb_priority->addItem(tr("Depends on status"));
 	cb_priority->setCurrentIndex(acc.priority_dep_on_status ? 1 : 0);
 	sb_priority->setValue(acc.priority);
+	ck_ignore_global->setChecked(acc.ignore_global_actions);
 
 	connect(ck_custom_auth,SIGNAL(toggled(bool)), lb_authid, SLOT(setEnabled(bool)));
 	connect(ck_custom_auth,SIGNAL(toggled(bool)), le_authid, SLOT(setEnabled(bool)));
@@ -271,6 +272,9 @@ void AccountModifyDlg::init()
 		"with a low priority, and you can still use the same account "
 		"from home, using a client with higher priority to "
 		"temporary \"disable\" the lower priority client at work.</p>"));
+	ck_ignore_global->setWhatsThis(
+		tr("<p>Ignoring any the global actions for this account.</p>"
+		"<p>For example, autostatus, mood, activity etc.</p>"));
 
 	// Hiding of UI components
 	if ((!pa && acc.name.isEmpty()) || PsiOptions::instance()->getOption("options.ui.account.single").toBool()) {
@@ -533,6 +537,7 @@ void AccountModifyDlg::save()
 	acc.resource = le_resource->text();
 	acc.priority_dep_on_status = (cb_priority->currentIndex() == 1);
 	acc.priority = sb_priority->value();
+	acc.ignore_global_actions = ck_ignore_global->isChecked();
 	acc.customAuth = ck_custom_auth->isChecked();
 	acc.authid = le_authid->text();
 	acc.realm = le_realm->text();
--- psi.orig/src/accountmodify.ui
+++ psi/src/accountmodify.ui
@@ -170,6 +170,13 @@
             </property>
            </widget>
           </item>
+          <item>
+           <widget class="QCheckBox" name="ck_ignore_global">
+            <property name="text">
+             <string>Ignoring the global statuses</string>
+            </property>
+           </widget>
+          </item>
          </layout>
         </widget>
        </item>
@@ -1108,6 +1115,7 @@
   <tabstop>ck_connectAfterSleep</tabstop>
   <tabstop>ck_reconn</tabstop>
   <tabstop>ck_log</tabstop>
+  <tabstop>ck_ignore_global</tabstop>
   <tabstop>pb_vcard</tabstop>
   <tabstop>pb_key</tabstop>
   <tabstop>pb_keyclear</tabstop>
--- psi.orig/src/mainwin.cpp
+++ psi/src/mainwin.cpp
@@ -1203,7 +1203,7 @@ void MainWin::actSetMoodActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->userAccount().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1221,7 +1221,7 @@ void MainWin::actSetActivityActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->userAccount().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
@@ -1239,7 +1239,7 @@ void MainWin::actSetGeolocActivated()
 {
 	QList<PsiAccount*> l;
 	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
-		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP() && !pa->userAccount().ignore_global_actions)
 			l.append(pa);
 	}
 	if(l.isEmpty())
--- psi.orig/src/profiles.h
+++ psi/src/profiles.h
@@ -61,7 +61,7 @@ public:
 	XMPP::ClientStream::AllowPlainType allow_plain;
 	bool req_mutual_auth;
 	bool legacy_ssl_probe;
-	bool opt_automatic_resource, priority_dep_on_status;
+	bool opt_automatic_resource, priority_dep_on_status, ignore_global_actions;
 	int security_level;
 	enum SSLFlag { SSL_No = 0, SSL_Yes = 1, SSL_Auto = 2, SSL_Legacy = 3 } ssl;
 
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -3167,6 +3167,9 @@ void PsiAccount::publishTune(const Tune&
 
 void PsiAccount::secondsIdle(int seconds)
 {
+	if (userAccount().ignore_global_actions)
+		return;
+
 	d->lastIdle = seconds;
 	int minutes = seconds / 60;
 
--- psi.orig/src/psicon.cpp
+++ psi/src/psicon.cpp
@@ -1151,7 +1151,7 @@ void PsiCon::setGlobalStatus(const Statu
 
 	// globally set each account which is logged in
 	foreach(PsiAccount* account, d->contactList->enabledAccounts())
-		if (allOffline || account->isActive())
+		if ((allOffline || account->isActive()) && (!account->userAccount().ignore_global_actions || s.type() == Status::Offline))
 			account->setStatus(s, withPriority, isManualStatus);
 
 	emit statusMessageChanged(s.status());
--- psi.orig/src/psi_profiles.cpp
+++ psi/src/psi_profiles.cpp
@@ -134,6 +134,7 @@ void UserAccount::reset()
 	ibbOnly = false;
 	opt_automatic_resource = false;
 	priority_dep_on_status = true;
+	ignore_global_actions = false;
 	resource = "Psi+";
 	priority = 55;
 	opt_keepAlive = true;
@@ -184,6 +185,7 @@ void UserAccount::fromOptions(OptionsTre
 	legacy_ssl_probe = o->getOption(base + ".legacy-ssl-probe").toBool();
 	opt_automatic_resource = o->getOption(base + ".automatic-resource").toBool();
 	priority_dep_on_status = o->getOption(base + ".priority-depends-on-status").toBool();
+	ignore_global_actions = o->getOption(base + ".ignore-global-actions").toBool();
 	opt_log = o->getOption(base + ".log").toBool();
 	opt_reconn = o->getOption(base + ".reconn").toBool();
 	opt_ignoreSSLWarnings = o->getOption(base + ".ignore-SSL-warnings").toBool();
@@ -346,6 +348,7 @@ void UserAccount::toOptions(OptionsTree
 	o->setOption(base + ".legacy-ssl-probe", legacy_ssl_probe);
 	o->setOption(base + ".automatic-resource", opt_automatic_resource);
 	o->setOption(base + ".priority-depends-on-status", priority_dep_on_status);
+	o->setOption(base + ".ignore-global-actions", ignore_global_actions);
 	o->setOption(base + ".log", opt_log);
 	o->setOption(base + ".reconn", opt_reconn);
 	o->setOption(base + ".connect-after-sleep", opt_connectAfterSleep);
@@ -494,7 +497,8 @@ void UserAccount::fromXml(const QDomElem
 	//readBoolAttribute(a, "gpg", &opt_gpg);
 	readBoolAttribute(a, "automatic-resource", &opt_automatic_resource);
 	readBoolAttribute(a, "priority-depends-on-status", &priority_dep_on_status);
-	
+	readBoolAttribute(a, "ignore-global-actions", &ignore_global_actions);
+
 	// Will be overwritten if there is a new option
 	bool opt_plain = false;
 	readBoolAttribute(a, "plain", &opt_plain);
