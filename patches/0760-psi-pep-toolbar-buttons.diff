--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -491,6 +491,9 @@ QLineEdit#le_status_text {
 				<help_online_forum type="QKeySequence" comment="Psi Forum (Online)"></help_online_forum>
 				<separator type="QKeySequence"/>
 				<spacer type="QKeySequence"/>
+				<set_mood type="QKeySequence"/>
+				<set_activity type="QKeySequence"/>
+				<set_geoloc type="QKeySequence"/>
 				<help_online_help type="QKeySequence" comment="Open Help"></help_online_help>
 				<help_online_wiki type="QKeySequence" comment="Open Wiki"></help_online_wiki>
 				<help_online_home type="QKeySequence" comment="Open Home Page"></help_online_home>
--- git.orig/src/activitydlg.cpp
+++ git/src/activitydlg.cpp
@@ -27,9 +27,11 @@
 #include "pepmanager.h"
 #include "psiiconset.h"
 
-ActivityDlg::ActivityDlg(PsiAccount* pa) : QDialog(0), pa_(pa)
+ActivityDlg::ActivityDlg(QList<PsiAccount*> list) : QDialog(0), pa_(list)
 {
 	setAttribute(Qt::WA_DeleteOnClose);
+	if(pa_.isEmpty())
+		close();
 	ui_.setupUi(this);
 	setModal(false);
 	connect(ui_.cb_general_type, SIGNAL(currentIndexChanged(const QString&)), SLOT(loadSpecificActivities(const QString&)));
@@ -37,6 +39,7 @@ ActivityDlg::ActivityDlg(PsiAccount* pa)
 	connect(ui_.pb_ok, SIGNAL(clicked()), SLOT(setActivity()));
 
 	ui_.cb_general_type->addItem(tr("<unset>"));
+	PsiAccount* pa = pa_.first();
 	Activity::Type at = pa->activity().type();
 	int i=1;
 	foreach(ActivityCatalog::Entry e, ActivityCatalog::instance()->entries()) {
@@ -62,7 +65,8 @@ void ActivityDlg::loadSpecificActivities
 	}
 	else {
 		ui_.cb_specific_type->addItem(tr("<unset>"));
-		Activity::SpecificType at = pa_->activity().specificType();
+		PsiAccount* pa = pa_.first();
+		Activity::SpecificType at = pa->activity().specificType();
 		int i=1;
 		ActivityCatalog* ac = ActivityCatalog::instance();
 		foreach(ActivityCatalog::Entry e, ac->entries()) {
@@ -88,18 +92,20 @@ void ActivityDlg::setActivity()
 	QString generalActivityStr  = ui_.cb_general_type->currentText();
 	QString specificActivityStr = ui_.cb_specific_type->currentText();
 
-	if (generalActivityStr == tr("<unset>")) {
-		pa_->pepManager()->retract("http://jabber.org/protocol/activity", "current");
-	}
-	else {
-		ActivityCatalog* ac = ActivityCatalog::instance();
-		Activity::Type generalType = ac->findEntryByText(generalActivityStr).type();
-
-		Activity::SpecificType specificType = Activity::UnknownSpecific;
-		if (specificActivityStr != tr("<unset>")) {
-			specificType = ac->findEntryByText(specificActivityStr).specificType();
+	foreach(PsiAccount *pa, pa_) {
+		if (generalActivityStr == tr("<unset>")) {
+			pa->pepManager()->retract("http://jabber.org/protocol/activity", "current");
+		}
+		else {
+			ActivityCatalog* ac = ActivityCatalog::instance();
+			Activity::Type generalType = ac->findEntryByText(generalActivityStr).type();
+
+			Activity::SpecificType specificType = Activity::UnknownSpecific;
+			if (specificActivityStr != tr("<unset>")) {
+				specificType = ac->findEntryByText(specificActivityStr).specificType();
+			}
+			pa->pepManager()->publish("http://jabber.org/protocol/activity", PubSubItem("current",Activity(generalType,specificType,ui_.le_description->text()).toXml(*pa->client()->rootTask()->doc())), PEPManager::PresenceAccess);
 		}
-		pa_->pepManager()->publish("http://jabber.org/protocol/activity", PubSubItem("current",Activity(generalType,specificType,ui_.le_description->text()).toXml(*pa_->client()->rootTask()->doc())), PEPManager::PresenceAccess);
 	}
 	close();
 }
--- git.orig/src/activitydlg.h
+++ git/src/activitydlg.h
@@ -32,7 +32,7 @@ class ActivityDlg : public QDialog
 	Q_OBJECT
 
 public:
-	ActivityDlg(PsiAccount*);
+	ActivityDlg(QList<PsiAccount*>);
 
 protected slots:
 	void setActivity();
@@ -40,7 +40,7 @@ protected slots:
 
 private:
 	Ui::Activity ui_;
-	PsiAccount* pa_;
+	QList<PsiAccount*> pa_;
 };
 
 #endif
--- git.orig/src/geolocationdlg.cpp
+++ git/src/geolocationdlg.cpp
@@ -28,16 +28,19 @@
 #include "geolocation.h"
 #include <QLineEdit>
 
-GeoLocationDlg::GeoLocationDlg(PsiAccount* pa) : QDialog(0), pa_(pa)
+GeoLocationDlg::GeoLocationDlg(QList<PsiAccount*> list) : QDialog(0), pa_(list)
 {
 	setAttribute(Qt::WA_DeleteOnClose);
+	if(pa_.isEmpty())
+		close();
 	ui_.setupUi(this);
 	setModal(false);
 	connect(ui_.pb_cancel, SIGNAL(clicked()), SLOT(close()));
  	connect(ui_.pb_ok, SIGNAL(clicked()), SLOT(setGeoLocation()));
 	connect(ui_.pb_reset, SIGNAL(clicked()), SLOT(reset()));
 
-	GeoLocation geoloc = pa_->geolocation();
+	PsiAccount *pa = pa_.first();
+	GeoLocation geoloc = pa->geolocation();
 	if(geoloc.isNull())
 		return;
 
@@ -155,11 +158,13 @@ void GeoLocationDlg::setGeoLocation()
 	if(!ui_.le_text->text().isEmpty())
 		geoloc.setText(ui_.le_text->text());
 
-	if (geoloc.isNull()) {
- 		pa_->pepManager()->retract("http://jabber.org/protocol/geoloc", "current");
-	}
-	else {                
-		pa_->pepManager()->publish("http://jabber.org/protocol/geoloc", PubSubItem("current",geoloc.toXml(*pa_->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+	foreach(PsiAccount *pa, pa_) {
+		if (geoloc.isNull()) {
+			pa->pepManager()->retract("http://jabber.org/protocol/geoloc", "current");
+		}
+		else {
+			pa->pepManager()->publish("http://jabber.org/protocol/geoloc", PubSubItem("current",geoloc.toXml(*pa->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+		}
 	}
 	close();
 }
--- git.orig/src/geolocationdlg.h
+++ git/src/geolocationdlg.h
@@ -31,7 +31,7 @@ class GeoLocationDlg : public QDialog
 	Q_OBJECT
 
 public:
-	GeoLocationDlg(PsiAccount*);
+	GeoLocationDlg(QList<PsiAccount*>);
 
 protected slots:
 	void setGeoLocation();
@@ -39,7 +39,7 @@ protected slots:
 
 private:
 	Ui::GeoLocation ui_;
- 	PsiAccount* pa_;
+	QList<PsiAccount*> pa_;
 };
 
 #endif // GEOLOCATIONDLG_H
--- git.orig/src/mainwin.cpp
+++ git/src/mainwin.cpp
@@ -70,6 +70,9 @@
 #ifdef NEWCONTACTLIST
 #include "psirosterwidget.h"
 #endif
+#include "mooddlg.h"
+#include "activitydlg.h"
+#include "geolocationdlg.h"
 
 #include "mainwin_p.h"
 
@@ -148,6 +151,10 @@ public:
 	void updateMenu(QStringList actions, QMenu* menu);
 
 	QString ToolTipText;
+
+	QPointer<MoodDlg> moodDlg;
+	QPointer<ActivityDlg> activityDlg;
+	QPointer<GeoLocationDlg> geolocationDlg;
 };
 
 MainWin::Private::Private(PsiCon* _psi, MainWin* _mainWin) : splitter(0), mainTabs(0), viewToolBar(0), isLeftRoster(false), psi(_psi), mainWin(_mainWin)
@@ -609,6 +616,9 @@ void MainWin::registerAction( IconAction
 		{ "menu_play_sounds",    toggled,   this, SLOT( actPlaySoundsActivated(bool) ) },
 #ifdef USE_PEP
 		{ "publish_tune",        toggled,   this, SLOT( actPublishTuneActivated(bool) ) },
+		{ "set_mood",		 activated,   this, SLOT( actSetMoodActivated() ) },
+		{ "set_activity",        activated,   this, SLOT( actSetActivityActivated() ) },
+		{ "set_geoloc",		 activated,   this, SLOT( actSetGeolocActivated() ) },
 #endif
 
 		{ "event_notifier", SIGNAL( clicked(int) ), this, SLOT( statusClicked(int) ) },
@@ -1093,6 +1103,60 @@ void MainWin::actEnableGroupsActivated (
 	PsiOptions::instance()->setOption("options.ui.contactlist.enable-groups", state);
 }
 
+void MainWin::actSetMoodActivated()
+{
+	QList<PsiAccount*> l;
+	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+			l.append(pa);
+	}
+	if(l.isEmpty())
+		return;
+
+	if(d->moodDlg)
+		bringToFront(d->moodDlg);
+	else {
+		d->moodDlg = new MoodDlg(l);
+		d->moodDlg->show();
+	}
+}
+
+void MainWin::actSetActivityActivated()
+{
+	QList<PsiAccount*> l;
+	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+			l.append(pa);
+	}
+	if(l.isEmpty())
+		return;
+
+	if(d->activityDlg)
+		bringToFront(d->activityDlg);
+	else {
+		d->activityDlg = new ActivityDlg(l);
+		d->activityDlg->show();
+	}
+}
+
+void MainWin::actSetGeolocActivated()
+{
+	QList<PsiAccount*> l;
+	foreach(PsiAccount *pa, d->psi->contactList()->accounts()) {
+		if(pa->isActive() && pa->serverInfoManager()->hasPEP())
+			l.append(pa);
+	}
+	if(l.isEmpty())
+		return;
+
+	if(d->geolocationDlg)
+		bringToFront(d->geolocationDlg);
+	else {
+		d->geolocationDlg = new GeoLocationDlg(l);
+		d->geolocationDlg->show();
+	}
+}
+
 void MainWin::activatedAccOption(PsiAccount* pa, int x)
 {
 	if(x == 0) {
--- git.orig/src/mainwin.h
+++ git/src/mainwin.h
@@ -135,6 +135,9 @@ private slots:
 	void actTipActivated();
 	void actDiagQCAPluginActivated();
 	void actDiagQCAKeyStoreActivated();
+	void actSetMoodActivated();
+	void actSetActivityActivated();
+	void actSetGeolocActivated();
 
 	bool showDockMenu(const QPoint &);
 	void dockActivated();
--- git.orig/src/mooddlg.cpp
+++ git/src/mooddlg.cpp
@@ -27,16 +27,19 @@
 #include "pepmanager.h"
 #include "psiiconset.h"
 
-MoodDlg::MoodDlg(PsiAccount* pa)
-	: QDialog(0), pa_(pa)
+MoodDlg::MoodDlg(QList<PsiAccount*> list)
+	: QDialog(0), pa_(list)
 {
 	setAttribute(Qt::WA_DeleteOnClose);
+	if(pa_.isEmpty())
+		close();
 	ui_.setupUi(this);
 	setModal(false);
 	connect(ui_.pb_cancel, SIGNAL(clicked()), SLOT(close()));
 	connect(ui_.pb_ok, SIGNAL(clicked()), SLOT(setMood()));	
 
 	ui_.cb_type->addItem(tr("<unset>"));
+	PsiAccount *pa = pa_.first();
 	Mood::Type mt = pa->mood().type();
 	int i=1;
 	foreach(MoodCatalog::Entry e, MoodCatalog::instance()->entries()) {
@@ -53,11 +56,14 @@ MoodDlg::MoodDlg(PsiAccount* pa)
 void MoodDlg::setMood()
 {
 	QString moodstr = ui_.cb_type->currentText();
-	if (moodstr == tr("<unset>")) {
-		pa_->pepManager()->retract("http://jabber.org/protocol/mood", "current");
-	} else {
-		Mood::Type type = MoodCatalog::instance()->findEntryByText(moodstr).type();
-		pa_->pepManager()->publish("http://jabber.org/protocol/mood", PubSubItem("current",Mood(type,ui_.le_text->text()).toXml(*pa_->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+	foreach(PsiAccount *pa, pa_) {
+		if (moodstr == tr("<unset>")) {
+			pa->pepManager()->retract("http://jabber.org/protocol/mood", "current");
+		}
+		else {
+			Mood::Type type = MoodCatalog::instance()->findEntryByText(moodstr).type();
+			pa->pepManager()->publish("http://jabber.org/protocol/mood", PubSubItem("current",Mood(type,ui_.le_text->text()).toXml(*pa->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+		}
 	}
 	close();
 }
--- git.orig/src/mooddlg.h
+++ git/src/mooddlg.h
@@ -32,14 +32,14 @@ class MoodDlg : public QDialog
 	Q_OBJECT
 
 public:
-	MoodDlg(PsiAccount*);
+	MoodDlg(QList<PsiAccount*>);
 
 protected slots:
 	void setMood();
 
 private:
 	Ui::Mood ui_;
-	PsiAccount* pa_;
+	QList<PsiAccount*> pa_;
 };
 
 #endif
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -3773,19 +3773,25 @@ void PsiAccount::actionExecuteCommandSpe
 
 void PsiAccount::actionSetMood()
 {
-	MoodDlg *w = new MoodDlg(this);
+	QList<PsiAccount*> list;
+	list.append(this);
+	MoodDlg *w = new MoodDlg(list);
 	w->show();
 }
 
 void PsiAccount::actionSetActivity()
 {
-	ActivityDlg *w = new ActivityDlg(this);
+	QList<PsiAccount*> list;
+	list.append(this);
+	ActivityDlg *w = new ActivityDlg(list);
 	w->show();
 }
 
 void PsiAccount::actionSetGeoLocation()
 {
-	GeoLocationDlg *w = new GeoLocationDlg(this);
+	QList<PsiAccount*> list;
+	list.append(this);
+	GeoLocationDlg *w = new GeoLocationDlg(list);
 	w->show();
 }
 
--- git.orig/src/psiactionlist.cpp
+++ git/src/psiactionlist.cpp
@@ -271,8 +271,20 @@ void PsiActionList::Private::createMainW
 		IconAction *actPublishTune = new IconAction (tr("Publish Tune"), "psi/publishTune", tr("Publish &Tune"), 0, this, 0, true);
 		actPublishTune->setWhatsThis (tr("Toggles whether the currently playing tune should be published or not"));
 
+		IconAction *actSetMood = new IconAction (tr("Set Mood"), "mood/", tr("Set Mood"), 0, this);
+		actSetMood->setWhatsThis (tr("Set Mood for all active accounts"));
+
+		IconAction *actSetActivity = new IconAction (tr("Set Activity"), "activities/other", tr("Set Activity"), 0, this);
+		actSetActivity->setWhatsThis (tr("Set Activity for all active accounts"));
+
+		IconAction *actSetGeoloc = new IconAction (tr("Set Geolocation"), "system/geolocation", tr("Set Geolocation"), 0, this);
+		actSetGeoloc->setWhatsThis (tr("Set Geolocation for all active accounts"));
+
 		ActionNames actions[] = {
-			{ "publish_tune", actPublishTune },
+			{ "publish_tune",	actPublishTune },
+			{ "set_mood",		actSetMood },
+			{ "set_activity",	actSetActivity },
+			{ "set_geoloc",		actSetGeoloc },
 			{ "", 0 }
 		};
 
