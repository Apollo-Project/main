Entering 'iris'
Entering 'src/libpsi'
Index: psi/src/chatview_te.cpp
===================================================================
--- psi.orig/src/chatview_te.cpp	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/chatview_te.cpp	2013-01-15 14:04:22.836826891 +0400
@@ -35,6 +35,8 @@
 #include <QTimer>
 #include <QKeyEvent>
 #include <QUrl>
+#include <QMenu>
+#include <QTextDocumentFragment>
 
 static const char *infomrationalColorOpt = "options.ui.look.colors.messages.informational";
 
@@ -58,6 +60,12 @@
 	connect(this, SIGNAL(selectionChanged()), SLOT(autoCopy()));
 	connect(this, SIGNAL(cursorPositionChanged()), SLOT(autoCopy()));
 #endif
+	actQuote_ = new QAction(tr("Quote"), this);
+	actQuote_->setEnabled(false);
+	actQuote_->setShortcut(QKeySequence(tr("Ctrl+S")));
+	addAction(actQuote_);
+	connect(actQuote_, SIGNAL(triggered()), SLOT(quoteEvent()));
+	connect(this, SIGNAL(selectionChanged()), SLOT(changeActQuoteState()));
 
 	useMessageIcons_ = PsiOptions::instance()->getOption("options.ui.chat.use-message-icons").toBool();
 	if (useMessageIcons_) {
@@ -123,10 +131,20 @@
 		e->accept();
 	}
 	else {
-		PsiTextView::contextMenuEvent(e);
+		QMenu *menu = createStandardContextMenu(e->pos());
+		menu->exec(e->globalPos());
+		delete menu;
+		e->accept();
 	}
 }
 
+QMenu* ChatView::createStandardContextMenu(const QPoint &position)
+{
+	QMenu *menu = PsiTextView::createStandardContextMenu(position);
+	menu->addAction(actQuote_);
+	return menu;
+}
+
 void ChatView::addLogIconsResources()
 {
 	document()->addResource(QTextDocument::ImageResource, QUrl("icon:log_icon_receive"), logIconReceive);
@@ -188,6 +206,24 @@
 }
 
 /**
+ * Make quote from any selected text and paste it in chat window
+ */
+
+void ChatView::quoteEvent()
+{
+	emit quote(getPlainText());
+}
+
+/**
+ * Enable or disable actQuote_ in relations from hasSelection()
+ */
+
+void ChatView::changeActQuoteState()
+{
+	actQuote_->setEnabled(textCursor().hasSelection());
+}
+
+/**
  * Handle KeyPress events that happen in ChatEdit widget. This is used
  * to 'fix' the copy shortcut.
  * \param object object that should receive the event
Index: psi/src/chatview_te.h
===================================================================
--- psi.orig/src/chatview_te.h	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/chatview_te.h	2013-01-15 14:04:22.836826891 +0400
@@ -47,6 +47,7 @@
 	QSize sizeHint() const;
 	void clear();
 	void contextMenuEvent(QContextMenuEvent *e);
+	QMenu* createStandardContextMenu(const QPoint &position);
 
 	void init();
 	void setDialog(QWidget* dialog);
@@ -80,12 +81,15 @@
 
 protected slots:
 	void autoCopy();
+	void quoteEvent();
+	void changeActQuoteState();
 
 private slots:
 	void slotScroll();
 
 signals:
 	void showNM(const QString&);
+	void quote(const QString &text);
 
 private:
 	bool isMuc_;
@@ -100,6 +104,7 @@
 	QPixmap logIconDelivered;
 	QPixmap logIconTime;
 	QPixmap logIconInfo;
+	QAction *actQuote_;
 };
 
 #endif
Index: psi/src/groupchatdlg.cpp
===================================================================
--- psi.orig/src/groupchatdlg.cpp	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/groupchatdlg.cpp	2013-01-15 14:04:22.840826891 +0400
@@ -819,6 +819,8 @@
 	invalidateTab();
 	setConnecting();
 	connect(URLObject::getInstance(), SIGNAL(vcardsig(QString)), SLOT(vcard(QString)));
+
+	connect(ui_.log->textWidget(), SIGNAL(quote(const QString &)), ui_.mle->chatEdit(), SLOT(insertAsQuote(const QString &)));
 }
 
 void GCMainDlg::vcard(const QString& _str)
Index: psi/src/msgmle.cpp
===================================================================
--- psi.orig/src/msgmle.cpp	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/msgmle.cpp	2013-01-15 14:04:22.840826891 +0400
@@ -32,6 +32,7 @@
 #include <QTextCharFormat>
 #include <QTextDocument>
 #include <QTimer>
+#include <QClipboard>
 
 #include "shortcutmanager.h"
 #include "spellchecker/spellhighlighter.h"
@@ -92,6 +93,13 @@
 	act_showMessageLast= new QAction(this);
 	addAction(act_showMessageLast);
 	connect(act_showMessageLast, SIGNAL(triggered()), SLOT(showHistoryMessageLast()));
+
+	QClipboard *clipboard = QApplication::clipboard();
+	actPasteAsQuote_ = new QAction(tr("Paste As Quotation"), this);
+	actPasteAsQuote_->setEnabled(!clipboard->text().isEmpty());
+	addAction(actPasteAsQuote_);
+	connect(actPasteAsQuote_, SIGNAL(triggered()), SLOT(pasteAsQuote()));
+	connect(clipboard, SIGNAL(dataChanged()), SLOT(changeActPasteAsQuoteState()));
 }
 
 void ChatEdit::setShortcuts()
@@ -118,6 +126,13 @@
 	controller_->setFont(f);
 }
 
+QMenu* ChatEdit::createStandardContextMenu(const QPoint &position)
+{
+	QMenu *menu = QTextEdit::createStandardContextMenu(position);
+	menu->addAction(actPasteAsQuote_);
+	return menu;
+}
+
 bool ChatEdit::checkSpellingGloballyEnabled()
 {
 	return (SpellChecker::instance()->available() && PsiOptions::instance()->getOption("options.ui.spell-check.enabled").toBool());
@@ -222,8 +237,10 @@
 		}
 	}
 
-	// Do normal menu
-	QTextEdit::contextMenuEvent(e);
+	// Do custom menu
+	QMenu *menu = createStandardContextMenu(e->pos());
+	menu->exec(e->globalPos());
+	delete menu;
 	e->accept();
 }
 
@@ -298,6 +315,18 @@
 	}
 }
 
+void ChatEdit::changeActPasteAsQuoteState()
+{
+	QClipboard *clipboard = QApplication::clipboard();
+	actPasteAsQuote_->setEnabled(!clipboard->text().isEmpty());
+}
+
+void ChatEdit::pasteAsQuote()
+{
+	QString text = QApplication::clipboard()->text();
+	insertAsQuote(text);
+}
+
 void ChatEdit::showHistoryMessagePrev()
 {
 	if (!typedMsgsHistory.isEmpty() && typedMsgsIndex > 0) {
@@ -407,6 +436,24 @@
 	controller_->setCssString(css);
 }
 
+void ChatEdit::insertAsQuote(const QString &text)
+{
+	int pos =  textCursor().position();
+	QString prevLine = toPlainText().left(pos - 1);
+	prevLine = prevLine.mid(prevLine.lastIndexOf("\n") + 1);
+
+	QString quote = QString::fromUtf8("» ") + text;
+	quote.replace("\n", QString::fromUtf8("\n» "));
+
+	// Check for previous quote and merge if true
+	if(!prevLine.startsWith(QString::fromUtf8("»"))) {
+		quote.prepend("\n");
+	}
+	quote.append("\n");
+	insertPlainText(quote);
+}
+
+
 //----------------------------------------------------------------------------
 // LineEdit
 //----------------------------------------------------------------------------
Index: psi/src/msgmle.h
===================================================================
--- psi.orig/src/msgmle.h	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/msgmle.h	2013-01-15 14:04:22.840826891 +0400
@@ -49,6 +49,7 @@
 	// reimplemented
 	QSize sizeHint() const;
 	void setFont(const QFont &);
+	QMenu* createStandardContextMenu(const QPoint &position);
 
 	static bool checkSpellingGloballyEnabled();
 	void setCheckSpelling(bool);
@@ -59,6 +60,7 @@
 	void clearMessageHistory();
 	void doHTMLTextMenu();
 	void setCssString(const QString& css);
+	void insertAsQuote(const QString& text);
 
 protected slots:
  	void applySuggestion();
@@ -68,6 +70,8 @@
 	void showHistoryMessagePrev();
 	void showHistoryMessageFirst();
 	void showHistoryMessageLast();
+	void changeActPasteAsQuoteState();
+	void pasteAsQuote();
 
 protected:
 	// override the tab/esc behavior
@@ -92,6 +96,8 @@
 	QAction* act_showMessageNext;
 	QAction* act_showMessageFirst;
 	QAction* act_showMessageLast;
+	QAction *actPasteAsQuote_;
+
 	QString currentText;
 	HTMLTextController *controller_;
 };
Index: psi/src/psichatdlg.cpp
===================================================================
--- psi.orig/src/psichatdlg.cpp	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/psichatdlg.cpp	2013-01-15 14:04:22.840826891 +0400
@@ -264,6 +264,8 @@
 		ui_.vboxLayout1->insertWidget(0, winHeader_);
 	}
 	setMargins();
+
+	connect(ui_.log->textWidget(), SIGNAL(quote(const QString &)), ui_.mle->chatEdit(), SLOT(insertAsQuote(const QString &)));
 }
 
 void PsiChatDlg::updateCountVisibility()
Index: psi/src/webview.cpp
===================================================================
--- psi.orig/src/webview.cpp	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/webview.cpp	2013-01-15 14:04:22.840826891 +0400
@@ -43,6 +43,11 @@
 	connect(page()->action(QWebPage::Cut), SIGNAL(triggered()), SLOT(textCopiedEvent()));
 	connect(page(), SIGNAL(loadStarted()), this, SLOT(loadStartedEvent()));
 	connect(page(), SIGNAL(loadFinished(bool)), this, SLOT(loadFinishedEvent(bool)));
+
+	actQuote_ = new QAction(tr("Quote"), this);
+	actQuote_->setShortcut(QKeySequence(tr("Ctrl+S")));
+	addAction(actQuote_);
+	connect(actQuote_, SIGNAL(triggered()), SLOT(quoteEvent()));
 }
 
 void WebView::linkClickedEvent(const QUrl& url)
@@ -66,6 +71,11 @@
 	isLoading_ = false;
 }
 
+void WebView::quoteEvent()
+{
+	emit quote(selectedText());
+}
+
 void WebView::contextMenuEvent(QContextMenuEvent* event)
 {
 	if (isLoading_) return;
@@ -83,6 +93,7 @@
 		menu = new QMenu(this);
 		if (!page()->selectedText().isEmpty()) {
 			menu->addAction(pageAction(QWebPage::Copy));
+			menu->addAction(actQuote_);
 		} else {
 			if (!menu->isEmpty()) {
 				menu->addSeparator();
Index: psi/src/webview.h
===================================================================
--- psi.orig/src/webview.h	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/webview.h	2013-01-15 14:04:22.840826891 +0400
@@ -93,13 +93,17 @@
 	bool isLoading_;
 	QStringList jsBuffer_;
 	QPoint dragStartPosition;
+	QAction *actQuote_;
 
+signals:
+	void quote(const QString &text);
 
 protected slots:
 	void linkClickedEvent(const QUrl& url);
 	void textCopiedEvent();
 	void loadStartedEvent();
 	void loadFinishedEvent(bool);
+	void quoteEvent();
 };
 
 
Index: psi/src/widgets/psitextview.cpp
===================================================================
--- psi.orig/src/widgets/psitextview.cpp	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/widgets/psitextview.cpp	2013-01-15 14:04:22.840826891 +0400
@@ -25,6 +25,7 @@
 #include <QAbstractTextDocumentLayout>
 #include <QTextDocumentFragment>
 #include <QTextFragment>
+#include <QRegExp>
 #include <QMimeData>
 
 #include "urlobject.h"
@@ -49,6 +50,7 @@
 
 	QString anchorOnMousePress;
 	bool hadSelectionOnMousePress;
+	bool rightClickSelection;
 
 	QString fragmentToPlainText(const QTextFragment &fragment);
 	QString blockToPlainText(const QTextBlock &block);
@@ -79,6 +81,43 @@
 	viewport()->setMouseTracking(true); // we want to get all mouseMoveEvents
 }
 
+ /**
+ * Reimplemented createStandardContextMenu(const QPoint &position)
+ * for creating of custom context menu
+ */
+
+QMenu* PsiTextView::createStandardContextMenu(const QPoint &position)
+{
+	QTextCursor textcursor = cursorForPosition(position);
+	QMenu *menu;
+	QString anc = anchorAt(position);
+	if (!anc.isEmpty()) {
+		menu = URLObject::getInstance()->createPopupMenu(anc);
+
+		int posInBlock = textcursor.position() - textcursor.block().position();
+		QString textblock = textcursor.block().text();
+		int begin = textcursor.block().position() + textblock.lastIndexOf(QRegExp("\\s|^"), posInBlock) + 1;
+		int end = textcursor.block().position() + textblock.indexOf(QRegExp("\\s|$"), posInBlock);
+		textcursor.setPosition(begin);
+		textcursor.setPosition(end, QTextCursor::KeepAnchor);
+		setTextCursor(textcursor);
+
+		menu = URLObject::getInstance()->createPopupMenu(anc);
+	}
+	else {
+		if (d->rightClickSelection || !textCursor().hasSelection()) { // only if no selection we select text block
+			int begin = textcursor.block().position();
+			int end = begin + textcursor.block().length() - 1;
+			textcursor.setPosition(begin);
+			textcursor.setPosition(end, QTextCursor::KeepAnchor);
+			setTextCursor(textcursor);
+			d->rightClickSelection = true;
+		}
+		menu = QTextEdit::createStandardContextMenu();
+	}
+	return menu;
+}
+
 /**
  * This function returns true if vertical scroll bar is
  * at its maximum position.
@@ -175,11 +214,7 @@
 
 void PsiTextView::contextMenuEvent(QContextMenuEvent *e)
 {
-	QMenu *menu;
-	if (!anchorAt(e->pos()).isEmpty())
-		menu = URLObject::getInstance()->createPopupMenu(anchorAt(e->pos()));
-	else
-		menu = createStandardContextMenu();
+	QMenu *menu = createStandardContextMenu(e->pos());
 	menu->exec(e->globalPos());
 	e->accept();
 	delete menu;
@@ -218,9 +253,11 @@
 {
 	QTextEdit::mouseReleaseEvent(e);
 
-	if (!(e->button() & Qt::LeftButton))
+	if (!(e->button() & Qt::LeftButton)) {
 		return;
+	}
 
+	d->rightClickSelection = false;
 	const QString anchor = anchorAt(e->pos());
 
 	if (anchor.isEmpty())
Index: psi/src/widgets/psitextview.h
===================================================================
--- psi.orig/src/widgets/psitextview.h	2013-01-15 14:04:22.844826891 +0400
+++ psi/src/widgets/psitextview.h	2013-01-15 14:04:22.840826891 +0400
@@ -32,6 +32,9 @@
 public:
 	PsiTextView(QWidget *parent = 0);
 
+	// Reimplemented
+	QMenu* createStandardContextMenu(const QPoint &position);
+
 	bool atBottom();
 
 	virtual void appendText(const QString &text);	
