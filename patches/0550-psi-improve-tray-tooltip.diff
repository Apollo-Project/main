--- git.orig/src/mainwin.cpp
+++ git/src/mainwin.cpp
@@ -55,6 +55,8 @@
 #include "serverinfomanager.h"
 #include "applicationinfo.h"
 #include "psiaccount.h"
+#include "psievent.h"
+#include "psitooltip.h"
 #include "psitrayicon.h"
 #include "psitoolbar.h"
 #include "aboutdlg.h"
@@ -144,6 +146,8 @@ public:
 	void registerActions();
 	IconAction* getAction( QString name );
 	void updateMenu(QStringList actions, QMenu* menu);
+
+	QString ToolTipText;
 };
 
 MainWin::Private::Private(PsiCon* _psi, MainWin* _mainWin) : splitter(0), mainTabs(0), viewToolBar(0), isLeftRoster(false), psi(_psi), mainWin(_mainWin)
@@ -714,7 +718,8 @@ void MainWin::setUseDock(bool use)
 		connect(d->tray, SIGNAL(clicked(const QPoint &, int)), SLOT(trayClicked(const QPoint &, int)));
 		connect(d->tray, SIGNAL(doubleClicked(const QPoint &)), SLOT(trayDoubleClicked()));
 		d->tray->setIcon(PsiIconset::instance()->statusPtr(STATUS_OFFLINE));
-		d->tray->setToolTip(ApplicationInfo::name());
+		setTrayToolTip();
+		connect(d->tray, SIGNAL(doToolTip(QObject *, QPoint)), this, SLOT(doTrayToolTip(QObject *, QPoint)));
 
 		updateReadNext(d->nextAnim, d->nextAmount);
 
@@ -1097,12 +1102,87 @@ void MainWin::buildTrayMenu()
 #endif
 }
 
-void MainWin::setTrayToolTip(int status)
+void MainWin::setTrayToolTip()
 {
 	if (!d->tray) {
 		return;
 	}
-	d->tray->setToolTip(QString("Psi - " + status2txt(status)));
+	QString s = ApplicationInfo::name();
+	QString str = "<qt>";
+	QString imgTag = "icon name";
+	str += QString("<div style='white-space:pre'><b>%1</b></div>").arg(Qt::escape(ApplicationInfo::name()));
+	QString Tip = "";
+	QString TipPlain = "";
+	QString Events = "";
+	QString EventsPlain = "";
+	foreach(PsiAccount *pa, d->psi->contactList()->enabledAccounts()) {
+		Status stat = pa->status();
+		int status = makeSTATUS(stat);
+		QString istr = "status/offline";
+		if(status == STATUS_ONLINE)
+			istr = "status/online";
+		else if(status == STATUS_AWAY)
+			istr = "status/away";
+		else if(status == STATUS_XA)
+			istr = "status/xa";
+		else if(status == STATUS_DND)
+			istr = "status/dnd";
+		else if(status == STATUS_CHAT)
+ 			istr = "status/chat";
+		else if(status == STATUS_INVISIBLE)
+			istr = "status/invisible";
+		Tip += QString("<div style='white-space:pre'>") + QString("<%1=\"%2\"> ").arg(imgTag).arg(istr) + QString("<b>%1</b>").arg(Qt::escape(pa->name())) + "</div>";
+		TipPlain += "\n" + pa->name() + " (" + stat.typeString() + ")";
+		QString text = stat.status();		
+		if(!text.isEmpty()) {
+			text = clipStatus(text, 40, 1);
+			Tip += QString("<div style='white-space:pre'>%1: %2</div>").arg(tr("Status Message")).arg(Qt::escape(text));
+		}
+
+		PsiEvent *e = 0;
+		e = pa->eventQueue()->peekNext();
+		if(e) {
+			Jid jid = e->jid();
+			QString from;
+			if(!jid.isEmpty()) {
+				LiveRoster Roster = pa->client()->roster();
+				while(!Roster.isEmpty()) {
+					LiveRosterItem item = Roster.takeFirst();
+					if(item.jid().compare(jid)) {
+						from = item.name();
+						break;
+					}
+				}
+				if(from.isEmpty()) {
+					from = jid.full();
+				}
+			}
+			if(!from.isEmpty()) {
+				Events += QString("<div style='white-space:pre'>%1</div>").arg(Qt::escape(from));
+				EventsPlain += "\n" + from;
+			}
+		}
+	}
+
+	if(!Tip.isEmpty()) {
+		str += QString("<div style='white-space:pre'><u><b>%1</b></u></div>").arg(Qt::escape(tr("Active accounts:"))) + Tip;
+		s += tr("\nActive accounts:") + TipPlain;
+	}
+
+	if(!Events.isEmpty()) {
+		str += QString("<div style='white-space:pre'><u><b>%1</b></u></div>").arg(Qt::escape(tr("Incoming event(s) from:"))) + Events;
+		s += tr("\nIncoming event(s) from:") + EventsPlain;
+	}
+
+	str += "</qt>";
+
+	d->ToolTipText = str;
+	d->tray->setToolTip(s);
+}
+
+void MainWin::doTrayToolTip(QObject *, QPoint p)
+{
+	PsiToolTip::showText(p, d->ToolTipText);
 }
 
 void MainWin::decorateButton(int status)
@@ -1113,6 +1193,8 @@ void MainWin::decorateButton(int status)
 		action->setChecked ( d->statusActions[action] == status );
 	}
 
+	setTrayToolTip();
+
 	if(d->lastStatus == status) {
 		return;
 	}
@@ -1294,25 +1376,13 @@ void MainWin::toggleVisible()
 	}
 }
 
-void MainWin::setTrayToolTip(const Status& status, bool, bool)
+void MainWin::setTrayToolTip(const Status&, bool, bool)
 {
 	if (!d->tray) {
 		return;
 	}
-	QString s = "Psi";
 
- 	QString show = status.show();
-	if(!show.isEmpty()) {
-		show[0] = show[0].toUpper();
-		s += " - "+show;
-	}
-
-	QString text = status.status();
-	if(!text.isEmpty()) {
-		s += ": "+text;
-	}
-
-	d->tray->setToolTip(s);
+	setTrayToolTip();
 }
 
 void MainWin::trayClicked(const QPoint &, int button)
@@ -1387,6 +1457,7 @@ void MainWin::updateReadNext(PsiIcon* an
 
 	updateTray();
 	updateCaption();
+	setTrayToolTip();
 }
 
 QString MainWin::numEventsString(int x) const
@@ -1445,6 +1516,7 @@ PsiTrayIcon *MainWin::psiTrayIcon()
 void MainWin::numAccountsChanged()
 {
 	d->statusButton->setEnabled(d->psi->contactList()->haveEnabledAccounts());
+	setTrayToolTip();
 }
 
 void MainWin::accountFeaturesChanged()
--- git.orig/src/mainwin.h
+++ git/src/mainwin.h
@@ -101,7 +101,7 @@ private slots:
 	void buildMainMenu();
 	void buildToolsMenu();
 
-	void setTrayToolTip(int);
+	void setTrayToolTip();
 
 	void activatedStatusAction(int);
 
@@ -145,6 +145,8 @@ private slots:
 	void registerAction( IconAction * );
 	void splitterMoved();
 
+	void doTrayToolTip(QObject *, QPoint);
+
 public slots:
 	void setWindowIcon(const QPixmap&);
 	void showNoFocus();
--- git.orig/src/psitrayicon.cpp
+++ git/src/psitrayicon.cpp
@@ -2,6 +2,7 @@
 #include <QPixmapCache>
 #include <QApplication> // old
 #include <QSystemTrayIcon>
+#include <QHelpEvent>
 
 #include "psitrayicon.h"
 #include "iconset.h"
@@ -20,6 +21,7 @@ PsiTrayIcon::PsiTrayIcon(const QString &
 	trayicon_->setContextMenu(popup);
 	setToolTip(tip);
 	connect(trayicon_,SIGNAL(activated(QSystemTrayIcon::ActivationReason)),SLOT(trayicon_activated(QSystemTrayIcon::ActivationReason)));
+	trayicon_->installEventFilter(this);
 }
 
 PsiTrayIcon::~PsiTrayIcon()
@@ -188,3 +190,12 @@ void PsiTrayIcon::animate()
 	}
 	trayicon_->setIcon(p);
 }
+
+bool PsiTrayIcon::eventFilter(QObject *obj, QEvent *event)
+{
+	if(event->type() == QEvent::ToolTip) {
+		doToolTip(obj, ((QHelpEvent*)event)->globalPos());
+		return true;
+	}
+	return false;
+}
--- git.orig/src/psitrayicon.h
+++ git/src/psitrayicon.h
@@ -29,6 +29,7 @@ signals:
 	void clicked(const QPoint &, int);
 	void doubleClicked(const QPoint &);
 	void closed();
+	void doToolTip(QObject *, QPoint);
 
 public slots:
 	void show();
@@ -41,6 +42,7 @@ private slots:
 protected:
 	QPixmap makeIcon();
 	QRgb pixelBlend(QRgb p1, QRgb p2);
+	bool eventFilter( QObject *, QEvent * );
 
 private:
 	PsiIcon* icon_;
