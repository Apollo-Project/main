--- git.orig/src/chatview_te.cpp
+++ git/src/chatview_te.cpp
@@ -114,6 +114,19 @@ void ChatView::clear()
 	addLogIconsResources();
 }
 
+void ChatView::contextMenuEvent(QContextMenuEvent *e)
+{
+	const QUrl anc = QUrl::fromEncoded(anchorAt(e->pos()).toLatin1());
+
+	if ( anc.scheme() == "addnick" ) {
+		showNM(anc.path().mid(1));
+		e->accept();
+	}
+	else {
+		PsiTextView::contextMenuEvent(e);
+	}
+}
+
 void ChatView::addLogIconsResources()
 {
 	document()->addResource(QTextDocument::ImageResource, QUrl("icon:log_icon_receive"), logIconReceive);
@@ -282,16 +295,18 @@ void ChatView::renderMucMessage(const Me
 	} else {
 		nickcolor = getMucNickColor(mv.nick(), mv.isLocal());
 	}
+	QString nick = QString("<a href=\"addnick://psi/") + QUrl::toPercentEncoding(mv.nick()) +
+				   "\" style=\"color: "+nickcolor+"; text-decoration: none; \">"+TextUtil::escape(mv.nick())+"</a>";
 
 	if(mv.isEmote()) {
-		appendText(icon + QString("<font color=\"%1\">").arg(nickcolor) + QString("[%1]").arg(timestr) + QString(" *%1 ").arg(TextUtil::escape(mv.nick())) + alerttagso + mv.formattedText() + alerttagsc + "</font>");
+		appendText(icon + QString("<font color=\"%1\">").arg(nickcolor) + QString("[%1]").arg(timestr) + QString(" *%1 ").arg(nick) + alerttagso + mv.formattedText() + alerttagsc + "</font>");
 	}
 	else {
 		if(PsiOptions::instance()->getOption("options.ui.chat.use-chat-says-style").toBool()) {
-			appendText(icon + QString("<font color=\"%1\">").arg(nickcolor) + QString("[%1] ").arg(timestr) + QString("%1 says:").arg(TextUtil::escape(mv.nick())) + "</font><br>" + QString("<font color=\"%1\">").arg(textcolor) + alerttagso + mv.formattedText() + alerttagsc + "</font>");
+			appendText(icon + QString("<font color=\"%1\">").arg(nickcolor) + QString("[%1] ").arg(timestr) + QString("%1 says:").arg(nick) + "</font><br>" + QString("<font color=\"%1\">").arg(textcolor) + alerttagso + mv.formattedText() + alerttagsc + "</font>");
 		}
 		else {
-			appendText(icon + QString("<font color=\"%1\">").arg(nickcolor) + QString("[%1] &lt;").arg(timestr) + TextUtil::escape(mv.nick()) + QString("&gt;</font> ") + QString("<font color=\"%1\">").arg(textcolor) + alerttagso + mv.formattedText() + alerttagsc +"</font>");
+			appendText(icon + QString("<font color=\"%1\">").arg(nickcolor) + QString("[%1] &lt;").arg(timestr) + nick + QString("&gt;</font> ") + QString("<font color=\"%1\">").arg(textcolor) + alerttagso + mv.formattedText() + alerttagsc +"</font>");
 		}
 	}
 
--- git.orig/src/chatview_te.h
+++ git/src/chatview_te.h
@@ -24,6 +24,7 @@
 #include <QWidget>
 #include <QDateTime>
 #include <QPointer>
+#include <QContextMenuEvent>
 
 #include "psitextview.h"
 #include "chatviewcommon.h"
@@ -45,6 +46,7 @@ public:
 	// reimplemented
 	QSize sizeHint() const;
 	void clear();
+	void contextMenuEvent(QContextMenuEvent *e);
 
 	void init();
 	void setDialog(QWidget* dialog);
@@ -83,6 +85,9 @@ protected slots:
 private slots:
 	void slotScroll();
 
+signals:
+	void showNM(const QString&);
+
 private:
 	bool isMuc_;
 	QString jid_;
--- git.orig/src/chatview_webkit.cpp
+++ git/src/chatview_webkit.cpp
@@ -230,6 +230,15 @@ void ChatView::setSessionData(bool isMuc
 			SLOT(init()));
 }
 
+void ChatView::contextMenuEvent(QContextMenuEvent *e)
+{
+	QWebHitTestResult r = webView->page()->mainFrame()->hitTestContent(e->pos());
+	if ( r.linkUrl().scheme() == "addnick" ) {
+		showNM(r.linkUrl().path().mid(1));
+		e->accept();
+	}
+}
+
 bool ChatView::focusNextPrevChild(bool next)
 {
 	return QWidget::focusNextPrevChild(next);
--- git.orig/src/chatview_webkit.h
+++ git/src/chatview_webkit.h
@@ -53,6 +53,7 @@ public:
 	void setSessionData(bool isMuc, const QString &jid, const QString name);
 	void setAccount(PsiAccount *acc) { account_ = acc; }
 
+	void contextMenuEvent(QContextMenuEvent* event);
 	void sendJsObject(const QVariantMap &);
 	void sendJsCommand(const QString &cmd);
 	bool handleCopyEvent(QObject *object, QEvent *event, ChatEdit *chatEdit);
@@ -85,6 +86,9 @@ private slots:
 	void checkJsBuffer();
 	void sessionInited();
 
+signals:
+	void showNM(const QString&);
+
 private:
 	friend class ChatViewJSObject;
 	ChatViewTheme* currentTheme();
--- git.orig/src/desktoputil.cpp
+++ git/src/desktoputil.cpp
@@ -87,6 +87,7 @@ static bool doOpenUrl(const QUrl& url)
  */
 bool DesktopUtil::openUrl(const QString& url)
 {
+	if (url.startsWith("addnick://")) return true;
 	QByteArray ascii = url.toLatin1();
 	if (ascii == url)
 		return doOpenUrl(QUrl::fromEncoded(ascii));
--- git.orig/src/gcuserview.cpp
+++ git/src/gcuserview.cpp
@@ -397,13 +397,8 @@ void GCUserView::qlv_doubleClicked(const
 	}
 }
 
-void GCUserView::contextMenuRequested(const QPoint &p)
+void GCUserView::doContextMenu(QTreeWidgetItem *i)
 {
-	QTreeWidgetItem *i = itemAt(p);
-
-	if(!i || !i->parent() || !gcDlg_)
-		return;
-
 	QPointer<GCUserViewItem> lvi = (GCUserViewItem *)i;
 	bool self = gcDlg_->nick() == i->text(0);
 	GCUserViewItem* c = (GCUserViewItem*) findEntry(gcDlg_->nick());
@@ -536,6 +531,16 @@ void GCUserView::contextMenuRequested(co
 	action(lvi->text(0), lvi->s, x);
 }
 
+void GCUserView::contextMenuRequested(const QPoint &p)
+{
+	QTreeWidgetItem *i = itemAt(p);
+
+	if(!i || !i->parent() || !gcDlg_)
+		return;
+
+	doContextMenu(i);
+}
+
 void GCUserView::mousePressEvent(QMouseEvent *event)
 {
 	QTreeWidget::mousePressEvent(event);
--- git.orig/src/gcuserview.h
+++ git/src/gcuserview.h
@@ -75,6 +75,7 @@ public:
 	void updateEntry(const QString &, const Status &);
 	void removeEntry(const QString &);
 	QStringList nickList() const;
+	void doContextMenu(QTreeWidgetItem* it);
 
 protected:
 	enum Role { Moderator = 0, Participant = 1, Visitor = 2 };
--- git.orig/src/groupchatdlg.cpp
+++ git/src/groupchatdlg.cpp
@@ -71,6 +71,7 @@
 #include "psitooltip.h"
 #include "psioptions.h"
 #include "coloropt.h"
+#include "urlobject.h"
 #include "shortcutmanager.h"
 #include "psicontactlist.h"
 #include "accountlabel.h"
@@ -560,6 +561,28 @@ public:
 
 };
 
+void GCMainDlg::openURL(const QString& url)
+{
+	if (url.startsWith("addnick://") && isActiveTab()) {
+		const QString nick = QUrl::fromPercentEncoding(url.mid(14).toLatin1());
+		if (ui_.mle->chatEdit()->toPlainText().length() == 0) {
+			ui_.mle->chatEdit()->insertPlainText(nick + QString(": "));
+		}
+		else {
+			ui_.mle->chatEdit()->insertPlainText(QString(" %1 ").arg(nick));
+		}
+		ui_.mle->chatEdit()->setFocus();
+	}
+}
+
+void GCMainDlg::showNM(const QString& nick)
+{
+	QTreeWidgetItem* itm = ui_.lv_users->findEntry(nick);
+	if (itm) {
+		ui_.lv_users->doContextMenu(itm);
+	}
+}
+
 GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	: TabbableWidget(j.bare(), pa, tabManager)
 {
@@ -593,6 +616,9 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 	ui_.log->setAccount(account());
 #endif
 
+	connect(ui_.log, SIGNAL(showNM(QString)), this, SLOT(showNM(QString)));
+	connect(URLObject::getInstance(), SIGNAL(openURL(QString)), SLOT(openURL(QString)));
+
 	connect(ui_.pb_topic, SIGNAL(clicked()), SLOT(openTopic()));
 	PsiToolTip::install(ui_.le_topic);
 
--- git.orig/src/groupchatdlg.h
+++ git/src/groupchatdlg.h
@@ -107,6 +107,8 @@ public slots:
 	void optionsUpdate();
 
 private slots:
+	void showNM(const QString&);
+	void openURL(const QString&);
 	void scrollUp();
 	void scrollDown();
 	void mle_returnPressed();
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -4267,6 +4267,9 @@ void PsiAccount::openUri(const QUrl &uri
 		} else {
 			dj_newMessage(entity, body, subject, "");
 		}
+	} else if (querytype == "vcard") {
+		actionInfo(entity);
+
 		// thread, from, id
 	//} else if (querytype == "pubsub") {
 	//	// action, node
--- git.orig/src/webview.cpp
+++ git/src/webview.cpp
@@ -75,6 +75,10 @@ void WebView::contextMenuEvent(QContextM
 	QMenu *menu;
 
 	if (!r.linkUrl().isEmpty()) {
+		if (r.linkUrl().scheme() == "addnick") {
+			event->ignore();
+			return;
+		}
 		menu = URLObject::getInstance()->createPopupMenu(r.linkUrl().toEncoded());
 		//menu->addAction(pageAction(QWebPage::CopyLinkToClipboard));
 	} else {
--- git.orig/src/widgets/urlobject.cpp
+++ git/src/widgets/urlobject.cpp
@@ -37,7 +37,7 @@ class URLObject::Private : QObject
 	Q_OBJECT
 public:
 	QString link;
-	IconAction *act_xmpp, *act_mailto, *act_join_groupchat, *act_send_message, *act_chat, *act_browser, *act_add_to_roster, *act_copy;
+	IconAction *act_xmpp, *act_mailto, *act_join_groupchat, *act_send_message, *act_chat, *act_browser, *act_add_to_roster, *act_copy, *act_info;
 	URLObject *urlObject;
 	QSignalMapper xmppActionMapper;
 
@@ -85,6 +85,10 @@ public:
 		act_copy = new IconAction(tr, tr, 0, this);
 		connect(act_copy, SIGNAL(triggered()), SLOT(popupCopy()));
 
+		tr = qApp->translate("URLLabel", "User Info");
+		act_info = new IconAction(tr, "psi/vCard", tr, 0, this);
+		connectXmppAction(act_info, "vcard");
+
 		connect(&xmppActionMapper, SIGNAL(mapped(const QString&)), SLOT(xmppAction(const QString&)));
 	}
 
@@ -210,6 +214,7 @@ QMenu *URLObject::createPopupMenu(const
 		if (service == "x-psi-atstyle") {
 			m->addSeparator();
 		}
+		m->addAction(d->act_info);
 		m->addAction(d->act_xmpp);
 		m->addAction(d->act_chat);
 		m->addAction(d->act_send_message);
--- git.orig/themes/chatview/psi/classic/index.html
+++ git/themes/chatview/psi/classic/index.html
@@ -17,6 +17,7 @@ body > div > img:first-child { vertical-
 .usertext {}
 .alert {font-weight:bold; color:red;}
 .trackbar { height:1px; border:1px solid black; border-color:#bbf #66f #66f #bbf }
+.nicklink { text-decoration:none; color:inherit; }
   </style>
 </head>
 <body>
@@ -107,6 +108,9 @@ window[chatServer.jsNamespace()].theme =
 			},
 			sender : function() {
 				var nick = chat.util.escapeHtml(shared.cdata.sender);
+				nick = shared.cdata.mtype == "message" && shared.isMuc?
+					'<a href="addnick://psi/'+encodeURIComponent(shared.cdata.sender)+
+					'" class="nicklink">'+nick+'</a>' : nick;
 				return shared.cdata.emote?"*"+nick:"&lt;"+nick+"&gt;";
 			},
 			alertedmessage : function() {
