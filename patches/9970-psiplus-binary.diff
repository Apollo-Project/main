--- git.orig/psi.desktop
+++ git/psi.desktop
@@ -5,8 +5,8 @@ Type=Application
 Name=Psi+
 GenericName=Jabber Client
 Comment=Communicate over the Jabber network
-Icon=psi
-Exec=psi
+Icon=psi-plus
+Exec=psi-plus
 Terminal=false
 Categories=Network;InstantMessaging;Qt;
 
--- git.orig/qcm/certstore.qcm
+++ git/qcm/certstore.qcm
@@ -73,10 +73,10 @@ public:
 			if(QFile::exists(conf->getenv("PREFIX") + "/certs/rootcerts.pem"))
 				path = "$$PREFIX/certs/rootcerts.pem";
 			else
-				path = "$$DATADIR/psi/certs/rootcerts.pem";
+				path = "$$DATADIR/psi-plus/certs/rootcerts.pem";
 
 			QString extra =
-			"qcasharedfiles.path = $$DATADIR/psi\n"
+			"qcasharedfiles.path = $$DATADIR/psi-plus\n"
 			"qcasharedfiles.files = third-party/qca/qca/certs\n"
 			"INSTALLS += qcasharedfiles\n";
 			conf->addExtra(extra);
--- git.orig/qcm/conf.qcm
+++ git/qcm/conf.qcm
@@ -20,14 +20,14 @@ public:
 		conf->addExtra("CONFIG += QuickDirtyChecker");
 		return true;
 #else
-		conf->addExtra(QString("PSI_LIBDIR=%1/psi").arg(conf->getenv("LIBDIR")));
-		conf->addExtra(QString("PSI_DATADIR=%1/psi").arg(conf->getenv("DATADIR")));
+		conf->addExtra(QString("PSI_LIBDIR=%1/psi-plus").arg(conf->getenv("LIBDIR")));
+		conf->addExtra(QString("PSI_DATADIR=%1/psi-plus").arg(conf->getenv("DATADIR")));
 
 		QFile file("src/config.h");
 		if ( file.open(QIODevice::WriteOnly | QIODevice::Text) ) {
 			QTextStream stream( &file );
-			stream << "#define PSI_LIBDIR \"" << conf->getenv("LIBDIR") << "/psi\"" << endl;
-			stream << "#define PSI_DATADIR \"" << conf->getenv("DATADIR") << "/psi\"" << endl;
+			stream << "#define PSI_LIBDIR \"" << conf->getenv("LIBDIR") << "/psi-plus\"" << endl;
+			stream << "#define PSI_DATADIR \"" << conf->getenv("DATADIR") << "/psi-plus\"" << endl;
 		}
 
 		conf->addDefine("HAVE_CONFIG");
--- git.orig/src/activeprofiles_dbus.cpp
+++ git/src/activeprofiles_dbus.cpp
@@ -112,7 +112,7 @@ QString ActiveProfiles::Private::dbusNam
 {
 	QString name = PSIDBUSNAME;
 	name += ".";
-	name += encodeAlNumD(ApplicationInfo::homeDir()).right(qMax(0,200-name.size()));
+	name += encodeAlNumD(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation)).right(qMax(0,200-name.size()));
 	if (!prof.isEmpty()) {
 		name += ".";
 		name += encodeAlNumD(prof).right(qMax(0,250-name.size()));
--- git.orig/src/applicationinfo.cpp
+++ git/src/applicationinfo.cpp
@@ -1,6 +1,8 @@
 #include <QString>
 #include <QDir>
 #include <QFile>
+#include <QSettings>
+#include <QLocale>
 
 #ifdef Q_WS_X11
 #include <sys/stat.h> // chmod
@@ -19,6 +21,9 @@
 #include "applicationinfo.h"
 #include "systeminfo.h"
 #include "profiles.h"
+#include "homedirmigration.h"
+#include "activeprofiles.h"
+#include "translationmanager.h"
 #ifdef HAVE_CONFIG
 #include "config.h"
 #endif
@@ -102,22 +107,22 @@ QStringList ApplicationInfo::getCertific
 {
 	QStringList l;
 	l += ApplicationInfo::resourcesDir() + "/certs";
-	l += ApplicationInfo::homeDir() + "/certs";
+	l += ApplicationInfo::homeDir(ApplicationInfo::DataLocation) + "/certs";
 	return l;
 }
 
 QStringList ApplicationInfo::dataDirs()
 {
-	const static QStringList dirs = QStringList() << ":" << "." << homeDir()
+	const static QStringList dirs = QStringList() << ":" << "." << homeDir(DataLocation)
 												  << resourcesDir();
 	return  dirs;
 }
 
 QString ApplicationInfo::getCertificateStoreSaveDir()
 {
-	QDir certsave(homeDir() + "/certs");
+	QDir certsave(homeDir(DataLocation) + "/certs");
 	if(!certsave.exists()) {
-		QDir home(homeDir());
+		QDir home(homeDir(DataLocation));
 		home.mkdir("certs");
 	}
 
@@ -183,63 +188,107 @@ QString ApplicationInfo::libDir()
   * unix+mac: $HOME/.psi
   * environment variable "PSIDATADIR" overrides
   */
-QString ApplicationInfo::homeDir()
+QString ApplicationInfo::homeDir(ApplicationInfo::HomedirType type)
 {
-	// Try the environment override first
-	char *p = getenv("PSIDATADIR");
-	if(p) {
-		return p;
-	}
+	static QString configDir_;
+	static QString dataDir_;
+	static QString cacheDir_;
+
+	if (configDir_.isEmpty()) {
+		// Try the environment override first
+		configDir_ = QString::fromLocal8Bit(getenv("PSIPLUSDATADIR"));
+
+		if (configDir_.isEmpty()) {
+#if defined Q_WS_WIN
+			QString base;
+			if (((PsiApplication *)qApp)->portableBase().isEmpty()) {
+				base = QString::fromLocal8Bit(getenv("appdata"));
+			}
+			else {
+				base = ((PsiApplication *)qApp)->portableBase();
+			}
+			QDir configDir(base + "/" + name());
+			QDir cacheDir(configDir);
+			QDir dataDir(configDir);
+#elif defined Q_WS_MAC
+			QDir configDir(QDir::homePath() + "/Library/Application Support/" + name());
+			QDir cacheDir(QDir::homePath() + "/Library/Caches/" + name());
+			QDir dataDir(configDir);
+#elif defined Q_WS_X11
+			QString XdgConfigHome = QString::fromLocal8Bit(getenv("XDG_CONFIG_HOME"));
+			QString XdgDataHome = QString::fromLocal8Bit(getenv("XDG_DATA_HOME"));
+			QString XdgCacheHome = QString::fromLocal8Bit(getenv("XDG_CACHE_HOME"));
+			if (XdgConfigHome.isEmpty()) {
+				XdgConfigHome = QDir::homePath() + "/.config";
+			}
+			if (XdgDataHome.isEmpty()) {
+				XdgDataHome = QDir::homePath() + "/.local/share";
+			}
+			if (XdgCacheHome.isEmpty()) {
+				XdgCacheHome = QDir::homePath() + "/.cache";
+			}
+			QDir configDir(XdgConfigHome + "/" + name());
+			QDir dataDir(XdgDataHome + "/" + name());
+			QDir cacheDir(XdgCacheHome + "/" + name());
+#endif
+			configDir_ = configDir.path();
+			cacheDir_ = cacheDir.path();
+			dataDir_ = dataDir.path();
+
+			// To prevent from multiple startup of import  wizard
+			if (ActiveProfiles::instance()->isActive("import_wizard")) {
+				exit(0);
+			}
 
-#if defined(Q_WS_X11)
-	QDir proghome(QDir::homePath() + "/.psi");
-	if(!proghome.exists()) {
-		QDir home = QDir::home();
-		home.mkdir(".psi");
-		chmod(QFile::encodeName(proghome.path()), 0700);
-	}
-	return proghome.path();
-#elif defined(Q_WS_WIN)
-	QString base = ((PsiApplication *)qApp)->portableBase();
+			if (!configDir.exists() && !dataDir.exists() && !cacheDir.exists()) {
+				HomeDirMigration dlg;
 
-	if (base.isEmpty()) {
-		// Windows 9x
-		if(QDir::homePath() == QDir::rootPath()) {
-			base = ".";
+				if (dlg.checkOldHomeDir()) {
+					ActiveProfiles::instance()->setThisProfile("import_wizard");
+					QSettings s(dlg.oldHomeDir() + "/psirc", QSettings::IniFormat);
+					QString lastLang = s.value("last_lang", QString()).toString();
+					if(lastLang.isEmpty()) {
+						lastLang = QLocale().name().section('_', 0, 0);
+					}
+					TranslationManager::instance()->loadTranslation(lastLang);
+					dlg.exec();
+					ActiveProfiles::instance()->unsetThisProfile();
+				}
+			}
+			if (!dataDir.exists()) {
+				dataDir.mkpath(".");
+			}
+			if (!cacheDir.exists()) {
+				cacheDir.mkpath(".");
+			}
 		}
-		// Windows NT/2K/XP variant
 		else {
-			base = QDir::homePath();
+			cacheDir_ = configDir_;
+			dataDir_ = configDir_;
 		}
 	}
-	// no trailing slash
-	if(base.at(base.length()-1) == '/') {
-		base.truncate(base.length()-1);
-	}
 
-	QDir proghome(base + "/PsiData");
-	if(!proghome.exists()) {
-		QDir home(base);
-		home.mkdir("PsiData");
-	}
+	QString ret;
+	switch(type) {
+	case ApplicationInfo::ConfigLocation:
+		ret = configDir_;
+		break;
 
-	return proghome.path();
-#elif defined(Q_WS_MAC)
-	QDir proghome(QDir::homePath() + "/.psi");
-	if(!proghome.exists()) {
-		QDir home = QDir::home();
-		home.mkdir(".psi");
-		chmod(QFile::encodeName(proghome.path()), 0700);
-	}
+	case ApplicationInfo::DataLocation:
+		ret = dataDir_;
+		break;
 
-	return proghome.path();
-#endif
+	case ApplicationInfo::CacheLocation:
+		ret = cacheDir_;
+		break;
+	}
+	return ret;
 }
 
-QString ApplicationInfo::makeSubhomePath(const QString &path)
+QString ApplicationInfo::makeSubhomePath(const QString &path, ApplicationInfo::HomedirType type)
 {
 	if (path.indexOf("..") == -1) { // ensure its in home dir
-		QDir dir(homeDir() + "/" + path);
+		QDir dir(homeDir(type) + "/" + path);
 		if (!dir.exists()) {
 			dir.mkpath(".");
 		}
@@ -248,10 +297,10 @@ QString ApplicationInfo::makeSubhomePath
 	return QString();
 }
 
-QString ApplicationInfo::makeSubprofilePath(const QString &path)
+QString ApplicationInfo::makeSubprofilePath(const QString &path, ApplicationInfo::HomedirType type)
 {
 	if (path.indexOf("..") == -1) { // ensure its in profile dir
-		QDir dir(pathToProfile(activeProfile) + "/" + path);
+		QDir dir(pathToProfile(activeProfile, type) + "/" + path);
 		if (!dir.exists()) {
 			dir.mkpath(".");
 		}
@@ -262,27 +311,27 @@ QString ApplicationInfo::makeSubprofileP
 
 QString ApplicationInfo::historyDir()
 {
-	return makeSubprofilePath("history");
+	return makeSubprofilePath("history", ApplicationInfo::DataLocation);
 }
 
 QString ApplicationInfo::vCardDir()
 {
-	return makeSubprofilePath("vcard");
+	return makeSubprofilePath("vcard", ApplicationInfo::CacheLocation);
 }
 
 QString ApplicationInfo::bobDir()
 {
-	return makeSubhomePath("bob");
+	return makeSubhomePath("bob", ApplicationInfo::CacheLocation);
 }
 
-QString ApplicationInfo::currentProfileDir()
+QString ApplicationInfo::currentProfileDir(ApplicationInfo::HomedirType type)
 {
-	return pathToProfile(activeProfile);
+	return pathToProfile(activeProfile, type);
 }
 
-QString ApplicationInfo::profilesDir()
+QString ApplicationInfo::profilesDir(ApplicationInfo::HomedirType type)
 {
-	return makeSubhomePath("profiles");
+	return makeSubhomePath("profiles", type);
 }
 
 QString ApplicationInfo::desktopFile()
--- git.orig/src/applicationinfo.h
+++ git/src/applicationinfo.h
@@ -7,6 +7,12 @@ class QStringList;
 class ApplicationInfo
 {
 public:
+	enum HomedirType {
+		ConfigLocation,
+		DataLocation,
+		CacheLocation
+	};
+
 	// Version info
 	static QString name();
 	static QString version();
@@ -19,16 +25,16 @@ public:
 	static QString getAppCastURL();
 
 	// Directories
-	static QString homeDir();
+	static QString homeDir(HomedirType type);
 	static QString resourcesDir();
 	static QString libDir();
-	static QString profilesDir();
-	static QString makeSubhomePath(const QString &);
-	static QString makeSubprofilePath(const QString &);
+	static QString profilesDir(HomedirType type);
+	static QString makeSubhomePath(const QString &, HomedirType type);
+	static QString makeSubprofilePath(const QString &, HomedirType type);
 	static QString historyDir();
 	static QString vCardDir();
 	static QString bobDir();
-	static QString currentProfileDir();
+	static QString currentProfileDir(HomedirType type);
 	static QStringList getCertificateStoreDirs();
 	static QString getCertificateStoreSaveDir();
 	static QStringList dataDirs();
--- git.orig/src/avatars.cpp
+++ git/src/avatars.cpp
@@ -712,9 +712,9 @@ void AvatarFactory::newMucItem(const Jid
 
 QString AvatarFactory::getManualDir()
 {
-	QDir avatars(pathToProfile(activeProfile) + "/pictures");
+	QDir avatars(pathToProfile(activeProfile, ApplicationInfo::DataLocation) + "/pictures");
 	if (!avatars.exists()) {
-		QDir profile(pathToProfile(activeProfile));
+		QDir profile(pathToProfile(activeProfile, ApplicationInfo::DataLocation));
 		profile.mkdir("pictures");
 	}
 	return avatars.path();
@@ -722,9 +722,9 @@ QString AvatarFactory::getManualDir()
 
 QString AvatarFactory::getCacheDir()
 {
-	QDir avatars(ApplicationInfo::homeDir() + "/avatars");
+	QDir avatars(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation) + "/avatars");
 	if (!avatars.exists()) {
-		QDir home(ApplicationInfo::homeDir());
+		QDir home(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation));
 		home.mkdir("avatars");
 	}
 	return avatars.path();
--- /dev/null
+++ git/src/homedirmigration.cpp
@@ -0,0 +1,332 @@
+/*
+ * homedirmigration.cpp
+ * Copyright (C) 2011  Romanov Ivan <drizt@land.ru>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#include <QSignalMapper>
+#include <QQueue>
+#include <QPair>
+#include <QMessageBox>
+#include <QThread>
+#include <QCloseEvent>
+#include <QRegExp>
+
+#include "applicationinfo.h"
+#include "homedirmigration.h"
+#include "ui_homedirmigration.h"
+#if defined Q_WS_WIN
+#include "psiapplication.h"
+#endif
+
+class Thread : public QThread
+{
+public:
+	Thread(HomeDirMigration::Choice choice, QDir oldHomeDir, QDir configDir, QDir dataDir, QDir cacheDir, QObject *parent = NULL)
+		: QThread(parent)
+		, choice_(choice)
+		, oldHomeDir_(oldHomeDir)
+		, configDir_(configDir)
+		, dataDir_(dataDir)
+		, cacheDir_(cacheDir)
+		, stop_(false)
+	{
+	}
+
+	bool result() const
+	{
+		return result_;
+	}
+
+	void stop()
+	{
+		stop_ = true;
+	}
+
+protected:
+	void run()
+	{
+		switch((HomeDirMigration::Choice)choice_) {
+		case HomeDirMigration::Copy:
+			result_ = copyFolder();
+			if (!result_) {
+				removeFolder(configDir_.path());
+#if defined Q_WS_X11
+				removeFolder(dataDir_.path());
+#endif
+#if defined Q_WS_X11 || defined Q_WS_MAC
+				removeFolder(cacheDir_.path());
+#endif
+			}
+			break;
+
+		case HomeDirMigration::Move:
+			result_ = copyFolder();
+			if (result_) {
+				removeFolder(oldHomeDir_.path());
+			}
+			else {
+				removeFolder(configDir_.path());
+#if defined Q_WS_X11
+				removeFolder(dataDir_.path());
+#endif
+#if defined Q_WS_X11 || defined Q_WS_MAC
+				removeFolder(cacheDir_.path());
+#endif
+			}
+			break;
+
+		case HomeDirMigration::Nothing:
+			break;
+		}
+	}
+
+	void removeFolder(const QString& folder)
+	{
+		QDir dir(folder);
+		QFileInfoList infoList = dir.entryInfoList(QDir::Files | QDir::Hidden);
+		QStringList files;
+		foreach(QFileInfo info, infoList) {
+			if(info.isFile() && info.isWritable() && info.isReadable())
+				files << info.fileName();
+		}
+
+		// Remove all file in current directory
+		QStringList::Iterator itFile = files.begin();
+		while (itFile != files.end()) {
+			QFile file(folder + "/" + *itFile);
+			file.remove();
+			itFile++;
+		}
+
+		// Get list of all subdirectories
+		infoList = dir.entryInfoList(QDir::AllDirs | QDir::NoDotAndDotDot | QDir::Hidden);
+		QStringList dirs;
+		foreach(QFileInfo info, infoList) {
+			if(info.isDir())
+				dirs << info.fileName();
+		}
+		QStringList::Iterator itDir = dirs.begin();
+		while (itDir != dirs.end()) {
+			if (*itDir != "." && *itDir != "..") {
+				// and invoke remove for each
+				removeFolder(folder + "/" + *itDir);
+			}
+			itDir++;
+		}
+
+		// Remove myself
+		// Any dir always have two subdir as dotdir and dotanddotdir
+		if (dir.count() == 2) {
+			dir.rmdir(folder);
+		}
+	}
+
+	bool copyFolder()
+	{
+		QQueue<QString> queue;
+
+		queue.enqueue("");
+
+		while (!queue.isEmpty()) {
+			QString srcDirName = queue.dequeue();
+			QDir srcDir(oldHomeDir_.path() + "/" + srcDirName);
+			if (!srcDir.exists()) {
+				continue;
+			}
+
+			QFileInfoList infoList = srcDir.entryInfoList(QDir::Files | QDir::Hidden);
+			QStringList files;
+			foreach(QFileInfo info, infoList) {
+				if(info.isFile() && info.isReadable())
+					files << info.fileName();
+			}
+
+			for (int i = 0; i < files.count(); i++) {
+				if (stop_) {
+					return false;
+				}
+				QString srcFileName;
+				srcFileName = srcDirName + "/" + files[i];
+
+				QString dstDirName;
+				QRegExp settingsXp("^/psirc$|^/profiles/\\w*/accounts.xml$|^/profiles/\\w*/accounts.xml.backup$|"
+								   "^/profiles/\\w*/options.xml$|^/profiles/\\w*/options.xml.backup$|^/profiles/\\w*/mucskipautojoin.txt$");
+
+				QRegExp cacheXp("^/tmp-contentdownloader/.*$|^/tmp-sounds/.*$|^/tmp-pics/.*$|"
+								"^/bob/.*|^/avatars/.*$|^/profiles/\\w*/vcard/.*$|^/caps.xml$|^/tune$");
+
+				if (srcFileName.contains(settingsXp)) {
+					dstDirName = configDir_.path() + "/" + srcDirName;
+				}
+				else if (srcFileName.contains(cacheXp)) {
+					dstDirName = cacheDir_.path() + "/" + srcDirName;
+				}
+				else {
+					dstDirName = dataDir_.path() + "/" + srcDirName;
+				}
+
+				QDir dstDir(dstDirName);
+				if (!dstDir.exists()) {
+					dstDir.mkpath(".");
+				}
+
+				QString destFileName = dstDirName + "/" + files[i];
+				if (!QFile::copy(oldHomeDir_.path() + srcFileName, destFileName)) {
+					qFatal("Critical error while importing Psi/Psi+ profile");
+					return false;
+				}
+			}
+
+			infoList = srcDir.entryInfoList(QDir::AllDirs | QDir::NoDotAndDotDot | QDir::Hidden);
+			QStringList dirs;
+			foreach(QFileInfo info, infoList)
+			{
+				if(info.isDir())
+					dirs << info.fileName();
+			}
+
+			for (int i = 0; i < dirs.count(); i++) {
+				queue.enqueue(srcDirName + "/" + dirs[i]);
+			}
+		}
+		return true;
+	}
+
+	HomeDirMigration::Choice choice_;
+	QDir oldHomeDir_;
+	QDir configDir_;
+	QDir dataDir_;
+	QDir cacheDir_;
+	bool result_;
+	bool stop_;
+};
+
+HomeDirMigration::HomeDirMigration(QWidget *parent)
+	: QDialog(parent, Qt::CustomizeWindowHint | Qt::WindowTitleHint |
+			  Qt::WindowSystemMenuHint | Qt::WindowCloseButtonHint | Qt::WindowStaysOnTopHint)
+	, ui(new Ui::HomeDirMigration)
+	, configDir_(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation))
+	, dataDir_(ApplicationInfo::homeDir(ApplicationInfo::DataLocation))
+	, cacheDir_(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation))
+	, choice_(Copy)
+	, thread_(NULL)
+{
+}
+
+bool HomeDirMigration::checkOldHomeDir()
+{
+#if defined Q_WS_X11 || defined Q_WS_MAC
+	QString base = QDir::homePath();
+	// First it need to check ~/.psi-plus folder for Fedora users.
+	oldHomeDir_.setPath(base + "/.psi-plus");
+
+	if (!oldHomeDir_.exists()) {
+		oldHomeDir_.setPath(base + "/.psi");
+	}
+#elif defined Q_WS_WIN
+	QString base = ((PsiApplication *)qApp)->portableBase();
+	if (base.isEmpty()) {
+		// Windows 9x
+		if(QDir::homePath() == QDir::rootPath()) {
+			base = ".";
+		}
+		// Windows NT/2K/XP variant
+		else {
+			base = QDir::homePath();
+		}
+	}
+	// no trailing slash
+	base = QDir::cleanPath(base);
+
+	oldHomeDir_.setPath(base + "/PsiData");
+#endif
+	return oldHomeDir_.exists();
+}
+
+QString HomeDirMigration::oldHomeDir() const
+{
+	return oldHomeDir_.path();
+}
+
+void HomeDirMigration::threadFinish()
+{
+	ui->busy->stop();
+	QDialog::accept();
+}
+
+int HomeDirMigration::exec()
+{
+	ui->setupUi(this);
+
+	adjustSize();
+	setFixedSize(size());
+	QSignalMapper *mapper = new QSignalMapper(this);
+
+	// Mapping to copy radio button
+	connect(ui->rbCopy, SIGNAL(clicked()), mapper, SLOT(map()));
+	mapper->setMapping(ui->rbCopy, Copy);
+
+	// Mapping to move radio button
+	connect(ui->rbMove, SIGNAL(clicked()), mapper, SLOT(map()));
+	mapper->setMapping(ui->rbMove, Move);
+
+	// Mapping to nothing radio button
+	connect(ui->rbNothing, SIGNAL(clicked()), mapper, SLOT(map()));
+	mapper->setMapping(ui->rbNothing, Nothing);
+
+	connect(mapper, SIGNAL(mapped(int)), SLOT(setChoice(int)));
+
+	return QDialog::exec();
+}
+
+void HomeDirMigration::closeEvent(QCloseEvent *event)
+{
+	event->ignore();
+	if (!thread_) {
+		exit(0);
+	}
+	else {
+		thread_->stop();
+		thread_->wait();
+		exit(0);
+	}
+}
+
+void HomeDirMigration::accept()
+{
+	if (choice_ == Copy || choice_ == Move) {
+		thread_ = new Thread(choice_, oldHomeDir_, configDir_, dataDir_, cacheDir_, this);
+		connect(thread_, SIGNAL(finished()), SLOT(threadFinish()));
+		thread_->start();
+		ui->busy->start();
+		setEnabled(false);
+	}
+	else {
+		QDialog::accept();
+	}
+}
+
+void HomeDirMigration::setChoice(int choice)
+{
+	choice_ = (Choice)choice;
+}
+
+HomeDirMigration::~HomeDirMigration()
+{
+	delete ui;
+}
--- /dev/null
+++ git/src/homedirmigration.h
@@ -0,0 +1,70 @@
+/*
+ * homedirmigration.h
+ * Copyright (C) 2011  Romanov Ivan aka taurus <drizt@land.ru>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#ifndef HOMEDIRMIGRATION_H
+#define HOMEDIRMIGRATION_H
+
+#include <QDialog>
+#include <QDir>
+
+namespace Ui { class HomeDirMigration; }
+
+class Thread;
+
+class HomeDirMigration : public QDialog
+{
+	Q_OBJECT
+
+public:
+	enum Choice {
+		Copy,
+		Move,
+		Nothing
+	};
+
+	explicit HomeDirMigration(QWidget *parent = 0);
+	~HomeDirMigration();
+
+	bool checkOldHomeDir();
+	QString oldHomeDir() const;
+
+public slots:
+	void threadFinish();
+	int exec();
+
+protected:
+	void closeEvent(QCloseEvent *event);
+
+private slots:
+	void accept();
+	void setChoice(int choose);
+
+private:
+	Ui::HomeDirMigration *ui;
+	QDir oldHomeDir_;
+	QDir configDir_;
+	QDir dataDir_;
+	QDir cacheDir_;
+
+	Choice choice_;
+	Thread *thread_;
+};
+
+#endif // HOMEDIRMIGRATION_H
--- /dev/null
+++ git/src/homedirmigration.ui
@@ -0,0 +1,132 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>HomeDirMigration</class>
+ <widget class="QDialog" name="HomeDirMigration">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>270</width>
+    <height>182</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Psi+ Import Wizard</string>
+  </property>
+  <property name="windowIcon">
+   <iconset>
+    <normaloff>:/iconsets/system/default/psiplus/logo_16.png</normaloff>:/iconsets/system/default/psiplus/logo_16.png</iconset>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout">
+   <item>
+    <widget class="QLabel" name="lbQuestion">
+     <property name="text">
+      <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Liberation Serif'; font-size:12pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-weight:600;&quot;&gt;Import Settings and Data&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="Line" name="line">
+     <property name="orientation">
+      <enum>Qt::Horizontal</enum>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="QRadioButton" name="rbCopy">
+     <property name="toolTip">
+      <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Liberation Serif'; font-size:12pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:medium; color:#1a1a1a;&quot;&gt;Copy the existing profile to the new directory required to run Psi+. The old profile will not be removed. You can remove it manually later.&lt;br/&gt;&lt;/span&gt;&lt;span style=&quot; font-size:medium; font-weight:600; color:#1a1a1a;&quot;&gt;(Recommended)&lt;/span&gt;&lt;span style=&quot; font-size:medium; color:#1a1a1a;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+     <property name="text">
+      <string>Import Psi profile</string>
+     </property>
+     <property name="checked">
+      <bool>true</bool>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="QRadioButton" name="rbMove">
+     <property name="toolTip">
+      <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Liberation Serif'; font-size:12pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:medium; color:#1a1a1a;&quot;&gt;Move the existing profile to the new directory. The old profile will be removed automatically when done.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+     <property name="text">
+      <string>Import Psi profile and remove it</string>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="QRadioButton" name="rbNothing">
+     <property name="toolTip">
+      <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Liberation Serif'; font-size:12pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:medium; color:#1a1a1a;&quot;&gt;Create a new Psi+ profile. The old profile will not be removed, but you will be unable to choose it.&lt;br/&gt;&lt;/span&gt;&lt;span style=&quot; font-size:medium; font-weight:600; color:#1a1a1a;&quot;&gt;(Not recommended)&lt;/span&gt;&lt;span style=&quot; font-size:medium; color:#1a1a1a;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+     <property name="text">
+      <string>Create new profile</string>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <layout class="QHBoxLayout" name="horizontalLayout_2">
+     <item>
+      <widget class="BusyWidget" name="busy" native="true"/>
+     </item>
+     <item>
+      <widget class="QDialogButtonBox" name="bxOkCancel">
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="standardButtons">
+        <set>QDialogButtonBox::Ok</set>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>BusyWidget</class>
+   <extends>QWidget</extends>
+   <header>busywidget.h</header>
+   <container>1</container>
+  </customwidget>
+ </customwidgets>
+ <resources>
+  <include location="../iconsets.qrc"/>
+ </resources>
+ <connections>
+  <connection>
+   <sender>bxOkCancel</sender>
+   <signal>accepted()</signal>
+   <receiver>HomeDirMigration</receiver>
+   <slot>accept()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>137</x>
+     <y>149</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>134</x>
+     <y>90</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+</ui>
--- git.orig/src/main.cpp
+++ git/src/main.cpp
@@ -94,7 +94,7 @@ PsiMain::PsiMain(const QMap<QString, QSt
 	lastLang = sUser.value("last_lang").toString();
 	autoOpen = sUser.value("auto_open", QVariant(false)).toBool();
 
-	QSettings s(ApplicationInfo::homeDir() + "/psirc", QSettings::IniFormat);
+	QSettings s(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation) + "/psirc", QSettings::IniFormat);
 	lastProfile = s.value("last_profile", lastProfile).toString();
 	lastLang = s.value("last_lang", lastLang).toString();
 	autoOpen = s.value("auto_open", autoOpen).toBool();
@@ -104,7 +104,7 @@ PsiMain::~PsiMain()
 {
 	delete pcon;
 
-	QSettings s(ApplicationInfo::homeDir() + "/psirc", QSettings::IniFormat);
+	QSettings s(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation) + "/psirc", QSettings::IniFormat);
 	s.setValue("last_profile", lastProfile);
 	//s.setValue("last_lang", lastLang);
 	s.setValue("auto_open", autoOpen);
@@ -272,7 +272,7 @@ void PsiMain::chooseProfile()
 	// only set lastProfile if the user opened it
 	lastProfile = str;
 
-	QSettings s(ApplicationInfo::homeDir() + "/psirc", QSettings::IniFormat);
+	QSettings s(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation) + "/psirc", QSettings::IniFormat);
 	s.setValue("last_lang", lastLang);
 
 	activeProfile = str;
@@ -470,6 +470,7 @@ int main(int argc, char *argv[])
 
 	// it must be initialized first in order for ApplicationInfo::resourcesDir() to work
 	PsiApplication app(argc, argv);
+	QApplication::setApplicationName(ApplicationInfo::name());
 
 	//Fix encoding after QApplication initialization
 	for(QMap<QString, QString>::iterator i = cmdline.begin(); i != cmdline.end(); ++i) {
@@ -483,7 +484,7 @@ int main(int argc, char *argv[])
 	}
 #endif
 	QApplication::addLibraryPath(ApplicationInfo::resourcesDir());
-	QApplication::addLibraryPath(ApplicationInfo::homeDir());
+	QApplication::addLibraryPath(ApplicationInfo::homeDir(ApplicationInfo::DataLocation));
 	QApplication::setQuitOnLastWindowClosed(false);
 
 #ifdef Q_WS_MAC
--- git.orig/src/options/opt_application.cpp
+++ git/src/options/opt_application.cpp
@@ -134,7 +134,7 @@ void OptionsTabApplication::applyOptions
 		TranslationManager::instance()->loadTranslation(itemData);
 		QMessageBox::information(0, tr("Information"), tr("Some of the options you changed will only have full effect upon restart."));
 	}
-	QSettings s(ApplicationInfo::homeDir() + "/psirc", QSettings::IniFormat);
+	QSettings s(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation) + "/psirc", QSettings::IniFormat);
 	s.setValue("last_lang", itemData);
 
 	//Auto-load
@@ -191,7 +191,7 @@ void OptionsTabApplication::restoreOptio
 		d->cb_lang->addItem(vList.get(item));
 	}
 	QString curLang = TranslationManager::instance()->currentLanguage();
-	QSettings s(ApplicationInfo::homeDir() + "/psirc", QSettings::IniFormat);
+	QSettings s(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation) + "/psirc", QSettings::IniFormat);
 	QString curL = s.value("last_lang", "").toString();
 	if (curL.isEmpty())
 		d->cb_lang->setCurrentIndex( 0 );
--- git.orig/src/pluginhost.cpp
+++ git/src/pluginhost.cpp
@@ -917,9 +917,9 @@ QString PluginHost::appOsName()
 	return ApplicationInfo::osName();
 }
 
-QString PluginHost::appHomeDir()
+QString PluginHost::appHomeDir(ApplicationInfoAccessingHost::HomedirType type)
 {
-	return ApplicationInfo::homeDir();
+	return ApplicationInfo::homeDir((ApplicationInfo::HomedirType)type);
 }
 
 QString PluginHost::appResourcesDir()
@@ -932,9 +932,9 @@ QString PluginHost::appLibDir()
 	return ApplicationInfo::libDir();
 }
 
-QString PluginHost::appProfilesDir()
+QString PluginHost::appProfilesDir(ApplicationInfoAccessingHost::HomedirType type)
 {
-	return ApplicationInfo::profilesDir();
+	return ApplicationInfo::profilesDir((ApplicationInfo::HomedirType)type);
 }
 
 QString PluginHost::appHistoryDir()
@@ -942,9 +942,9 @@ QString PluginHost::appHistoryDir()
 	return ApplicationInfo::historyDir();
 }
 
-QString PluginHost::appCurrentProfileDir()
+QString PluginHost::appCurrentProfileDir(ApplicationInfoAccessingHost::HomedirType type)
 {
-	return ApplicationInfo::currentProfileDir();
+	return ApplicationInfo::currentProfileDir((ApplicationInfo::HomedirType)type);
 }
 
 QString PluginHost::appVCardDir()
--- git.orig/src/pluginhost.h
+++ git/src/pluginhost.h
@@ -13,6 +13,7 @@
 #include <QPointer>
 #include <QTextEdit>
 
+#include "applicationinfo.h"
 #include "userlist.h"
 #include "iconset.h"
 #include "stanzasendinghost.h"
@@ -123,12 +124,12 @@ public:
 	QString appCapsNode();
 	QString appCapsVersion();
 	QString appOsName();
-	QString appHomeDir();
+	QString appHomeDir(HomedirType type);
 	QString appResourcesDir();
 	QString appLibDir();
-	QString appProfilesDir();
+	QString appProfilesDir(HomedirType type);
 	QString appHistoryDir();
-	QString appCurrentProfileDir();
+	QString appCurrentProfileDir(HomedirType type);
 	QString appVCardDir();
 
 	//AccountInfoAcsessingHost
--- git.orig/src/pluginmanager.cpp
+++ git/src/pluginmanager.cpp
@@ -61,7 +61,7 @@ static QStringList pluginDirs()
 {
 	QStringList l;
 	l += ApplicationInfo::resourcesDir() + "/plugins";
-	l += ApplicationInfo::homeDir() + "/plugins";
+	l += ApplicationInfo::homeDir(ApplicationInfo::DataLocation) + "/plugins";
 #if defined(Q_OS_UNIX)
 	l += ApplicationInfo::libDir() + "/plugins";
 #endif
--- git.orig/src/plugins/include/applicationinfoaccessinghost.h
+++ git/src/plugins/include/applicationinfoaccessinghost.h
@@ -12,6 +12,11 @@ struct Proxy {
 class ApplicationInfoAccessingHost
 {
 public:
+	enum HomedirType {
+		ConfigLocation,
+		DataLocation,
+		CacheLocation
+	};
 	virtual ~ApplicationInfoAccessingHost() {}
 
 	// Version info
@@ -22,12 +27,12 @@ public:
 	virtual QString appOsName() = 0;
 
 	// Directories
-	virtual QString appHomeDir() = 0;
+	virtual QString appHomeDir(HomedirType type) = 0;
 	virtual QString appResourcesDir() = 0;
 	virtual QString appLibDir() = 0;
-	virtual QString appProfilesDir() = 0;
+	virtual QString appProfilesDir(HomedirType type) = 0;
 	virtual QString appHistoryDir() = 0;
-	virtual QString appCurrentProfileDir() = 0;
+	virtual QString appCurrentProfileDir(HomedirType type) = 0;
 	virtual QString appVCardDir() = 0;
 
 	virtual Proxy getProxyFor(const QString& obj) = 0;
--- git.orig/src/plugins/psiplugin.pri
+++ git/src/plugins/psiplugin.pri
@@ -2,7 +2,7 @@ TEMPLATE = lib
 CONFIG += plugin
 QT += xml
 
-target.path = $$(HOME)/.psi/plugins
+target.path = $$(HOME)/.local/share/Psi+/plugins
 INSTALLS += target
 
 include(plugins.pri)
--- git.orig/src/profiledlg.cpp
+++ git/src/profiledlg.cpp
@@ -260,7 +260,15 @@ void ProfileManageDlg::slotProfileDelete
 	if(x == -1)
 		return;
 	QString name = lbx_profiles->item(x)->text();
-	QString path = ApplicationInfo::profilesDir() + "/" + name;
+
+	QStringList paths;
+	paths << ApplicationInfo::profilesDir(ApplicationInfo::ConfigLocation) + "/" + name;
+	if(!paths.contains(ApplicationInfo::profilesDir(ApplicationInfo::DataLocation) + "/" + name)) {
+		paths << ApplicationInfo::profilesDir(ApplicationInfo::DataLocation) + "/" + name;
+	}
+	if(!paths.contains(ApplicationInfo::profilesDir(ApplicationInfo::CacheLocation) + "/" + name)) {
+		paths << ApplicationInfo::profilesDir(ApplicationInfo::CacheLocation) + "/" + name;
+	}
 
 	// prompt first
 	int r = QMessageBox::warning(this,
@@ -280,14 +288,14 @@ void ProfileManageDlg::slotProfileDelete
 		tr(
 		"<qt>As a precaution, you are being asked one last time if this is what you really want.  "
 		"The following folder will be deleted!<br><br>\n"
-		"&nbsp;&nbsp;<b>%1</b><br><br>\n"
+		"<b>%1</b><br><br>\n"
 		"Proceed?"
-		).arg(path),
+		).arg(paths.join("\n")),
 		tr("&No"),
 		tr("&Yes"));
 
 	if(r == 1) {
-		if(!profileDelete(path)) {
+		if(!profileDelete(paths)) {
 			QMessageBox::critical(this, CAP("Error"), tr("Unable to delete the folder completely.  Ensure you have the proper permission."));
 			return;
 		}
@@ -360,7 +368,7 @@ void ProfileNewDlg::slotCreate()
 	
 	o.setOption("options.messages.default-outgoing-message-type" ,rb_message->isChecked() ? "message": "chat");
 	o.setOption("options.ui.emoticons.use-emoticons" ,ck_useEmoticons->isChecked());
-	o.save(pathToProfile(name) + "/options.xml");
+	o.save(pathToProfile(name, ApplicationInfo::ConfigLocation) + "/options.xml");
 	
 	accept();
 }
--- git.orig/src/profiles.h
+++ git/src/profiles.h
@@ -33,6 +33,7 @@
 #include "xmpp_clientstream.h"
 #include "xmpp_roster.h"
 #include "xmpp_jid.h"
+#include "applicationinfo.h"
 
 class OptionsTree;
 
@@ -122,13 +123,13 @@ private:
 	lateMigrationOptions lateMigrationData;
 };
 
-QString pathToProfile(const QString &);
+QString pathToProfile(const QString &, ApplicationInfo::HomedirType type);
 QString pathToProfileConfig(const QString &);
 QStringList getProfilesList();
 bool profileExists(const QString &);
 bool profileNew(const QString &);
 bool profileRename(const QString &, const QString &);
-bool profileDelete(const QString &);
+bool profileDelete(const QStringList &);
 
 extern QString activeProfile;
 
--- git.orig/src/psi_profiles.cpp
+++ git/src/psi_profiles.cpp
@@ -1388,21 +1388,21 @@ void OptionsMigration::lateMigration()
 }
 
 
-QString pathToProfile(const QString &name)
+QString pathToProfile(const QString &name, ApplicationInfo::HomedirType type)
 {
-	return ApplicationInfo::profilesDir() + "/" + name;
+	return ApplicationInfo::profilesDir(type) + "/" + name;
 }
 
 QString pathToProfileConfig(const QString &name)
 {
-	return pathToProfile(name) + "/config.xml";
+	return pathToProfile(name, ApplicationInfo::ConfigLocation) + "/config.xml";
 }
 
 QStringList getProfilesList()
 {
 	QStringList list;
 
-	QDir d(ApplicationInfo::profilesDir());
+	QDir d(ApplicationInfo::profilesDir(ApplicationInfo::ConfigLocation));
 	if(!d.exists())
 		return list;
 
@@ -1446,17 +1446,34 @@ bool profileNew(const QString &name)
 	}
 
 	// make it
-	QDir d(ApplicationInfo::profilesDir());
-	if(!d.exists())
+	QDir configProfilesDir(ApplicationInfo::profilesDir(ApplicationInfo::ConfigLocation));
+	if(!configProfilesDir.exists())
 		return false;
-	QDir p(ApplicationInfo::profilesDir() + "/" + name);
-	if(!p.exists()) {
-		if (!d.mkdir(name))
+	QDir configCurrentProfileDir(configProfilesDir.path() + "/" + name);
+	if(!configCurrentProfileDir.exists()) {
+		if (!configProfilesDir.mkdir(name))
 		return false;
 	}
 
-	p.mkdir("history");
-	p.mkdir("vcard");
+	QDir dataProfilesDir(ApplicationInfo::profilesDir(ApplicationInfo::DataLocation));
+	if(!dataProfilesDir.exists())
+		return false;
+	QDir dataCurrentProfileDir(dataProfilesDir.path() + "/" + name);
+	if(!dataCurrentProfileDir.exists()) {
+		if (!dataProfilesDir.mkdir(name))
+		return false;
+	}
+	dataCurrentProfileDir.mkdir("history");
+
+	QDir cacheProfilesDir(ApplicationInfo::profilesDir(ApplicationInfo::CacheLocation));
+	if(!cacheProfilesDir.exists())
+		return false;
+	QDir cacheCurrentProfileDir(cacheProfilesDir.path() + "/" + name);
+	if(!cacheCurrentProfileDir.exists()) {
+		if (!cacheProfilesDir.mkdir(name))
+		return false;
+	}
+	cacheCurrentProfileDir.mkdir("vcard");
 
 	return true;
 }
@@ -1469,13 +1486,31 @@ bool profileRename(const QString &oldnam
 			return false;
 	}
 
-	// locate the folder
-	QDir d(ApplicationInfo::profilesDir());
-	if(!d.exists())
-		return false;
-	if(!d.rename(oldname, name))
+	// locate the folders
+	QStringList paths;
+	paths << ApplicationInfo::profilesDir(ApplicationInfo::ConfigLocation);
+	if(!paths.contains(ApplicationInfo::profilesDir(ApplicationInfo::DataLocation))) {
+		paths << ApplicationInfo::profilesDir(ApplicationInfo::DataLocation);
+	}
+	if(!paths.contains(ApplicationInfo::profilesDir(ApplicationInfo::CacheLocation))) {
+		paths << ApplicationInfo::profilesDir(ApplicationInfo::CacheLocation);
+	}
+
+
+	// First we need to check configDir for existing
+	QDir configDir(paths[0]);
+	if(!configDir.exists())
 		return false;
 
+	// and if all ok we may rename it.
+	foreach(QString path, paths) {
+		QDir d(path);
+		if(!d.exists())
+			continue;
+
+		if(!d.rename(oldname, name))
+			return false;
+	}
 	return true;
 }
 
@@ -1506,13 +1541,20 @@ static bool folderRemove(const QDir &_d)
 	return true;
 }
 
-bool profileDelete(const QString &path)
+bool profileDelete(const QStringList &paths)
 {
-	QDir d(path);
-	if(!d.exists())
-		return true;
+	bool ret = true;
+	foreach(QString path, paths) {
+		QDir d(path);
+		if(!d.exists())
+			continue;
 
-	return folderRemove(QDir(path));
+		ret = folderRemove(QDir(path));
+		if(!ret) {
+			break;
+		}
+	}
+	return ret;
 }
 
 QString activeProfile;
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -612,7 +612,7 @@ public:
 
 	QString pathToProfileEvents() const
 	{
-		return pathToProfile(activeProfile) + "/events-" + JIDUtil::encode(acc.id).toLower() + ".xml";
+		return pathToProfile(activeProfile, ApplicationInfo::DataLocation) + "/events-" + JIDUtil::encode(acc.id).toLower() + ".xml";
 	}
 
 	void updateOnlineContactsCount()
@@ -2367,7 +2367,7 @@ void PsiAccount::bookmarksAvailabilityCh
 
 #ifdef GROUPCHAT
 	QSet<QString> joinSkip;
-	QFile file(pathToProfile(activeProfile)+"/mucskipautojoin.txt");
+	QFile file(pathToProfile(activeProfile, ApplicationInfo::ConfigLocation)+"/mucskipautojoin.txt");
 	if (file.exists() && file.open(QIODevice::ReadOnly)) {
 		QTextStream stream(&file);
 		while (!stream.atEnd()) {
--- git.orig/src/psichatviewthemeprovider.cpp
+++ git/src/psichatviewthemeprovider.cpp
@@ -78,7 +78,7 @@ const QStringList PsiChatViewThemeProvid
 	QStringList dirs;
 	dirs << ":";
 	dirs << ".";
-	dirs << ApplicationInfo::homeDir();
+	dirs << ApplicationInfo::homeDir(ApplicationInfo::DataLocation);
 	dirs << ApplicationInfo::resourcesDir();
 
 	QSet<QString> ret;
--- git.orig/src/psicon.cpp
+++ git/src/psicon.cpp
@@ -139,8 +139,8 @@ public:
 	PsiConObject(QObject *parent)
 	: QObject(parent)
 	{
-		QDir p(ApplicationInfo::homeDir());
-		QDir v(ApplicationInfo::homeDir() + "/tmp-sounds");
+		QDir p(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation));
+		QDir v(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation) + "/tmp-sounds");
 		if(!v.exists())
 			p.mkdir("tmp-sounds");
 		Iconset::setSoundPrefs(v.absolutePath(), this, SLOT(playSound(QString)));
@@ -150,8 +150,8 @@ public:
 	~PsiConObject()
 	{
 		// removing temp dirs
-		QDir p(ApplicationInfo::homeDir());
-		QDir v(ApplicationInfo::homeDir() + "/tmp-sounds");
+		QDir p(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation));
+		QDir v(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation) + "/tmp-sounds");
 		folderRemove(v);
 	}
 
@@ -259,7 +259,7 @@ public:
 			}
 		}
 		accountTree.setOption("order", order);
-		QFile accountsFile(pathToProfile( activeProfile ) + "/accounts.xml");	
+		QFile accountsFile(pathToProfile(activeProfile, ApplicationInfo::ConfigLocation) + "/accounts.xml");
 		accountTree.saveOptions(accountsFile.fileName(), "accounts", ApplicationInfo::optionsNS(), ApplicationInfo::version());;
 		
 	}
@@ -398,7 +398,7 @@ bool PsiCon::init()
 	
 	PsiRichText::setAllowedImageDirs(QStringList()
 									 << ApplicationInfo::resourcesDir()
-									 << ApplicationInfo::homeDir());
+									 << ApplicationInfo::homeDir(ApplicationInfo::CacheLocation));
 	
 	// To allow us to upgrade from old hardcoded options gracefully, be careful about the order here
 	PsiOptions *options=PsiOptions::instance();
@@ -442,7 +442,7 @@ bool PsiCon::init()
 		common_smallFontSize = minimumFontSize;
 	FancyLabel::setSmallFontSize( common_smallFontSize );
 	
-	QFile accountsFile(pathToProfile( activeProfile ) + "/accounts.xml");
+	QFile accountsFile(pathToProfile(activeProfile, ApplicationInfo::ConfigLocation) + "/accounts.xml");
 	bool accountMigration = false;	
 	if (!accountsFile.exists()) {
 		accountMigration = true;
@@ -466,7 +466,7 @@ bool PsiCon::init()
 
 	contactUpdatesManager_ = new ContactUpdatesManager(this);
 
-	QDir profileDir( pathToProfile( activeProfile ) );
+	QDir profileDir( pathToProfile(activeProfile, ApplicationInfo::DataLocation) );
 	profileDir.rmdir( "info" ); // remove unused dir
 
 	// Auto updater initialization
@@ -1222,7 +1222,7 @@ void PsiCon::saveAccounts()
 
 void PsiCon::saveCapabilities()
 {
-	QFile file(ApplicationInfo::homeDir() + "/caps.xml");
+	QFile file(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation) + "/caps.xml");
 	d->capsRegistry->save(file);
 }
 
@@ -1879,7 +1879,7 @@ void PsiCon::promptUserToCreateAccount()
 
 QString PsiCon::optionsFile() const
 {
-	return pathToProfile(activeProfile) + "/options.xml";
+	return pathToProfile(activeProfile, ApplicationInfo::ConfigLocation) + "/options.xml";
 }
 
 void PsiCon::forceSavePreferences()
--- git.orig/src/psithemeprovider.cpp
+++ git/src/psithemeprovider.cpp
@@ -36,7 +36,7 @@ QString PsiThemeProvider::themePath(cons
 	QStringList dirs;
 	dirs << ":";
 	dirs << ".";
-	dirs << ApplicationInfo::homeDir();
+	dirs << ApplicationInfo::homeDir(ApplicationInfo::DataLocation);
 	dirs << ApplicationInfo::resourcesDir();
 
 	foreach (QString dir, dirs) {
--- git.orig/src/src.pri
+++ git/src/src.pri
@@ -227,7 +227,8 @@ HEADERS += \
 	$$PWD/coloropt.h \
 	$$PWD/geolocationdlg.h \
 	$$PWD/rosteravatarframe.h \
-	$$PWD/sendbuttonmenu.h
+	$$PWD/sendbuttonmenu.h \
+	$$PWD/homedirmigration.h
 
 
 
@@ -369,7 +370,8 @@ SOURCES += \
 	$$PWD/coloropt.cpp \
 	$$PWD/geolocationdlg.cpp \
 	$$PWD/rosteravatarframe.cpp \
-	$$PWD/sendbuttonmenu.cpp
+	$$PWD/sendbuttonmenu.cpp \
+	$$PWD/homedirmigration.cpp
 
 unix:!macx:!haiku {
 	HEADERS += $$PWD/x11windowsystem.h
@@ -611,7 +613,8 @@ FORMS += \
 	$$PWD/ahcformdlg.ui \
 	$$PWD/geolocation.ui \
 	$$PWD/rosteravatarframe.ui \
-	$$PWD/sendbuttontemplateseditor.ui
+	$$PWD/sendbuttontemplateseditor.ui \
+	$$PWD/homedirmigration.ui
 
 # options dialog
 include($$PWD/options/options.pri)
--- git.orig/src/src.pro
+++ git/src/src.pro
@@ -4,7 +4,7 @@
 
 # Configuration
 TEMPLATE = app
-TARGET    = psi
+TARGET    = psi-plus
 CONFIG  += qt thread x11 
 
 #CONFIG += use_crash
@@ -42,17 +42,17 @@ unix {
 
 	# icons and desktop files
 	dt.path=$$PREFIX/share/applications/
-	dt.files = ../psi.desktop 
+	dt.extra = cp -f ../psi.desktop $(INSTALL_ROOT)$$dt.path/psi-plus.desktop
 	icon1.path=$$PREFIX/share/icons/hicolor/16x16/apps
-	icon1.extra = cp -f ../iconsets/system/default/psiplus/logo_16.png $(INSTALL_ROOT)$$icon1.path/psi.png
+	icon1.extra = cp -f ../iconsets/system/default/psiplus/logo_16.png $(INSTALL_ROOT)$$icon1.path/psi-plus.png
 	icon2.path=$$PREFIX/share/icons/hicolor/32x32/apps
-	icon2.extra = cp -f ../iconsets/system/default/psiplus/logo_32.png $(INSTALL_ROOT)$$icon2.path/psi.png
+	icon2.extra = cp -f ../iconsets/system/default/psiplus/logo_32.png $(INSTALL_ROOT)$$icon2.path/psi-plus.png
 	icon3.path=$$PREFIX/share/icons/hicolor/48x48/apps
-	icon3.extra = cp -f ../iconsets/system/default/psiplus/logo_48.png $(INSTALL_ROOT)$$icon3.path/psi.png
+	icon3.extra = cp -f ../iconsets/system/default/psiplus/logo_48.png $(INSTALL_ROOT)$$icon3.path/psi-plus.png
 	icon4.path=$$PREFIX/share/icons/hicolor/64x64/apps
-	icon4.extra = cp -f ../iconsets/system/default/psiplus/logo_64.png $(INSTALL_ROOT)$$icon4.path/psi.png
+	icon4.extra = cp -f ../iconsets/system/default/psiplus/logo_64.png $(INSTALL_ROOT)$$icon4.path/psi-plus.png
 	icon5.path=$$PREFIX/share/icons/hicolor/128x128/apps
-	icon5.extra = cp -f ../iconsets/system/default/psiplus/logo_128.png $(INSTALL_ROOT)$$icon5.path/psi.png
+	icon5.extra = cp -f ../iconsets/system/default/psiplus/logo_128.png $(INSTALL_ROOT)$$icon5.path/psi-plus.png
 	INSTALLS += dt icon1 icon2 icon3 icon4 icon5
 }
 
@@ -140,7 +140,7 @@ RESOURCES += ../psi.qrc ../iconsets.qrc
 
 # Platform specifics
 unix:!mac {
-	QMAKE_POST_LINK = rm -f ../psi ; ln -s src/psi ../psi
+	QMAKE_POST_LINK = rm -f ../psi-plus ; ln -s src/psi-plus ../psi-plus
 }
 win32 {
 	contains(QMAKE_HOST.arch, x86_64):{
--- git.orig/src/tools/tunecontroller/plugins/psifile/psifileplugin.cpp
+++ git/src/tools/tunecontroller/plugins/psifile/psifileplugin.cpp
@@ -29,7 +29,7 @@ QString PsiFilePlugin::name()
 
 TuneController* PsiFilePlugin::createController() 
 {
-	return new FileTuneController(ApplicationInfo::homeDir() + "/tune");
+	return new FileTuneController(ApplicationInfo::homeDir(ApplicationInfo::CacheLocation) + "/tune");
 }
 
 Q_EXPORT_PLUGIN2(psifileplugin, PsiFilePlugin);
--- git.orig/src/translationmanager.cpp
+++ git/src/translationmanager.cpp
@@ -174,7 +174,7 @@ QStringList TranslationManager::translat
 	QStringList dirs;
 	QString subdir = "";
 	dirs += "." + subdir;
-	dirs += ApplicationInfo::homeDir() + subdir;
+	dirs += ApplicationInfo::homeDir(ApplicationInfo::DataLocation) + subdir;
 	dirs += ApplicationInfo::resourcesDir() + subdir;
 	return dirs;
 }
--- git.orig/src/vcardfactory.cpp
+++ git/src/vcardfactory.cpp
@@ -101,8 +101,8 @@ void VCardFactory::saveVCard(const Jid& 
 	// save vCard to disk
 
 	// ensure that there's a vcard directory to save into
-	QDir p(pathToProfile(activeProfile));
-	QDir v(pathToProfile(activeProfile) + "/vcard");
+	QDir p(pathToProfile(activeProfile, ApplicationInfo::CacheLocation));
+	QDir v(pathToProfile(activeProfile, ApplicationInfo::CacheLocation) + "/vcard");
 	if(!v.exists())
 		p.mkdir("vcard");
 
--- git.orig/src/activeprofiles_win.cpp
+++ git/src/activeprofiles_win.cpp
@@ -39,7 +39,7 @@
 class ActiveProfiles::Private : public QWidget
 {
 public:
-	Private(ActiveProfiles *aprof) : app(ApplicationInfo::IPCName()), home(ApplicationInfo::homeDir()), profile(""), ap(aprof), mutex(0), changesMutex(0) {
+	Private(ActiveProfiles *aprof) : app(ApplicationInfo::IPCName()), home(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation)), profile(""), ap(aprof), mutex(0), changesMutex(0) {
 
 		app.replace('\\', '/');	// '\\' has a special meaning in mutex name
 		home.replace('\\', '/');
