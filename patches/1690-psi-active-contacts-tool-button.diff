--- git.temp.orig/options/default.xml
+++ git.temp/options/default.xml
@@ -533,6 +533,7 @@ QLineEdit#le_status_text {
 				<show_self type="QKeySequence" comment="Show Self"></show_self>
 				<show_statusmsg type="QKeySequence" comment="Show Status Message"></show_statusmsg>
 				<publish_tune type="QKeySequence" comment="Publish Tune"></publish_tune>
+				<active_contacts type="QKeySequence" comment="Active contacts"/>
 				<status_all type="QKeySequence" comment="Status All"></status_all>
 				<status_group type="QKeySequence" comment="Status Group"></status_group>
 				<status_chat type="QKeySequence" comment="Status Chat"></status_chat>
--- /dev/null
+++ git.temp/src/activecontactsmenu.cpp
@@ -0,0 +1,70 @@
+/*
+ * activecontactsmenu.cpp
+ * Copyright (C) 2011  Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include "activecontactsmenu.h"
+#include "psiaccount.h"
+#include "psicontact.h"
+#include "psiiconset.h"
+#include "psicon.h"
+
+
+class ActiveContactAction : public QAction
+{
+	Q_OBJECT
+public:
+	ActiveContactAction(const QString& jid, const QString& nick, const QIcon& icon, PsiAccount* pa, QMenu* parent)
+		: QAction(icon, nick, parent)
+		, pa_(pa)
+		, jid_(jid)
+	{
+		parent->addAction(this);
+		connect(this, SIGNAL(triggered()), SLOT(actionActivated()));
+	}
+
+private slots:
+	void actionActivated()
+	{
+		pa_->actionDefault(Jid(jid_));
+	}
+
+private:
+	PsiAccount* pa_;
+	QString jid_;
+};
+
+
+
+ActiveContactsMenu::ActiveContactsMenu(PsiCon *psi, QWidget *parent)
+	: QMenu(parent)
+	, psi_(psi)
+{
+	foreach(PsiAccount *pa, psi_->contactList()->accounts()) {
+		if(!pa->enabled())
+			continue;
+
+		QList<PsiContact*> list = pa->activeContacts();
+		foreach(PsiContact* pc, list) {
+			new ActiveContactAction(pc->jid().full(), pc->name(), PsiIconset::instance()->statusPtr(pc->jid(), pc->status())->icon(), pa, this);
+		}
+	}
+}
+
+
+#include "activecontactsmenu.moc"
--- /dev/null
+++ git.temp/src/activecontactsmenu.h
@@ -0,0 +1,38 @@
+/*
+ * activecontactsmenu.h
+ * Copyright (C) 2011  Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#ifndef ACTIVECONTACTSMENU_H
+#define ACTIVECONTACTSMENU_H
+
+#include <QMenu>
+
+class PsiCon;
+
+class ActiveContactsMenu : public QMenu
+{
+	Q_OBJECT
+public:
+	ActiveContactsMenu(PsiCon* psi, QWidget* parent);
+
+private:
+	PsiCon* psi_;
+};
+
+#endif
--- git.temp.orig/src/mainwin.cpp
+++ git.temp/src/mainwin.cpp
@@ -74,6 +74,7 @@
 #include "mooddlg.h"
 #include "activitydlg.h"
 #include "geolocationdlg.h"
+#include "activecontactsmenu.h"
 
 #include "mainwin_p.h"
 
@@ -660,6 +661,8 @@ void MainWin::registerAction( IconAction
 	} actionlist[] = {
 		{ "choose_status", activated, this, SLOT( actChooseStatusActivated() ) },
 		{ "reconnect_all", activated, this, SLOT( actReconnectActivated() ) },
+
+		{ "active_contacts",activated, this, SLOT( actActiveContacts() ) },
 #ifndef NEWCONTACTLIST
 		{ "show_offline", toggled, cvlist, SLOT( setShowOffline(bool) ) },
 		{ "show_away",    toggled, cvlist, SLOT( setShowAway(bool) ) },
@@ -1247,6 +1250,14 @@ void MainWin::actSetGeolocActivated()
 	}
 }
 
+void MainWin::actActiveContacts()
+{
+	ActiveContactsMenu* acm = new ActiveContactsMenu(d->psi, this);
+	if(!acm->actions().isEmpty())
+		acm->exec(QCursor::pos());
+	delete acm;
+}
+
 void MainWin::activatedAccOption(PsiAccount* pa, int x)
 {
 	if(x == 0) {
--- git.temp.orig/src/mainwin.h
+++ git.temp/src/mainwin.h
@@ -148,6 +148,7 @@ private slots:
 	void actSetMoodActivated();
 	void actSetActivityActivated();
 	void actSetGeolocActivated();
+	void actActiveContacts();
 
 	bool showDockMenu(const QPoint &);
 	void dockActivated();
--- git.temp.orig/src/psiaccount.cpp
+++ git.temp/src/psiaccount.cpp
@@ -3302,6 +3302,17 @@ QList<ChatDlg*> PsiAccount::findChatDial
 	return findDialogs<ChatDlg*>(jid, compareResource);
 }
 
+QList<PsiContact*> PsiAccount::activeContacts() const
+{
+	QList<PsiContact*> ret;
+	foreach(PsiContact *pc, contactList()) {
+		if(pc->isActiveContact()) {
+			ret.append(pc);
+		}
+	}
+	return ret;
+}
+
 QWidget* PsiAccount::findDialog(const QMetaObject& mo, const Jid& jid, bool compareResource) const
 {
 	return d->findDialog(mo, jid, compareResource);
--- git.temp.orig/src/psiaccount.h
+++ git.temp/src/psiaccount.h
@@ -166,6 +166,8 @@ public:
 	ChatDlg* findChatDialogEx(const Jid& jid) const;
 	QList<ChatDlg*> findChatDialogs(const Jid& jid, bool compareResource = true) const;
 
+	QList<PsiContact*> activeContacts() const;
+
 	template<typename T>
 	inline T findDialog(const Jid& jid = Jid(), bool compareResource = true) const {
 		return static_cast<T>(findDialog(((T)0)->staticMetaObject, jid, compareResource));
--- git.temp.orig/src/psiactionlist.cpp
+++ git.temp/src/psiactionlist.cpp
@@ -190,9 +190,13 @@ void PsiActionList::Private::createMainW
 		IconAction *eventNotifier = new EventNotifierAction(this, "EventNotifierAction");
 		eventNotifier->setWhatsThis (tr("Special item that displays number of pending events"));
 
+		IconAction *actActiveContacts = new IconAction (tr("Active contacts"), "psi/jabber", tr("Active contacts"), 0, this);
+		actActiveContacts->setWhatsThis (tr("Simple way to find contacts with opened chats"));
+
 		ActionNames actions[] = {
 			{ "button_options", optionsButton },
 			{ "button_status",  statusButton  },
+			{ "active_contacts",actActiveContacts},
 			{ "event_notifier", eventNotifier },
 			{ "", 0 }
 		};
--- git.temp.orig/src/psichatdlg.cpp
+++ git.temp/src/psichatdlg.cpp
@@ -33,6 +33,7 @@
 #include "messageview.h"
 #include "iconselect.h"
 #include "avatars.h"
+#include "activecontactsmenu.h"
 #include "psitooltip.h"
 #include "psioptions.h"
 #include "coloropt.h"
@@ -494,6 +495,9 @@ void PsiChatDlg::initToolButtons()
 
 	act_templates_ = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
 	act_templates_->setMenu(getTemplateMenu());
+
+	act_active_contacts = new IconAction (tr("Active contacts"), "psi/jabber", tr("Active contacts"), 0, this);
+	connect(act_active_contacts, SIGNAL(triggered()), SLOT(actActiveContacts()));
 }
 
 void PsiChatDlg::initToolBar()
@@ -522,6 +526,7 @@ void PsiChatDlg::initToolBar()
 		ui_.toolbar->addAction(act_voice_);
 	}
 	ui_.toolbar->addAction(act_add_contact);
+	ui_.toolbar->addAction(act_active_contacts);
 }
 
 void PsiChatDlg::contextMenuEvent(QContextMenuEvent *)
@@ -674,6 +679,14 @@ void PsiChatDlg::updateJidWidget(const Q
 	internal_change = false;
 }
 
+void PsiChatDlg::actActiveContacts()
+{
+	ActiveContactsMenu* acm = new ActiveContactsMenu(account()->psi(), this);
+	if(!acm->actions().isEmpty())
+		acm->exec(QCursor::pos());
+	delete acm;
+}
+
 void PsiChatDlg::contactUpdated(UserListItem* u, int status, const QString& statusString)
 {
 	Q_UNUSED(statusString);
--- git.temp.orig/src/psichatdlg.h
+++ git.temp/src/psichatdlg.h
@@ -60,6 +60,7 @@ private slots:
 	void contactChanged();
 	QString makeContactName(const QString &name, const Jid &jid) const;
 	void doSwitchJidMode();
+	void actActiveContacts();
 
 private:
 	void initToolBar();
@@ -108,6 +109,7 @@ private:
 
 	ActionLineEdit *le_autojid;
 	IconAction *act_autojid;
+	IconAction *act_active_contacts;
 
 	MCmdManager mCmdManager_;
 	MCmdSimpleSite mCmdSite_;
--- git.temp.orig/src/psicontact.cpp
+++ git.temp/src/psicontact.cpp
@@ -540,6 +540,17 @@ bool PsiContact::isAnimated() const
 }
 
 /**
+ * Returns true if there is opened chat with this contact
+ */
+bool PsiContact::isActiveContact() const
+{
+	if(isConference()) {
+		return false;
+	}
+	return account()->findChatDialog(jid(), isPrivate() ? true : false);
+}
+
+/**
  * Contact should always be visible if it's alerting.
  */
 bool PsiContact::shouldBeVisible() const
--- git.temp.orig/src/psicontact.h
+++ git.temp/src/psicontact.h
@@ -66,6 +66,8 @@ public:
 
 	virtual bool isAnimated() const;
 
+	bool isActiveContact() const;
+
 	void activate();
 
 	virtual void setEditing(bool editing);
--- git.temp.orig/src/src.pri
+++ git.temp/src/src.pri
@@ -130,6 +130,7 @@ HEADERS += \
 	$$PWD/statusdlg.h \
 	$$PWD/statuscombobox.h \
 	$$PWD/eventdlg.h \
+	$$PWD/activecontactsmenu.h \
 	$$PWD/chatdlg.h \
 	$$PWD/psichatdlg.h \
 	$$PWD/chatsplitter.h \
@@ -276,6 +277,7 @@ SOURCES += \
 	$$PWD/statusdlg.cpp \
 	$$PWD/statuscombobox.cpp \
 	$$PWD/eventdlg.cpp \
+	$$PWD/activecontactsmenu.cpp \
 	$$PWD/chatdlg.cpp \
 	$$PWD/psichatdlg.cpp \
 	$$PWD/chatsplitter.cpp \
