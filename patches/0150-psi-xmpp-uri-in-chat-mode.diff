--- git.orig/src/chatdlg.cpp
+++ git/src/chatdlg.cpp
@@ -1003,6 +1003,12 @@ void ChatDlg::addEmoticon(QString text)
 	PsiRichText::addEmoticon(chatEdit(), text);
 }
 
+void ChatDlg::setText(const QString& text)
+{
+	chatEdit()->clear();
+	chatEdit()->insertHtml(text + ' ');
+}
+
 /**
  * Records that the user is composing
  */
--- git.orig/src/chatdlg.h
+++ git/src/chatdlg.h
@@ -72,6 +72,7 @@ public:
 
 public:
 	PsiAccount* account() const;
+	void setText(const QString& );
 
 signals:
 	void aInfo(const Jid &);
--- git.orig/src/common.cpp
+++ git/src/common.cpp
@@ -25,6 +25,7 @@
 #include "psiiconset.h"
 #include "applicationinfo.h"
 #include "psioptions.h"
+#include "tabdlg.h"
 
 #include <QUrl>
 #include <QProcess>
@@ -377,6 +378,32 @@ void closeDialogs(QWidget *w)
 	}
 }
 
+TabbableWidget* findActiveTab()
+{
+	QWidget* chat = QApplication::activeWindow();
+	TabbableWidget* tw = 0;
+	if(chat) {
+		TabDlg* td = qobject_cast<TabDlg*>(chat);
+		if(td) {
+			tw = td->getCurrentTab();
+		}
+		else {
+			tw = qobject_cast<TabbableWidget*>(chat);
+			if (!tw) {
+				QList<TabDlg*> tmp = chat->findChildren<TabDlg*>(); // all-in-one
+				while(!tmp.isEmpty()) {
+					TabDlg* td = tmp.takeFirst();
+					tw = td->getCurrentTab();
+					if(tw) {
+						break;
+					}
+				}
+			}
+		}
+	}
+	return tw;
+}
+
 #ifdef HAVE_X11
 #include <X11/Xlib.h>
 #include <X11/Xutil.h> // needed for WM_CLASS hinting
--- git.orig/src/common.h
+++ git/src/common.h
@@ -29,6 +29,7 @@
 #include <QColor>
 
 class QMenu;
+class TabbableWidget;
 
 #include "statuspreset.h"
 
@@ -147,6 +148,7 @@ void clearMenu(QMenu *m); // deletes all
 void bringToFront(QWidget *w, bool grabFocus = true);
 void replaceWidget(QWidget *, QWidget *);
 void closeDialogs(QWidget *);
+TabbableWidget* findActiveTab();
 #ifdef HAVE_X11
 #include <QWidget>
 #include <QX11Info>
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -3875,7 +3875,7 @@ void PsiAccount::actionHistoryBox(PsiEve
 	w->show();
 }
 
-void PsiAccount::actionOpenChat(const Jid &j)
+void PsiAccount::actionOpenChat(const Jid &j, const QString & body)
 {
 	UserListItem *u = find(j);
 	if(!u) {
@@ -3909,9 +3909,9 @@ void PsiAccount::actionOpenChat(const Ji
 	}
 
 	if(!res.isEmpty())
-		openChat(j.withResource(res), UserAction);
+		openChat(j.withResource(res), UserAction, body);
 	else
-		openChat(j, UserAction);
+		openChat(j, UserAction, body);
 }
 
 // unlike actionOpenChat(), this function will work on jids that aren't
@@ -4211,11 +4211,11 @@ void PsiAccount::openUri(const QUrl &uri
 		QString subject = uri.queryItemValue("subject");
 		QString body = uri.queryItemValue("body");
 		QString type = uri.queryItemValue("type");
-		if (type == "chat" && subject.isEmpty() && body.isEmpty()) {
+		if (type == "chat" && subject.isEmpty()) {
 			if (!find(entity)) {
 				addUserListItem(entity);
 			}
-			actionOpenChat(entity);
+			actionOpenChat(entity, body);
 		} else {
 			dj_newMessage(entity, body, subject, "");
 		}
@@ -5186,7 +5186,7 @@ void PsiAccount::processChats(const Jid 
 	processChatsHelper(j, true);
 }
 
-void PsiAccount::openChat(const Jid& j, ActivationType activationType)
+void PsiAccount::openChat(const Jid& j, ActivationType activationType, const QString& body)
 {
 	ChatDlg* chat = ensureChatDlg(j);
 	chat->ensureTabbedCorrectly();
@@ -5202,6 +5202,9 @@ void PsiAccount::openChat(const Jid& j, 
 			QTimer::singleShot(1000, dlg, SLOT(showTabWithoutActivation()));
 		}
 	}
+	if (!body.isEmpty()) {
+		chat->setText(body);
+	}
 }
 
 void PsiAccount::chatMessagesRead(const Jid &j)
--- git.orig/src/psiaccount.h
+++ git/src/psiaccount.h
@@ -318,7 +318,7 @@ public slots:
 	void actionRename(const Jid &, const QString &);
 	void actionGroupRename(const QString &, const QString &);
 	void actionHistory(const Jid &);
-	void actionOpenChat(const Jid &);
+	void actionOpenChat(const Jid &,const QString & body = QString());
 	void actionOpenSavedChat(const Jid &);
 	void actionOpenChat2(const Jid &);
 	void actionOpenChatSpecific(const Jid &);
@@ -493,7 +493,7 @@ private:
 
 	void processChatsHelper(const Jid& jid, bool removeEvents);
 	void processChats(const Jid &);
-	void openChat(const Jid &, ActivationType activationType);
+	void openChat(const Jid &, ActivationType activationType, const QString & body = QString());
 	EventDlg *ensureEventDlg(const Jid &);
 	friend class PsiCon;
 
--- git.orig/src/psicon.cpp
+++ git/src/psicon.cpp
@@ -1187,7 +1187,14 @@ void PsiCon::openUri(const QUrl &uri)
 	// authority
 	PsiAccount *pa = 0;
 	//if (uri.authority().isEmpty()) {
-		pa = d->contactList->defaultAccount();
+		TabbableWidget* tw = findActiveTab();
+		if (tw) {
+			pa = tw->account();
+		}
+		if (!pa) {
+			pa = d->contactList->defaultAccount();
+		}
+
 		if (!pa) {
 			QMessageBox::critical(0, tr("Error"), QString("You need to have an account configured and enabled to open URIs (links)."));
 			return;
--- git.orig/src/tabs/tabdlg.cpp
+++ git/src/tabs/tabdlg.cpp
@@ -798,3 +798,8 @@ void TabDlg::setSimplifiedCaptionEnabled
 	simplifiedCaption_ = enabled;
 	updateCaption();
 }
+
+TabbableWidget* TabDlg::getCurrentTab() const
+{
+	return dynamic_cast<TabbableWidget*>(tabWidget_->currentPage());
+}
--- git.orig/src/tabs/tabdlg.h
+++ git/src/tabs/tabdlg.h
@@ -84,6 +84,7 @@ public:
 	void setUserManagementEnabled(bool enabled); // default enabled
 	void setTabBarShownForSingles(bool enabled); // default enabled
 	void setSimplifiedCaptionEnabled(bool enabled); // default disabled
+	TabbableWidget* getCurrentTab() const;
 
 protected:
 	void setShortcuts();
